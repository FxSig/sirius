<?xml version="1.0"?>
<doc>
    <assembly>
        <name>spirallab.core</name>
    </assembly>
    <members>
        <member name="T:SpiralLab.StringCipher">
            <summary>
            Encoding/Decoding 
            </summary>
        </member>
        <member name="M:SpiralLab.StringCipher.Encrypt(System.String,System.String)">
            <summary>
            암호화
            </summary>
            <param name="plainText"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.StringCipher.Decrypt(System.String,System.String)">
            <summary>
            복호화
            </summary>
            <param name="cipherText"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.BitHelper`2">
            <summary>
            비트 조작용 객체
            </summary>
            <typeparam name="TEnum">각 비트 필드에 대한 설명을 가진 열거 데이타</typeparam>
            <typeparam name="TData">데이타 타입 : 최대 64비트 (byte, short, int32, int64 등)</typeparam>
        </member>
        <member name="P:SpiralLab.BitHelper`2.Data">
            <summary>
            데이타 접근용
            </summary>
        </member>
        <member name="M:SpiralLab.BitHelper`2.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.BitHelper`2.#ctor(`1)">
            <summary>
            생성자 (데이타로 초기화)
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:SpiralLab.BitHelper`2.Add(`0)">
            <summary>
            해당 비트 설정
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:SpiralLab.BitHelper`2.Remove(`0)">
            <summary>
            해당 비트 해제
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:SpiralLab.BitHelper`2.Contain(`0)">
            <summary>
            해당 비트 설정 여부
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.BitHelper`2.Item(`0)">
            <summary>
            해당 비트 접근 및 조작
            </summary>
            <param name="bit">플래그 비트 위치</param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.BitHelper`2.Item(`0[])">
            <summary>
            복합 비트 접근/조작
            </summary>
            <param name="bits">비트 배열</param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.BitHelper`2.Item(System.Int32)">
            <summary>
            해당 비트 접근/조작
            </summary>
            <param name="bit">비트 위치</param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.BitHelper`2.Item(System.Int32[])">
            <summary>
            복합 비트 인덱스들로 접근/조작
            </summary>
            <param name="bits">비트 배열</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.BitHelper`1">
            <summary>
            비트 조작
            </summary>
            <typeparam name="TData">데이타 타입 : byte, short, int32, int64</typeparam>
        </member>
        <member name="P:SpiralLab.BitHelper`1.Data">
            <summary>
            데이타 접근요
            </summary>
        </member>
        <member name="M:SpiralLab.BitHelper`1.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.BitHelper`1.#ctor(`0)">
            <summary>
            생성자 (초기 데이타)
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:SpiralLab.BitHelper`1.Item(System.Int32)">
            <summary>
            비트 인덱스로 접근/조작
            </summary>
            <param name="bit">비트위치</param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.BitHelper`1.Item(System.Int32[])">
            <summary>
            복합 비트 인덱스들로 접근/조작
            </summary>
            <param name="bits">비트 배열</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.IEquipment">
            <summary>
            Equipment 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.IEquipment.Name">
            <summary>
            장비 이름
            </summary>
        </member>
        <member name="P:SpiralLab.IEquipment.SeqHandler">
            <summary>
            시퀀스 핸들러 
            </summary>
        </member>
        <member name="P:SpiralLab.IEquipment.SeqLaser">
            <summary>
            시퀀스 레이저
            </summary>
        </member>
        <member name="P:SpiralLab.IEquipment.SeqVision">
            <summary>
            시퀀스 비전
            </summary>
        </member>
        <member name="P:SpiralLab.IEquipment.SeqAux">
            <summary>
            시퀀스 확장
            </summary>
        </member>
        <member name="P:SpiralLab.IEquipment.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.IEquipment.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.IMemory">
            <summary>
            메모리 인터페이스 
            데이타의 변경을 화면/혹은 DB에 통지해야 할 경우 PropertyChanged 이벤트 핸들러를 등록하여 사용한다
            메모리 정보를 DB 에 저장하는 경우 속성 정보가 변경될때마다 DB와 동기화 된다. 
            만약 DB 저장이 필요하지 않은 속성의 경우에는 [JsonIgnore] Attribute 를 지정해 준다
            다중 쓰레드 환경등에서의 동기화가 필요할 경우에는 반드시 SyncRoot 를 통해 공유 자원을 보호해야 한다
            </summary>
        </member>
        <member name="P:SpiralLab.IMemory.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.IMemory.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="T:SpiralLab.MemoryDB">
            <summary>
            메모리 데이터 베이스
            </summary>
        </member>
        <member name="M:SpiralLab.MemoryDB.#ctor(SpiralLab.IMemory,System.String,System.UInt32)">
            <summary>
            메모리 데이터 베이스 생성자
            </summary>
            <param name="memory">메모리 인터페이스 객체</param>
            <param name="dbFileName">데이터베이스 파일 이름 (예:test.db)</param>
            <param name="maxDataSize">데이타(Json 변환포맷) 최대 크기 (bytes)</param>
        </member>
        <member name="M:SpiralLab.MemoryDB.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.MemoryDB.Dispose">
            <summary>
            자원 해제
            </summary>
        </member>
        <member name="M:SpiralLab.MemoryDB.Initialize">
            <summary>
            초기화 및 동기화
            </summary>
        </member>
        <member name="M:SpiralLab.MemoryDB.PrepareTable">
            <summary>
            데이터 베이스 테이블 준비 (없으면 생성)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.MemoryDB.ReverseSync">
            <summary>
            DB 에 저장되어 있는 모든 속성 데이타를 실제 메모리 객체에 반영(동기화)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.MemoryDB.ForwardSync">
            <summary>
            속성들을 모두 조회하여 DB 에 없으면 삽입한다 (동기화)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.MemoryDB.Update(System.Reflection.PropertyInfo@)">
            <summary>
            속성 값이 변경될 경우 DB 에 업데이트
            </summary>
            <param name="prop">PropertyInfo 객체</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.ISequenceAuxiliary">
            <summary>
            Aux 시퀀스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceAuxiliary.Service">
            <summary>
            Aux 서비스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceAuxiliary.ServiceHandler">
            <summary>
            핸들러 서비스 외부 연결용
            </summary>
        </member>
        <member name="M:SpiralLab.ISequenceAuxiliary.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.ISequenceHandler">
            <summary>
            핸들러 시퀀스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceHandler.Service">
            <summary>
            서비스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceHandler.ServiceLaser">
            <summary>
            레이저 서비스 외부 연결용
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceHandler.ServiceVision">
            <summary>
            비전 서비스 외부 연결용
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceHandler.ServiceAuxiliary">
            <summary>
            Aux 외부 연결용
            </summary>
        </member>
        <member name="M:SpiralLab.ISequenceHandler.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.ISequenceLaser">
            <summary>
            레이저 시퀀스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceLaser.Service">
            <summary>
            서비스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceLaser.ServiceHandler">
            <summary>
            핸들러 서비스 외부 연결용
            </summary>
        </member>
        <member name="M:SpiralLab.ISequenceLaser.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.ISequence">
            <summary>
            시퀀스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequence.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.ISequence.SyncRoot">
            <summary>
            시퀀스 쓰레드 동기화 객체 
            </summary>
        </member>
        <member name="P:SpiralLab.ISequence.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.ISequenceVision">
            <summary>
            비전 시퀀스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceVision.Service">
            <summary>
            서비스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.ISequenceVision.ServiceHandler">
            <summary>
            핸들러 서비스 외부 연결용
            </summary>
        </member>
        <member name="M:SpiralLab.ISequenceVision.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.IService">
            <summary>
            서비스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.IService.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.IService.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.IServiceAuxiliary">
            <summary>
            Aux 서비스 인터페이스
            </summary>
        </member>
        <member name="T:SpiralLab.IServiceHandler">
            <summary>
            핸들러 서비스 인터페이스
            </summary>
        </member>
        <member name="T:SpiralLab.IServiceLaser">
            <summary>
            레이저 서비스 인터페이스
            </summary>
        </member>
        <member name="T:SpiralLab.IServiceVision">
            <summary>
            비전 서비스 인터페이스
            </summary>
        </member>
        <member name="T:SpiralLab.Core">
            <summary>
            스파이럴랩 코어 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Core.IsInitialized">
            <summary>
            초기화 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Core.IsRunningPlatform64">
            <summary>
            실행중인 런타임 
            true : x64
            false : x32
            </summary>
        </member>
        <member name="M:SpiralLab.Core.Initialize">
            <summary>
            초기화 (로그 엔진등을 초기화)
            최초에 한번 호출되어야 함
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Core.Version">
            <summary>
            코어 버전 정보
            </summary>
        </member>
        <member name="T:SpiralLab.Core.NativeMethods">
            <summary>
            P/Invoke 용 네이티브 코드 집합
            </summary>
        </member>
        <member name="T:SpiralLab.FormLicense">
            <summary>
            라이센스 체크용 폼
            </summary>
        </member>
        <member name="F:SpiralLab.FormLicense.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.FormLicense.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.FormLicense.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.LoggerMessage">
            <summary>
            로그 메시지 콜백 델리게이트 
            </summary>
            <param name="type">로그 타입</param>
            <param name="message">로그 메시지</param>
        </member>
        <member name="T:SpiralLab.Logger">
            <summary>
            로그 엔진
            </summary>
        </member>
        <member name="T:SpiralLab.Logger.Type">
            <summary>
            로그 타입
            </summary>
        </member>
        <member name="F:SpiralLab.Logger.Type.Trace">
            <summary>
            추적
            </summary>
        </member>
        <member name="F:SpiralLab.Logger.Type.Debug">
            <summary>
            디버그
            </summary>
        </member>
        <member name="F:SpiralLab.Logger.Type.Info">
            <summary>
            정보 (기본)
            </summary>
        </member>
        <member name="F:SpiralLab.Logger.Type.Warn">
            <summary>
            경고
            </summary>
        </member>
        <member name="F:SpiralLab.Logger.Type.Error">
            <summary>
            에러
            </summary>
        </member>
        <member name="F:SpiralLab.Logger.Type.Fatal">
            <summary>
            치명
            </summary>
        </member>
        <member name="E:SpiralLab.Logger.OnLogged">
            <summary>
            로그 메시지 이벤트 핸들러
            </summary>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.String)">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.String,System.Object)">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.String,System.Object,System.Object)">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.String,System.Object,System.Object,System.Object)">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.String,System.Object[])">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.Exception)">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="ex"></param>
        </member>
        <member name="M:SpiralLab.Logger.Log(SpiralLab.Logger.Type,System.Exception,System.String)">
            <summary>
            로그 메시지 기록
            </summary>
            <param name="type"></param>
            <param name="ex"></param>
            <param name="message"></param>
        </member>
        <member name="M:SpiralLab.Logger.ExceptionToString(System.Exception)">
            <summary>
            예외 상황 호출스택등 부가 정보 얻기
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Rockey4ND">
            <summary>
            Rockey 인증용 내부 객체
            </summary>
        </member>
        <member name="M:SpiralLab.Rockey4ND.Rockey(System.UInt16,System.UInt16@,System.UInt32@,System.UInt32@,System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@,System.Byte@)">
            <summary>
            인증용 내부 dll 함수 32/64 겸용
            </summary>
            <param name="function"></param>
            <param name="handle"></param>
            <param name="lp1"></param>
            <param name="lp2"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Rockey4ND.SerialNo">
            <summary>
            인증키 시리얼 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsRtcLicensed">
            <summary>
            라이센스 (Rtc) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.RtcLicenseMax">
            <summary>
            인스턴스 (Rtc) 최대 생성 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsRtcSyncAxisLicensed">
            <summary>
            라이센스 (SyncAXIS) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.RtcSyncAxisLicenseMax">
            <summary>
            인스턴스 (SyncAxis) 최대 생성 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsLaserLicensed">
            <summary>
            라이센스 (레이저 소스 제어 옵션) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsGridCheckerLicensed">
            <summary>
            라이센스 (이미지 기반 보정 데이타 추출 옵션) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsPathOptimizerLicensed">
            <summary>
            라이센스 (경로 최적화 옵션) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsMotfLicensed">
            <summary>
            라이센스 (MOTF) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsDualHeadLicensed">
            <summary>
            라이센스 (듀얼헤드 Master/Slave) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.Is3DLicensed">
            <summary>
            라이센스 (3D) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsDIOLicensed">
            <summary>
            라이센스 (DIO 입출력 장치) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsMotorLicensed">
            <summary>
            라이센스 (모션 구동장치) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsPowerMeterLicensed">
            <summary>
            라이센스 (파워메터) 인식 성공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Rockey4ND.IsVisionLicensed">
            <summary>
            라이센스 (머신 비전 옵션) 인식 성공 여부
            </summary>
        </member>
        <member name="M:SpiralLab.Rockey4ND.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Rockey4ND.Initialize">
            <summary>
            인식 시도
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Rockey4ND.InvalidLicense">
            <summary>
            인식 실패시 평가판 실행중 팝업후 종료
            </summary>
        </member>
        <member name="M:SpiralLab.Rockey4ND.MaxLicense">
            <summary>
            라이센스 개수 초과 
            </summary>
        </member>
    </members>
</doc>
