<?xml version="1.0"?>
<doc>
    <assembly>
        <name>spirallab.sirius</name>
    </assembly>
    <members>
        <member name="T:SpiralLab.Sirius.ConcurrentList`1">
            <summary>
            쓰레드 안전 리스트 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SpiralLab.Sirius.LwPolyLineVertex">
            <summary>
            LW polyline vertex
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LwPolyLineVertex.X">
            <summary>
            X 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LwPolyLineVertex.Y">
            <summary>
            Y 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LwPolyLineVertex.Bulge">
            <summary>
            Bulge 값 (1/4 atan)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LwPolyLineVertex.RampFactor">
            <summary>
            레이저의 가공 강도 (~1.0)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="bulge"></param>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Equals(SpiralLab.Sirius.LwPolyLineVertex)">
            <summary>
            동일성 검사
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.ToString">
            <summary>
            문자열
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Translate(SpiralLab.Sirius.LwPolyLineVertex,System.Numerics.Vector2)">
            <summary>
            이동
            </summary>
            <param name="vertex"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Rotate(SpiralLab.Sirius.LwPolyLineVertex,System.Single,System.Numerics.Vector2)">
            <summary>
            회전
            </summary>
            <param name="vertex"></param>
            <param name="angle"></param>
            <param name="rotateCenter"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Scale(SpiralLab.Sirius.LwPolyLineVertex,System.Numerics.Vector2)">
            <summary>
            크기변환
            </summary>
            <param name="vertex"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Scale(SpiralLab.Sirius.LwPolyLineVertex,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            크기변환
            </summary>
            <param name="vertex"></param>
            <param name="scale"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.op_Subtraction(SpiralLab.Sirius.LwPolyLineVertex,SpiralLab.Sirius.LwPolyLineVertex)">
            <summary>
            두 폴리라인 벡터의 차
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Distance(SpiralLab.Sirius.LwPolyLineVertex,SpiralLab.Sirius.LwPolyLineVertex)">
            <summary>
            두 폴리라인 벡터의 거리
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Angle(SpiralLab.Sirius.LwPolyLineVertex,SpiralLab.Sirius.LwPolyLineVertex)">
            <summary>
            두 폴리라인 벡터가 이루는 각도
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertex.Angle(SpiralLab.Sirius.LwPolyLineVertex)">
            <summary>
            지정된 폴리라인 벡터의 회전 각도
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Offset">
            <summary>
            오프셋 구조체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.X">
            <summary>
            X 위치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.Y">
            <summary>
            Y 위치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.Angle">
            <summary>
            회전량 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="angle"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.#ctor(System.Numerics.Vector2,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="v"></param>
            <param name="angle"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.Translate(SpiralLab.Sirius.Offset,System.Single,System.Single)">
            <summary>
            이동량
            </summary>
            <param name="o"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.Translate(SpiralLab.Sirius.Offset,System.Numerics.Vector2)">
            <summary>
            이동량
            </summary>
            <param name="o"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.Rotate(SpiralLab.Sirius.Offset,System.Single,System.Numerics.Vector2)">
            <summary>
            회전량
            </summary>
            <param name="o"></param>
            <param name="angle"></param>
            <param name="rotateCenter"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.Scale(SpiralLab.Sirius.Offset,System.Numerics.Vector2)">
            <summary>
            회전량
            </summary>
            <param name="o"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.Scale(SpiralLab.Sirius.Offset,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            크기 변화량
            </summary>
            <param name="o"></param>
            <param name="scale"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.Zero">
            <summary>
            0 값으로 초기화된 객체 반환
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.ToVector2">
            <summary>
            Vector2 구조체로 변환된 값 반환
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Offset.ToMatrix">
            <summary>
            3x3 행렬값으로 계산된 값 반환
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Offset.ToString">
            <summary>
            문자열 
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Vertex">
            <summary>
            vertex 구조체
            (.NET의 Vector2를 propertygrid 에 출력하기 용이하지 않아, 사용자가 커스텀이 가능한 vector2 를 모사함. points 에서 사용중)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Vertex.Location">
            <summary>
            위치
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.#ctor(System.Single,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.#ctor(System.Numerics.Vector2)">
            <summary>
            생성자
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.Translate(SpiralLab.Sirius.Vertex,System.Single,System.Single)">
            <summary>
            이동량
            </summary>
            <param name="v"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.Translate(SpiralLab.Sirius.Vertex,System.Numerics.Vector2)">
            <summary>
            이동량
            </summary>
            <param name="v"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.Rotate(SpiralLab.Sirius.Vertex,System.Single,System.Numerics.Vector2)">
            <summary>
            회전량
            </summary>
            <param name="vertex"></param>
            <param name="angle"></param>
            <param name="rotateCenter"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.Scale(SpiralLab.Sirius.Vertex,System.Numerics.Vector2)">
            <summary>
            크기변환
            </summary>
            <param name="vertex"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.Scale(SpiralLab.Sirius.Vertex,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            크기변환
            </summary>
            <param name="vertex"></param>
            <param name="scale"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Vertex.ToMatrix">
            <summary>
            3x3 행렬로 계산된 결과 리턴
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Vertex.ToString">
            <summary>
            문자열
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Vertex.Zero">
            <summary>
            0 값으로 초기화된 벡터 리턴
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionData3D">
            <summary>
            3차원 보정 데이타 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Reference">
            <summary>
            이론값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Measured">
            <summary>
            실측값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            생성자
            </summary>
            <param name="reference"></param>
            <param name="measured"></param>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.ReferenceToString">
            <summary>
            이론값 문자열
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.MeasuredToString">
            <summary>
            실측값 문자열
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.ICorrection3D">
            <summary>
            correction interface for 3D scanner
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.Index">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.Rows">
            <summary>
            행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.Cols">
            <summary>
            열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.ZLower">
            <summary>
            Z 상단 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.ZUpper">
            <summary>
            Z 하단 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.DataLower">
            <summary>
            Z 하단용 절대 위치, 실측 데이타 2차원 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.DataUpper">
            <summary>
            Z 상단용 절대 위치, 실측 데이타 2차원 배열
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ICorrection3D.OnResult">
            <summary>
            변환 결과에 대한 출력 문자열용 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.ResultMessage">
            <summary>
            변환 결과 문자열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.Form">
            <summary>
            내부 윈폼
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            스캐너 에러 위치의 절대 위치정보 입력 (mm) : input scanner error absolute position 
            </summary>
            <param name="row">행(row) 개수</param>
            <param name="col">열(col) 개수</param>
            <param name="vLogical">x, y, z 기준 절대 위치(logical absoulte position)</param>
            <param name="vPhysical">x, y, z 측정 절대 위치(physical absolute position)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            스캐너 에러 위치의 상대 위치정보 입력 (mm) : input scanner error relative position 
            </summary>
            <param name="row">행(row) 개수</param>
            <param name="col">열(col) 개수</param>
            <param name="vLogical">x, y, z 기준 절대 위치(logical absoulte position)</param>
            <param name="vRelative">x, y, z 측정 상대 위치(relative position)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.Clear">
            <summary>
            입력된 모든 좌표정보 삭제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.Convert">
            <summary>
            변환작업 시작
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.ResultEventHandler">
            <summary>
            notify message result for scanner field correction 
            </summary>
            <param name="sender">IRtcCorrection interface</param>
            <param name="index">identifer</param>
            <param name="success">whether success or not</param>
            <param name="result">messages</param>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionData2D">
            <summary>
            2차원 보정 데이타 구조체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Reference">
            <summary>
            이론상의 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Measured">
            <summary>
            실제 측정된 좌표값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            생성자
            </summary>
            <param name="reference">이론상의 좌표값</param>
            <param name="measured">실제 측정된 좌표값</param>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.ReferenceToString">
            <summary>
            이론값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.MeasuredToString">
            <summary>
            실측값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.ICorrection2D">
            <summary>
            correction interface for 2D scanner
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Index">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Rows">
            <summary>
            행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Cols">
            <summary>
            열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Data">
            <summary>
            절대 위치, 실측 데이타의 2차원 배열
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ICorrection2D.OnResult">
            <summary>
            변환 결과에 대한 출력 문자열용 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.ResultMessage">
            <summary>
            변환 결과 문자열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Form">
            <summary>
            내부 윈폼
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            스캐너 에러 위치의 절대 위치정보 입력 (mm) : input scanner error absolute position 
            </summary>
            <param name="row">행(row) 개수</param>
            <param name="col">열(col) 개수</param>
            <param name="vLogical">x, y, z 기준 절대 위치(logical absoulte position)</param>
            <param name="vPhysical">x, y, z 측정 절대 위치(physical absolute position)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            스캐너 에러 위치의 상대 위치정보 입력 (mm) : input scanner error relative position 
            </summary>
            <param name="row">행(row) 개수</param>
            <param name="col">열(col) 개수</param>
            <param name="vLogical">x, y, z 기준 절대 위치(logical absoulte position)</param>
            <param name="vRelative">x, y, z 측정 상대 위치(relative position)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.Clear">
            <summary>
            입력된 모든 좌표정보 삭제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.Convert">
            <summary>
            변환작업 시작
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcCorrection2D">
            <summary>
            scanner correction for 2D 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.EntitySelectedChangedEvent">
            <summary>
            선택된 엔티티 목록이 변경된것을 통지하는 이벤트 델리게이트
            </summary>
            <param name="doc"></param>
            <param name="list"></param>
        </member>
        <member name="T:SpiralLab.Sirius.EntityAlign">
            <summary>
            entity align action commands
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Action">
            <summary>
            액션(undo/redo) 처리용 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Action.OnEntitySelectedChanged">
            <summary>
            event for changed selected entities
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Action.SelectedEntity">
            <summary>
            list of selected entities
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Action.ClipBoard">
            <summary>
            clipboard for copy, cut, paste actions
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Action.#ctor(SpiralLab.Sirius.IDocument)">
            <summary>
            constructor (생성자)
            </summary>
            <param name="owner">부모 문서(document)</param>
        </member>
        <member name="M:SpiralLab.Sirius.Action.Insert(SpiralLab.Sirius.IUndoRedo)">
            <summary>
            Undo/Redo 스택에 명령 삽입 (UndoRedoEnable 으로 삽입 여부 처리가능)
            </summary>
            <param name="ur"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActUndo">
            <summary>
            Undo 명령
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActRedo">
            <summary>
            Redo 명령
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActNew">
            <summary>
            신규 Doc 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActSave(System.String)">
            <summary>
            Doc 저장
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActDocumentPropertyChanged(SpiralLab.Sirius.IDocument,System.String,System.Object,System.Object)">
            <summary>
            DOC 의 속성 변경 명령
            </summary>
            <param name="doc"></param>
            <param name="propName"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActLayerActive(SpiralLab.Sirius.Layer)">
            <summary>
            활성화 레이어 변경 명령
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActLayerDragMove(SpiralLab.Sirius.Layer,SpiralLab.Sirius.Layer,System.Int32)">
            <summary>
            레이어의 순서를 변경 명령
            </summary>
            <param name="layer"></param>
            <param name="targetLayer"></param>
            <param name="targetIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityAdd(SpiralLab.Sirius.IEntity,SpiralLab.Sirius.Layer)">
            <summary>
            단일 엔티티 추가 명령
            </summary>
            <param name="entity"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityAdd(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.Layer)">
            <summary>
            다중 엔티티 추가 명령
            </summary>
            <param name="entity"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntitySelect(System.Collections.Generic.List{SpiralLab.Sirius.IEntity})">
            <summary>
            엔티티 선택 명령
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityGroup(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.Layer)">
            <summary>
            지정된 엔티티들을 그룹으로 변환 명령
            </summary>
            <param name="list"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityGroupMOTF(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.Layer)">
            <summary>
            지정된 엔티티들을 MOTF 그룹으로 변환 명령
            </summary>
            <param name="list"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityUngroup(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.Layer)">
            <summary>
            지정된 그룹들을 개별 엔티티로 변환 명령
            </summary>
            <param name="list"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityDelete(System.Collections.Generic.List{SpiralLab.Sirius.IEntity})">
            <summary>
            지정된 엔티티 삭제 명령
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityAlign(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.EntityAlign)">
            <summary>
            지정된 엔티티 위치 이동 명령
            복수의 객체의 경우 해당 객체들을 둘러싸는 영역(BoundRect)을 기준으로 동작
            하나의 객체의 경우 Document 의 가로 세로 크기를 기준으로 동작
            </summary>
            <param name="list"></param>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityTransit(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},System.Single,System.Single)">
            <summary>
            지정된 엔티티의 위치를 특정한 양 만큼 이동 명령
            </summary>
            <param name="list"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityDragMove(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.Layer,System.Int32)">
            <summary>
            지정된 엔티티의 순서를 변경하는 명령
            </summary>
            <param name="list"></param>
            <param name="targetLayer"></param>
            <param name="targetIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityExplode(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},SpiralLab.Sirius.Layer)">
            <summary>
            지정된 엔티티를 분해(미분)하여 추가하고 원본 엔티티는 삭제함
            </summary>
            <param name="entity"></param>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityRotate(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},System.Single,System.Single,System.Single)">
            <summary>
            선택된 엔티티들을 cx, cy 를 중심으로 회전한다
            </summary>
            <param name="list"></param>
            <param name="angle"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityCut(System.Collections.Generic.List{SpiralLab.Sirius.IEntity})">
            <summary>
            지정된 엔티티들을 Cut 하는 명령 (삭제후 클립보드로 복사됨)
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityCopy(System.Collections.Generic.List{SpiralLab.Sirius.IEntity})">
            <summary>
            지정된 엔티티들을 Copy 하는 명령(삭제되지 않고 클립보드로 복사됨)
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityPaste(SpiralLab.Sirius.Layer,System.Single,System.Single)">
            <summary>
            클립보드에 있는 엔티티 를 복제하여 붙여넣기 함 (신규 엔티티가 생성됨)
            </summary>
            <param name="layer"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.ActEntityPropertyChanged(System.Collections.Generic.List{SpiralLab.Sirius.IEntity},System.String,System.Object,System.Object)">
            <summary>
            지정된 엔티티의 속성을 변경하는 명령
            </summary>
            <param name="list"></param>
            <param name="propName"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.HitTest(System.Windows.Forms.Keys,System.Single,System.Single,System.Single)">
            <summary>
            마우스 클릭등의 한점을 지정하여 엔티티 선택 명령 (Undo/Redo 스택에 처리 않됨)
            </summary>
            <param name="keys"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Action.HitTest(System.Windows.Forms.Keys,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            마우스를 이용해 사각 영역(Rubber Band)을 지정하여 엔티티 선택 명령 (Undo/Redo 스택에 처리 않됨)
            </summary>
            <param name="keys"></param>
            <param name="downX"></param>
            <param name="downY"></param>
            <param name="currentX"></param>
            <param name="currentY"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AciColor">
            <summary>
            색상 객체
            </summary>
            <summary>
            Represents an ACI color (AutoCAD Color Index) that also supports true color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.DarkGray">
            <summary>
            Defines a default dark gray color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.LightGray">
            <summary>
            Defines a default light gray color.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.IndexRgb">
            <summary>
            A dictionary that contains the indexed colors, the key represents the color index and the value the RGB components of the color.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.#ctor">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class with black/white color index 7.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            By default the UseTrueColor will be set to false.<br />
            Accepted color index values range from 1 to 255.<br />
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.IsByLayer">
            <summary>
            Defines if the color is defined by layer.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.IsByBlock">
            <summary>
            Defines if the color is defined by block.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.R">
            <summary>
            Gets the red component of the AciColor.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.G">
            <summary>
            Gets the green component of the AciColor.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.B">
            <summary>
            Gets the blue component of the AciColor.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 1 to 255.
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.FromHsl(System.Numerics.Vector3)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:SpiralLab.Sirius.AciColor">AciColor</see>.
            </summary>
            <param name="hsl">A Vector3 containing the hue, saturation, and lightness components.</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:SpiralLab.Sirius.AciColor">AciColor</see>.
            </summary>
            <param name="hue">Hue (input values range from 0 to 1).</param>
            <param name="saturation">Saturation percentage (input values range from 0 to 1).</param>
            <param name="lightness">Lightness percentage (input values range from 0 to 1).</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.ToColor">
            <summary>
            Converts the AciColor to a <see cref="T:System.Drawing.Color">color</see>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents the actual AciColor.</returns>
            <remarks>A default color white will be used for ByLayer and ByBlock colors.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.FromColor(System.Drawing.Color)">
            <summary>
            Converts a <see cref="T:System.Drawing.Color">color</see> to an <see cref="T:System.Drawing.Color">AciColor</see>.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.ToTrueColor(SpiralLab.Sirius.AciColor)">
            <summary>
            Gets the 24-bit color value from an AciColor.
            </summary>
            <param name="color">A <see cref="T:SpiralLab.Sirius.AciColor">color</see>.</param>
            <returns>A 24-bit color value (BGR order).</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.FromTrueColor(System.Int32)">
            <summary>
            Gets the <see cref="T:SpiralLab.Sirius.AciColor">color</see> from a 24-bit color value.
            </summary>
            <param name="value">A 24-bit color value (BGR order).</param>
            <returns>A <see cref="T:SpiralLab.Sirius.AciColor">color</see>.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.FromCadIndex(System.Int16)">
            <summary>
            Gets the <see cref="T:SpiralLab.Sirius.AciColor">color</see> from an index.
            </summary>
            <param name="index">A CAD indexed AciColor index.</param>
            <returns>A <see cref="T:SpiralLab.Sirius.AciColor">color</see>.</returns>
            <remarks>
            Accepted index values range from 0 to 256. An index 0 represents a ByBlock color and an index 256 is a ByLayer color;
            any other value will return one of the 255 indexed AciColors.
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.Clone">
            <summary>
            Creates a new color that is a copy of the current instance.
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.Equals(SpiralLab.Sirius.AciColor)">
            <summary>
            Check if the components of two colors are equal.
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.AciColor.RgbToAci(System.Byte,System.Byte,System.Byte)">
            <summary>
            Obtains the approximate color index from the RGB components.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <returns>The approximate color index from the RGB components</returns>
            <remarks>This conversion will never be accurate.</remarks>
        </member>
        <member name="T:SpiralLab.Sirius.RtcCorrection3D">
            <summary>
            scanner correction for 3D 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcCorrection3D.DataUpper">
            절대위치, 측정 위치 
        </member>
        <member name="P:SpiralLab.Sirius.RtcCorrection3D.ResultMessage">
            절대위치, 측정 위치 
        </member>
        <member name="T:SpiralLab.Sirius.Block">
            <summary>
            block
            container for entity(like as group)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Blocks">
            <summary>
            block container
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Blocks.Owner">
            <summary>
            부모 문서
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Blocks.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Blocks.#ctor(SpiralLab.Sirius.IDocument)">
            <summary>
            생성자
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Blocks.NameOf(System.String)">
            <summary>
            이름으로 블럭 검색
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Blocks.Clone">
            <summary>
            블럭들을 모두 복제
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IDocument">
            <summary>
            Document 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Version">
            <summary>
            문서 버전 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Name">
            <summary>
            Doc's Name 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Description">
            <summary>
            Doc's Description 설명
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.FileName">
            <summary>
            current working filename
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Action">
            <summary>
            사용자 명령및 이벤트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Dimension">
            <summary>
            문서의 중심 위치및 가로, 세로 크기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.RotateOffset">
            <summary>
            레이저 가공시 회전 중심 위치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Fiducials">
            <summary>
            문서 전체 영역의 비전 기준 마크들의 위치(fiducial marks)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Views">
            <summary>
            문서(Doc) 에 연결된 뷰 목록 (다중 뷰 연결용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Blocks">
            <summary>
            container for block
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Layers">
            <summary>
            container for layer
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDocument.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DocumentDefault">
            <summary>
            Document 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DocumentDefault.Blocks">
            <summary>
            container for blocks
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DocumentDefault.Layers">
            <summary>
            container for layers
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DocumentSerializer">
            <summary>
            Doc 객체 저장/복원용
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DocumentSerializer.OpenSirius(System.String)">
            <summary>
            sirius 파일 열기
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DocumentSerializer.OpenDxf(System.String)">
            <summary>
            dxf 파일 열기
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DocumentSerializer.Save(SpiralLab.Sirius.IDocument,System.String)">
            <summary>
            sirius 파일로 저장
            </summary>
            <param name="doc"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeCode128">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeCode128.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeCode128.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeCode39">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeCode39.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeCode39.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeDataMatrix">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeDataMatrix.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeDataMatrix.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeEAN13">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeEAN13.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeEAN13.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeEAN8">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeEAN8.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeEAN8.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeQRCode">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeQRCode.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeQRCode.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeUPCE">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeUPCE.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeUPCE.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.BarcodeUPCA">
            <summary>
            barcode entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeUPCA.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BarcodeUPCA.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Fiducial">
            <summary>
            document align fiducial mark
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Fiducial.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="T:SpiralLab.Sirius.BlockInsert">
            <summary>
            block insert entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BlockInsert.Angle">
            <summary>
            offset 의 angle 사용된
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BlockInsert.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="T:SpiralLab.Sirius.GroupMOTF">
            <summary>
            GroupMOTF 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.GroupMOTF.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.GroupMOTF.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Points">
            <summary>
            points entity (container)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Points.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Points.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.HPGL">
            <summary>
            group entity (container)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.HPGL.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.HPGL.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Layer">
            <summary>
            레이어 객체 (엔티티의 리스트 컨테이너로 동작)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Layer.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Layer.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Layers">
            <summary>
            레이어의 집합 객체 (레이어의 리스트 컨테이너로 동작)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Layers.Items">
            <summary>
            레이어들의 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Layers.Active">
            <summary>
            activated layer
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Layers.Owner">
            <summary>
            부모 문서
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Layers.BoundRect">
            <summary>
            레이어 내의 최대 외곽 영역
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Layers.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Layers.#ctor(SpiralLab.Sirius.IDocument)">
            <summary>
            생성자
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:SpiralLab.Sirius.Layers.NameOf(System.String)">
            <summary>
            이름으로 레이어 검색
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Layers.Clone">
            <summary>
            레이어들을 모두 복제
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IUndoRedo">
            <summary>
             Undo  / Redo 용 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IUndoRedo.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IUndoRedo.Execute">
            <summary>
            redo 실행
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IUndoRedo.Undo">
            <summary>
            undo 실행
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IUndoRedo.Redo">
            <summary>
            redo 실행
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.UndoRedoSingle">
            <summary>
             Undo  / Redo 용 싱글(단일) 명령용
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.UndoRedoMultiple">
            <summary>
             Undo  / Redo 용 멀티(다중) 명령용 = UndoRedoSingle * N
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SiriusText">
            <summary>
            sirius text entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusText.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="T:SpiralLab.Sirius.Pen">
            <summary>
            pen (laser parameter)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Pen.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Pen.Equals(SpiralLab.Sirius.Pen)">
            <summary>
            동일성 검사
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Pen.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Trepan">
            <summary>
            circle entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Trepan.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Trepan.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.CapitalHeight">
            <summary>
            대문자 높이
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.XHeight">
            <summary>
            소문자 높이
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.Ascender">
            <summary>
            https://medium.com/edinbed/calarts-funds-of-graphic-design-w2-2-2-words-and-spacing-b0ce031a3c77
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.Descender">
            <summary>
            https://medium.com/edinbed/calarts-funds-of-graphic-design-w2-2-2-words-and-spacing-b0ce031a3c77
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.Author">
            <summary>
            폰트 파일에 지정된 저자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.Name">
            <summary>
            폰트파일에 지정된 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.Encoding">
            <summary>
            폰트 파일에 지정된 엔코딩 포맷
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.LetterSpacing">
            <summary>
            폰트 파일에 지정된 글자간 간격
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.WordSpacing">
            <summary>
            폰트 파일에 지정된 단어간 간격 (like as space bar)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.LineSpacing">
            <summary>
            폰트 파일에 지정된 줄간 간격 (new line space)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CxfHelper.BBox">
            <summary>
            Bound Box
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.FontCollectionHelper">
            <summary>
            폰트 모음을 관리하는 정적 객체
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IAInput`1">
            <summary>
            아날로그 입력 인터페이스  (각 채널은 16접점으로 구성)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAInput`1.Name">
            <summary>
            아나로그 입력 이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IAInput`1.Initialize(System.UInt32@)">
            <summary>
            초기화
            </summary>
            <param name="detectedChCount">확인된 채널 개수</param>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.IAOutput`1">
            <summary>
            아날로그 출력 인터페이스  (각 채널은 16접점으로 구성)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAOutput`1.Name">
            <summary>
            아나로그 출력 이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IAOutput`1.Initialize(System.UInt32@)">
            <summary>
            초기화
            </summary>
            <param name="detectedChCount">확인된 채널 개수</param>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.IDInput`1">
            <summary>
            디지털 입력 추상 클래스 (각 채널은 16접점으로 구성)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput`1.Name">
            <summary>
            입력 이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.Initialize(System.UInt32@)">
            <summary>
            초기화
            </summary>
            <param name="detectedChCount">확인된 채널 개수</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.AOff(`0)">
            <summary>
            A 접점 입력 꺼짐 여부
            </summary>
            <param name="dInNo">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.AOn(`0)">
            <summary>
            A 접점 입력 켜짐 여부
            </summary>
            <param name="dInNo">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.BOff(`0)">
            <summary>
            B 접점 입력 꺼짐 여부
            </summary>
            <param name="dInNo">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.BOn(`0)">
            <summary>
            B 접점 입력 켜짐 여부
            </summary>
            <param name="dInNo">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.Update">
            <summary>
            입력 채널의 모든접점 상태 업데이트
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.GetCh(System.UInt32)">
            <summary>
            채널 정보(16비트) 얻기
            </summary>
            <param name="chNo">채널 번호</param>
            <returns>16비트 값(DIOBitHelper 로 비트 조작가능)</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput`1.GetChCnt">
            <summary>
            채널 개수 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IDOutput`1">
            <summary>
            디지털 출력 추상 클래스 (각 채널은 16접점으로 구성)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput`1.Name">
            <summary>
            출력 이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.Initialize(System.UInt32@)">
            <summary>
            초기화
            </summary>
            <param name="detectedChCount">확인된 채널 개수</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.OutOn(`0)">
            <summary>
            해당 접점의 출력 켜짐
            </summary>
            <param name="dOutNo">번호</param>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.OutOff(`0)">
            <summary>
            해당 접점의 출력 꺼짐
            </summary>
            <param name="dOutNo">번호</param>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.IsOutOn(`0)">
            <summary>
            해당 접점으로 출력이 나가는지 여부 얻기
            </summary>
            <param name="dOutNo">번호</param>
            <returns>출력 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.SetCh(System.UInt32,System.UInt16)">
            <summary>
            지정된 채널의 16접점 상태를 변경
            </summary>
            <param name="chNo">채널</param>
            <param name="value">16접점상태</param>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.GetCh(System.UInt32)">
            <summary>
            채널 16비트 정보 얻기
            </summary>
            <param name="chNo">채널번호</param>
            <returns>16비트 값(DIOBitHelper 로 비트 조작가능)</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.GetChCnt">
            <summary>
            채널 개수 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.Update(System.Int32)">
            <summary>
            지정된 출력 채널의 상태 업데이트 (-1 : 모든 채널)
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput`1.UpdateBit(`0)">
            <summary>
            지정된 출력 접점의 상태만 업데이트 
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.DInputAjinEXT`1">
            <summary>
            아진 엑스텍 
            디지털 입력
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DOutputAjinEXT`1">
            <summary>
            아진 엑스텍 
            디지털 출력
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AInputAjinExt`1">
            <summary>
            아진 엑스텍
            아나로그 입력
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AOutputAjinExt`1">
            <summary>
            아진엑스텍
            아나로그 출력
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IMotion">
            <summary>
            motion interface for axes control
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotion.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMotion.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IMotion.IsReady">
            <summary>
            준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotion.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotion.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotion.Form">
            <summary>
            모션 UI용 윈폼
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotionXYZ.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotionXYZ.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.MotionXYZ.IsReady">
            <summary>
            준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotionXYZ.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotionXYZ.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotionXYZ.Position">
            <summary>
            X,Y,Z 모터 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotionXYZ.Form">
            <summary>
            모션 UI용 윈폼
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.add_camera_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.aperture_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.aperture_30px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.available_updates_filled_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.barcode_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.bottom">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.box_important_64px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.center">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.circuit_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.construction_worker_30px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.customer_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.data_matrix_code_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.detective_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.elderly_person_filled_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.error_64px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.exercise_filled_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.explode">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.fire_element_48px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.fire_extinguisher_48px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.flash_off_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.flash_on_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.font_size_16px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.hand_move">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_about_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_aperture_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_chevron_down_32">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_chevron_left_32">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_chevron_right_32">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_chevron_up">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_chevron_up_32">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_chevron_up_321">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_circle_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_circled_dot_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_circled_left_2_filled_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_coordinate_system_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_copy_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_cutting_coupon_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_define_location_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_delete_file_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_file_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_fountain_pen_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_generic_text_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_halfcircle">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_import_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_information_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_laser_beam_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_layers_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_line_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_marker_pen_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_opened_folder_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_paper_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_paste_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_pencil_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_polyline_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_rectangle_stroked_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_rectangle_stroked_161">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_save_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_save_as_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_settings_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_small_lens_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_spring_in_motion_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_timer_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_under_construction_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_under_construction_161">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_zoom_in_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_zoom_out_filled_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.icons8_zoom_to_extents_filled_16">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.import_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.Journey_32px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.journey_80px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.laser_beam_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.left">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.lightning_bolt_16px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.lightning_bolt_26px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.live_photos_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.paste_array">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.point">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.points">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.polyline_16px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.polyline_80px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.private_48px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.private_48px1">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.qr_code_26px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.redo">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.reset_16px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.reset_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.right">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.rotate_left">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.rotate_right">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.running_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.running_24px1">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.sleeping_in_bed_50px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.small_lens_32px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.sort_down_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.sort_up_24px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.spiral">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.start_48px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.stop_16px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.stop_16px1">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.stop_48px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.table_26px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.thick_arrow_pointing_down_26px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.thick_arrow_pointing_up_26px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.top">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.trepan">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.wheel_30px">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc3D">
            <summary>
            RTC + 3D option (varioscan or excelliSHIFT)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.ZOffset">
            <summary>
            z offset (for z-shift, varioscan)
            unit : mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.ZDefocus">
            <summary>
            z defocus (for z-shift, varioscan)
            unit : mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.KZFactor">
            <summary>
            bits/mm for z-axis 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlZOffset(System.Single)">
            <summary>
            assign z offset length value (for z-shift, varioscan)
            unit : mm
            </summary>
            <param name="zOffset">focus shift to eh offset position (with stretched 3d-correction)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlZDefocus(System.Single)">
            <summary>
            assign z decodus length value (for z-shift, varioscan)
            unit : mm
            </summary>
            <param name="zDefocus">diameter changed (no stretched 3d-correction)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListZOffset(System.Single)">
            <summary>
            z offset value (for z-shift / varioscan)
            unit : mm
            (positive value is upward)
            </summary>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListZDefocus(System.Single)">
            <summary>
            z defocus value (for z-shift / varioscan)
            unit : mm
            (positive value is upward)
            </summary>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListJump3D(System.Numerics.Vector3,System.Single)">
            <summary>
            jump to assigned x,y,z position
            </summary>
            <param name="vPosition"></param>
            <param name="rampingFactor"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListMark3D(System.Numerics.Vector3,System.Single)">
            <summary>
            mark to assigned x, y, z position
            </summary>
            <param name="vPosition"></param>
            <param name="rampingFactor"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListArc3D(System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            arc by center position with sweep angle (started from current jumped or marked position)
            </summary>
            <param name="vCenter"></param>
            <param name="sweepAngle"></param>
            <param name="rampingFactor"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcDualHead">
            <summary>
            Dual head interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.PrimaryHeadOffset">
            <summary>
            primary head offset
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.SecondaryHeadOffset">
            <summary>
            secondary head offset
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcDualHead.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,SpiralLab.Sirius.Offset)">
            <summary>
            head offset for control command 
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">x,y,angle</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcDualHead.ListHeadOffset(SpiralLab.Sirius.ScannerHead,SpiralLab.Sirius.Offset)">
            <summary>
            head offset for list command 
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">x,y,angle</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcExternalControlMode">
            <summary>
            RTC 외부 트리거 모드 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.RtcEncoder">
            <summary>
            Enc0 = X
            Enc1 = Y
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.EncoderWaitCondition">
            <summary>
            Wait until encoder position matched centain user-assigned condition
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Under">
            <summary>
            입력 엔코더 값이 지정된 값보다 작아질 때까지 대기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Auto">
            <summary>
            자동 = 호출될 당시의 입력 엔코더 위치와 지정된 위치를 자동으로 판별한다. 호출될 당시보다 지정된 위치가 높을 경우 Over 될때까지 대기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Over">
            <summary>
            입력 엔코더 값이 지정된 값 보다 커질 때까지 대기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMOTF">
            <summary>
            MOTF interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncXCountsPerMm">
            <summary>
            encoder pulse counts / mm
                                  counts 
            EncXCountsPerMm =   -----------
                                    mm  
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncYCountsPerMm">
            <summary>
            encoder pulse counts / mm
                                  counts 
            EncYCountsPerMm =   -----------
                                    mm  
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlExternalControl(SpiralLab.Sirius.RtcExternalControlMode)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC 15핀 입력으로 /START, /STOP 등의 트리거 사용여부 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlEncoderReset(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            encoder reset with assigned offset posotion 
            초기화시 엔코더의 오프셋(초기값) 값을 설정 가능
            외부 엔코더 입력 대신 내부 엔코더를 사용해 가상 엔코더 활성화 가능
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치(mm)</param>
            <param name="encX_simulated_speed">RTC 내부 가상 엔코더 X 의 속도 (mm/s)</param>
            <param name="encY_simulated_speed">RTC 내부 가상 엔코더 Y 의 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            current encoder value 
            현재 엔코더 값 얻기
            </summary>
            <param name="encX">X 엔코더 값 (counts)</param>
            <param name="encY">Y 엔코더 값 (counts)</param>
            <param name="encX_mm">X 엔코더의 위치 (mm)</param>
            <param name="encY_mm">Y 엔코더의 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFBegin(System.Boolean)">
            <summary>
            MOTF 리스트 명령 시작
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </summary>
            <param name="encoderReset"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            wait list execution until specific encoder value matched user-assigned condition
            지정된 엔코더 단축(X 혹은 Y)의 위치가 특정 조건을 만족할때까지 리스트 명령 대기
            (단축 동기화 용)
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFWaits(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            wait list execution until both encoders value matched user-assigned condition
            두개의 엔코더가 (X, Y)가 특정 조건이 될때 까지 대기 (다축 동기화 용)
            </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFEnd(System.Numerics.Vector2)">
            <summary>
            MOTF 리스트 명령 끝
            종료시 스캐너를 지정된 위치로 점프 시킴
            </summary>
            <param name="vPosition">점프 위치</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorIndex">
            <summary>
            모터의 개별 인덱스 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Index">
            <summary>
            인덱스 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Name">
            <summary>
            인덱스 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.MinPos">
            <summary>
            위치 하한 제한
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Pos">
            <summary>
            위치 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.MaxPos">
            <summary>
            위치 상한 제한
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.MinVel">
            <summary>
            속도 하한 제한
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Vel">
            <summary>
            속도 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.MaxVel">
            <summary>
            속도 상한 제한
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Acc">
            <summary>
            가속도 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Decel">
            <summary>
            감속도 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorIndex.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorStatus">
            <summary>
            모터 상태 정보
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IView">
            <summary>
            뷰 인터페이스 (UI 측의 마우스및 윈도우의 이벤트 연결용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.Owner">
            <summary>
            부모 문서 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.Renderer">
            <summary>
            렌더러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.Width">
            <summary>
            clipping client 폭 (픽셀)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.Height">
            <summary>
            clipping client 높이 (픽셀)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.CameraX">
            <summary>
            렌더 중심 X 위치 (사용자 좌표계)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.CameraY">
            <summary>
            렌더 중심 Y 위치 (사용자 좌표계)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.ScaleWidth">
            <summary>
            폭 확대 비율 (확대 축소에 사용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.ScaleHeight">
            <summary>
            높이 확대 비율 (확대 축소에 사용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.SelectedBoundRect">
            <summary>
            선택된 개체(entities)들이 이루는 외곽 영역 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.LaserSpot">
            <summary>
            붉은색 레이저 출사 모양을 렌더링 하기 위한 좌표값 (0,0 일 경우는 렌더링 하지 않음)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IView.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IView.Render">
            <summary>
            화면 다시 그리기 - 재 렌더링 명령
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnDraw">
            <summary>
            다시 그리기 이벤트
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnInitialized(System.Object,System.EventArgs)">
            <summary>
            초기화 이벤트
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnResized(System.Object,System.EventArgs)">
            <summary>
            클라이언트 창 크기 변경 이벤트
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            마우스 다운 이벤트
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            마우스 업 이벤트
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            마우스 이동 이벤트
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            마우스 휠 이벤트
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnZoomIn(System.Drawing.Point)">
            <summary>
            특정 위치를 중심으로 줌 인 이벤트
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnZoomOut(System.Drawing.Point)">
            <summary>
            특정 위치를 중심으로 줌 아웃 이벤트
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnZoomFit(SpiralLab.Sirius.BoundRect)">
            <summary>
            지정된 영역이 클라이언트 렌더 영역을 가득(약 95%) 채우도록 줌 FIT
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnPan(System.Boolean)">
            <summary>
            마우스 조작이 어려운 환경에서, 마우스 왼쪽 버튼만으로 카메라 위치를 이동하기 위한 기능 on/off
            </summary>
            <param name="onOff"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.OnCameraMove(System.Single,System.Single)">
            <summary>
            클라이언트 영역 중심을 사용자가 원하는 중심으로 재 설정 (자동으로 새로 그려짐)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.Dp2Lp(System.Drawing.Point,System.Single@,System.Single@)">
            <summary>
            물리 좌표계(픽셀) 값을 사용자 좌표계로 변환
            pixel -> mm
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IView.Lp2Dp(System.Single,System.Single,System.Drawing.Point@)">
            <summary>
            사용자 좌표를 물리 좌표로 변환
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="p"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IView.Dp2Lp(System.Int32)">
            <summary>
            해당 물리 좌표값(픽셀) 크기를 사용자 좌표 크기로 변환
            pixel -> mm
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IView.Lp2Dp(System.Single)">
            <summary>
            사용자 좌표 크기만큼을 물리 좌표 크기로 변환
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.ViewDefault.mouseCurrentLocation">
            <summary>
            마우스 위치 정보
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ViewDefault.Dp2Lp(System.Drawing.Point,System.Single@,System.Single@)">
            <summary>
            물리 좌표 -> 사용자 좌표계를 변환
            pixel -> mm
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ViewDefault.Dp2Lp(System.Int32)">
            <summary>
            해당 픽셀크기 값을 사용자 좌표(mm)로 변환
            pixel -> mm
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ViewDefault.Lp2Dp(System.Single)">
            <summary>
            사용자 단위 좌표 -> pixel
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ViewDefault.PrepareStartList">
            <summary>
            외부에서 리스트 버퍼 사용시
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Arc">
            <summary>
            arc entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Arc.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="T:SpiralLab.Sirius.BoundRect">
            <summary>
            외곽 영역을 처리하기 위한 사각형 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Empty">
            <summary>
            크기 데이타를 모두 삭제
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.IsEmpty">
            <summary>
            지정된 데이타가 있는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Left">
            <summary>
            왼쪽 X 좌표값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Right">
            <summary>
            오른쪽 X 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Top">
            <summary>
            상단 Y 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Bottom">
            <summary>
            하단 Y 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Width">
            <summary>
            폭
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Height">
            <summary>
            높이
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.BoundRect.Center">
            <summary>
            중심 X,Y 위치
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.ToString">
            <summary>
            문자열
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Equals(SpiralLab.Sirius.BoundRect)">
            <summary>
            동일성 검사
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Clear">
            <summary>
            내부 데이타 리셋
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.LocationByAlign(SpiralLab.Sirius.Alignment)">
            <summary>
            정렬에 따른 위치 재 계산
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Union(SpiralLab.Sirius.BoundRect)">
            <summary>
            전달된 boundrect 와의 영역 합집합
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Union(System.Single,System.Single)">
            <summary>
            전달된 점 위치와 영역 합집합
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Union(System.Numerics.Vector2)">
            <summary>
            전달된 벡터 위치와 영역 합집합
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Draw(SharpGL.OpenGL)">
            <summary>
            화면에 그리기
            </summary>
            <param name="gl"></param>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.Transit(System.Numerics.Vector2)">
            <summary>
            지정된 양 만큼 이동
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.HitTest(System.Single,System.Single,System.Single)">
            <summary>
            지정된 좌표가 포함되는지 여부 (충돌)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.HitTest(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            지정된 사각 영역이 포함되는지 여부 (충돌)
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.BoundRect.HitTest(SpiralLab.Sirius.BoundRect,System.Single)">
            <summary>
            지정된 boundrect 영역이 포함되는지 여부(충돌)
            </summary>
            <param name="br"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Circle">
            <summary>
            circle entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Circle.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Circle.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Config">
            <summary>
            라이브러리 내부 환경 변수들
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IEntity">
            <summary>
            interface for Entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.Owner">
            <summary>
            부모 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.Name">
            <summary>
            엔티티 이름
            entity name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.Description">
            <summary>
            엔티티 설명
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.BoundRect">
            <summary>
            객체의 외각 사각형 영역
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.IsSelected">
            <summary>
            엔티티 선택 여부
            entity is selected or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.IsLocked">
            <summary>
            편집 가능 여부
            locked or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.Node">
            <summary>
            트리뷰 노드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.Index">
            <summary>
            트리뷰 노드 인덱스 번호 = list 에서의 인덱스 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IEntity.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IExplodable">
            <summary>
            Explodable 인터페이스
            세분화된 하위 엔티티로 분해
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IExplodable.Explode">
            <summary>
            분해
            </summary>
            <returns>엔티티의 리스트</returns>
        </member>
        <member name="T:SpiralLab.Sirius.GroupRepeatMode">
            <summary>
            그룹내 반복가공 기법 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.GroupRepeatMode.OffsetFirst">
            <summary>
            오프셋 우선
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.GroupRepeatMode.EntityFirst">
            <summary>
            엔티티 우선
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Group">
            <summary>
            group entity (container)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Group.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Group.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.InsertVertex">
            <summary>
            insert vertex (그룹 객체의 의 offset 처리용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InsertVertex.Transit">
            <summary>
            이동량
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InsertVertex.Scale">
            <summary>
            크기 변화량
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InsertVertex.Angle">
            <summary>
            회전량 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InsertVertex.ToMatrix">
            <summary>
            3x3 행렬 계산값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InsertVertex.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="angle"></param>
        </member>
        <member name="M:SpiralLab.Sirius.InsertVertex.ToString">
            <summary>
            문자열
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.InsertVertex.Zero">
            <summary>
            0 값으로 생성
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InsertVertex.DoTransit(SpiralLab.Sirius.InsertVertex,System.Numerics.Vector2)">
            <summary>
            이동
            </summary>
            <param name="vertex"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InsertVertex.Rotate(SpiralLab.Sirius.InsertVertex,System.Single,System.Numerics.Vector2)">
            <summary>
            지정된 회전 중심에서 회전 
            </summary>
            <param name="vertex"></param>
            <param name="angle"></param>
            <param name="rotateCenter"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Line">
            <summary>
            line entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Line.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Line.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Line.LineVectorAngle">
            <summary>
            선분 벡터의 각도 (degree : 0~360)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Point">
            <summary>
            point entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Point.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Point.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.LwPolyline">
            <summary>
            LW polyline (polyline vertex container)
            임시 객체로 라인 + 호 조합의 Group 으로 최종 변환됨
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LwPolyline.explodedList">
            <summary>
            regen 시 polylinevertex 를 explode 하여 저장하는 방식
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyline.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyline.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rectangle">
            <summary>
            circle entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rectangle.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rectangle.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Spiral">
            <summary>
            spiral entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Spiral.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Spiral.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Alignment">
            <summary>
            정렬 기준
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.LeftTop">
            <summary>
            좌상단
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.MiddleTop">
            <summary>
            중앙 상단
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.RightTop">
            <summary>
            우상단
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.LeftMiddle">
            <summary>
            좌중간
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.Center">
            <summary>
            중앙
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.RightMiddle">
            <summary>
            우중간
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.LeftBottom">
            <summary>
            좌하단
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.MiddleBottom">
            <summary>
            중앙 하단
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Alignment.RightBottom">
            <summary>
            우하단
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IDrawable">
            <summary>
            화면에 출력(렌더)이 가능한 개체(Entity)에 대한 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDrawable.IsHighlighted">
            <summary>
            마우스 over 등에 의한 시각 효과 / 현재 미구현
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDrawable.IsDrawPath">
            <summary>
            가공 경로를 나타내는 사각정보 표시여부 (엔티티 선택시 보여짐)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDrawable.IsVisible">
            <summary>
            화면에 표시 여부
            visible or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDrawable.Color">
            <summary>
            엔티티 색상
            entity ACI(Autocad Color Index) color
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDrawable.Angle">
            <summary>
            회전량
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Regen">
            <summary>
            데이타 변경시 내부 벡터및 외각(boundrect)영역 재 계산
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Draw(SpiralLab.Sirius.IView)">
            <summary>
            엔티티 렌더링 (by OpenGL)
            </summary>
            <param name="render"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Transit(System.Numerics.Vector2)">
            <summary>
            엔티티 이동
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Rotate(System.Single)">
            <summary>
            자신의 기준점을 중심으로 회전
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Rotate(System.Single,System.Numerics.Vector2)">
            <summary>
            지점된 회전 중심을 기준으로 회전
            </summary>
            <param name="angle"></param>
            <param name="rotateCenter"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Scale(System.Numerics.Vector2)">
            <summary>
            원점을 중심으로 크기 변환
            (내부적으로 사용되므로, 외부사용자는 호출 금지)
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.Scale(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            지정된 위치를 중심으로 크기변환
            </summary>
            <param name="scale"></param>
            <param name="scaleCenter"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.HitTest(System.Single,System.Single,System.Single)">
            <summary>
            엔티티 선택 (마우스 클릭)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.HitTest(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            엔티티 선택 (마우스 드래그)
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDrawable.HitTest(SpiralLab.Sirius.BoundRect,System.Single)">
            <summary>
            엔티티 선택 (마우스 드래그)
            </summary>
            <param name="rect"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Text">
            <summary>
            text entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Text.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Text.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Timer">
            <summary>
            timer entity (레이저 가공 지연용 타이머)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Timer.Clone">
            <summary>
            복사본 생성
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Timer.Equals(SpiralLab.Sirius.Timer)">
            <summary>
            동일성 검사
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Timer.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            laser processing
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.ArrayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ArrayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ArrayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DimensionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DimensionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.DimensionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionXYZForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotionXYZForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotionXYZForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PointsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PointsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.PointsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.OffsetsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.OffsetsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.OffsetsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.FiducialForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.FiducialForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.FiducialForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LwPolyLineVertexForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertexForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.LwPolyLineVertexForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.InsertVertexForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InsertVertexForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.InsertVertexForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PasteForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PasteForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.PasteForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6Form.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Form.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Form.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5Form.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5Form.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5Form.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SPIG4Form.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4Form.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4Form.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PowerXFactor">
            <summary>
            레이저 파워 제어 요소
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.Analog1">
            <summary>
            RTC 확장 아나로그1 포트
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.Analog2">
            <summary>
            RTC 확장 아나로그2 포트
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.ExtDO8Bit">
            <summary>
            RTC 확장 8비트 디지털 출력 포트
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.PulseWidth">
            <summary>
            RTC 15핀의 LASER1,2 신호 출력 (펄스폭 변조)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.Frequency">
            <summary>
            RTC15핀의 LASER 1,2, 신호 출력 (주파수 변조)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.ExtDO16">
            <summary>
            RTC 확장 16비트 디지털 출력 포트
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerXFactor.ByUser">
            FocusShift, //+- mm (vario-scan stroke length)
            <summary>
            사용자가 직접 제어 (외부 통신 등)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ILaser">
            <summary>
            laser source interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Index">
            <summary>
            식별자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.MaxPowerWatt">
            <summary>
            최대 출력 에너지 (Watt)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.CurrentPowerWatt">
            <summary>
            명령된 출력 에너지 (Watt)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.PowerXFactor">
            <summary>
            파워 변경을 위한 제어 방식
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.MaxPowerX">
            최대 출력을 위한 파워 X 값 요소
            X 값 요소 : 아나로그, 8,16비트 디지털 출력, 펄스폭, 주파수, 포커스 위치등의 가변인자(X) 가 가능하다
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.CurrentPowerX">
            <summary>
            현재 출력을 위한 파워 X 값
            X 값 요소 : 아나로그, 8,16비트 디지털 출력, 펄스폭, 주파수, 포커스 위치등의 가변인자(X) 가 가능하다
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsReady">
            <summary>
            준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsBusy">
            <summary>
            출사중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.CurrentPen">
            <summary>
            현재 설정된 펜 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Form">
            <summary>
            도킹, 출력등에 사용이 가능한 자체 윈폼을 얻기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.Initialize">
            <summary>
            통신 초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.CtlPower(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.Pen)">
            <summary>
            파워 변경 (즉시 명령)
            </summary>
            <param name="rtc"></param>
            <param name="watt"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.ListPower(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.Pen)">
            <summary>
            파워 변경 (리스트 명령) 
            마커의 내부 쓰레드에 의해 호출됨
            </summary>
            <param name="rtc"></param>
            <param name="watt"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.LaserVirtual">
            <summary>
            레이저 가상 소스
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SPIG4">
            <summary>
            SPI - G3/G3 fiber laser source
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MarkerProgressEventHandler">
            <summary>
            가공량 통지용 콜백
            </summary>
            <param name="sender"></param>
            <param name="progress"></param>
        </member>
        <member name="T:SpiralLab.Sirius.MarkerFinishedEventHandler">
            <summary>
            가공완료 콜백
            </summary>
            <param name="sender"></param>
            <param name="span"></param>
        </member>
        <member name="T:SpiralLab.Sirius.IMarker">
            <summary>
            marker interface
            레이저, 스캐너 등의 하드웨어를 이용해 전달된 가공 데이타(Document) 기반으로 실제 출사를 위해 내부에 쓰레드를 생성하여
            다양한 오프셋 위치에 레이저 가공을 수행하는 마커(Marker) 인터페이스
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IMarker.OnProgress">
            <summary>
            진행률 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IMarker.OnFinished">
            <summary>
            완료 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.IsReady">
            <summary>
            가공 준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.IsBusy">
            <summary>
            가공 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.IsError">
            <summary>
            에러 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.IsFinished">
            <summary>
            가공 완료 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.ElaspedTime">
            <summary>
            가공에 걸린 시간 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Rtc">
            <summary>
            벡터 가공 장치 (스캐너 등)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Laser">
            <summary>
            레이저 소스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Motion">
            <summary>
            모션 조그용 제어기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Offsets">
            <summary>
            오프셋 정보 리스트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.ScannerRotateAngle">
            <summary>
            스캐너가 회전되어 장착되어 있는 경우
            지정된 각도만큼 내부에서 회전 처리된다 (오프셋 역시 처리됨)
            사용자가 정면에서 보았을때 직교좌표계가 될수있도록 회전각도를 설정한다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Form">
            <summary>
            자신이 가지고 있는 마커용 윈폼 접근
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarker.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMarker.Ready(SpiralLab.Sirius.IDocument,SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser,SpiralLab.Sirius.IMotion)">
            <summary>
            마커는 내부 쓰레드에 의해 가공 데이타를 처리하게 되는데, 이때 가공 데이타(IDocument)에 
            크로스 쓰레드 상태가 될수있으므로, 준비(Prepare)시에는 가공 데이타를 모두 복제(Clone) 하여 가공시
            데이타에 대한 쓰레드 안전 접근을 처리하게 된다. 또한 가공중 뷰에 의해 원본 데이타가 조작, 수정되더라도 
            준비(Ready) 즉 신규 데이타를 다운로드하지 않으면 아무런 영향이 없게 된다.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMarker.Start(System.Object)">
            <summary>
            가공 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMarker.Stop">
            <summary>
            가공 강제 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMarker.Reset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IMarkerable">
            <summary>
            Markerable 인터페이스
            레이저 가공이 가능한 엔티티들이 상속을 받아 구현이 필요한 인터페이스
            </summary>    
        </member>
        <member name="P:SpiralLab.Sirius.IMarkerable.IsMarkerable">
            <summary>
            레이저 가공 유무
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMarkerable.IsReverseMark">
            <summary>
            역 방향 가공 유무 (Group 만 현재 UI 에서 접근 가능?)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMarkerable.Mark(SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser)">
            <summary>
            지정된 RTC , LASER를 이용한 엔티티 가공
            </summary>
            <param name="rtc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MarkerDefault">
            <summary>
            기본 마커 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MarkerDefault.Ready(SpiralLab.Sirius.IDocument,SpiralLab.Sirius.IRtc,SpiralLab.Sirius.ILaser,SpiralLab.Sirius.IMotion)">
            <summary>
            마커는 내부 쓰레드에 의해 가공 데이타를 처리하게 되는데, 이때 가공 데이타(IDocument)에 
            크로스 쓰레드 상태가 될수있으므로, 준비(Prepare)시에는 가공 데이타를 모두 복제(Clone) 하여 가공시
            데이타에 대한 쓰레드 안전 접근을 처리하게 된다. 또한 가공중 뷰에 의해 원본 데이타가 조작, 수정되더라도 
            준비(Ready) 즉 신규 데이타를 다운로드하지 않으면 아무런 영향이 없게 된다.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotionType">
            <summary>
            모션 방식
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.ScannerOnly">
            <summary>
            스캐너 단독
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.StageOnly">
            <summary>
            스태이지 단독 (Route)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.StageAndScanner">
            <summary>
            스캐너 + 스테이지 (MOTF/Marking On the flying)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.LaserMode">
            <summary>
            LASER1, LASER2 output pulse timing methods
            rf. Scanlab's Manual Doc
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScannerHead">
            <summary>
            Scan Head 식별자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionTableIndex">
            <summary>
            RTC 카드 내에는 4개의 스캐너 보정 테이블을 저장 가능
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ExtensionChannel">
            <summary>
            RTC 카드의 확장 IO 신호 종류
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.RtcStatus">
            <summary>
            RTC 상태 확인용
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc">
            <summary>
            RTC interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Index">
            <summary>
            used for multiple RTC cards (start from 0, 1, 2,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Name">
            <summary>
            user-assigned name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Form">
            <summary>
            Winform for each RTC instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.KFactor">
            <summary>
            k factor = bits / mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.CorrectionFiles">
            <summary>
            Correction File list for tables (index start from : 1~4, 0 : not used)
            index = CorrectionTableIndex 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.PrimaryHeadTable">
            <summary>
            correction table index for primary head 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.SecondaryHeadTable">
            <summary>
            correction table index for secondary head 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.MatrixStack">
            <summary>
             3x3 matrix stack with push/pop
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsMOTF">
            <summary>
            option for MOTF(Marking on the fly) support
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Is2ndHead">
            <summary>
            option for Dual Head support
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Is3D">
            <summary>
            option for 3D(VarioScan, Z-Shift) support
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsScanAhead">
            <summary>
            option for ScanAhead (for syncAxis) support
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsUFPM">
            <summary>
            option for Ultra Fast Pulse Modulation support
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsSyncAxis">
            <summary>
            option for syncAxis (XL-SCAN)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            initializing rtc card
            </summary>
            <param name="bitPerMm">k factor = bits/mm</param>
            <param name="laserMode">Co2, YAG1,2,3,...</param>
            <param name="ctbFileName">.ct5 filename</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            load .ct5 correction file into RTC internal memory(tables)
            </summary>
            <param name="tableIndex">table 1,2,3,4 </param>
            <param name="ctbFileName">.ct5 filename</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            select table(pre-loaded correction table) on Scan Head A or B
            </summary>
            <param name="primaryHeadTableIndex">Head A (Primary)</param>
            <param name="secondaryHeadTableIndex">Head B (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserControl(SpiralLab.Sirius.PowerXFactor,System.Single)">
            <summary>
            레이저 파워를 지정한 출력으로 변경
            </summary>
            <param name="powerXFactor"></param>
            <param name="powerXValue">(RTC의 아나로그, 주파수, 펄스폭, 디지털 출력값 등</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserOn">
            <summary>
            laser pulse on by manually (you should pre-assigned freq/pulse width by CtlFrequency)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserOff">
            <summary>
            laser pulse off by manually
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlMove(System.Numerics.Vector2)">
            <summary>
            move the scanner position by manually
            </summary>
            <param name="position">X,Y position (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlFrequency(System.Single,System.Single)">
            <summary>
            default laser pulse repetition rate and pulse width
            </summary>
            <param name="frequencyHz">repetition rate (Hz)</param>
            <param name="pulseWidthUsec">pulse width (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            default scanner and laser delay
            </summary>
            <param name="laserOnUSec">laser on delay (usec)</param>
            <param name="laserOffUSec">laser off delay (usec)</param>
            <param name="scannerJumpUSec">scanner jump delay (usec)</param>
            <param name="scannerMarkUSec">scanner mark delay (usec)</param>
            <param name="scannerPolygonUSec">scanner polygon delay (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlSpeed(System.Single,System.Single)">
            <summary>
            default scanner speed
            </summary>
            <param name="jumpMmPerSec">speed of jump (mm/s)</param>
            <param name="markMmPerSec">speed of mark and arc (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            rtc internal status (like as. busy, power ok, ...)
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlBusyWait">
            <summary>
            wait until finished list commands
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlAbort">
            <summary>
            abort working list commands immediately
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlReset">
            <summary>
            reset abort status
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0)">
            <summary>
            확장 포트에 데이타쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (int), 아나로그(float)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.MotionType)">
            <summary>
            prepare internal list buffers
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0)">
            <summary>
            데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트, 아나로그(10V)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListFrequency(System.Single,System.Single)">
            <summary>
            insert list command
            </summary>
            <param name="frequencyHz">Hz</param>
            <param name="pulseWidthUSec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            insert list command
            </summary>
            <param name="laserOnUSec">usec</param>
            <param name="laserOffUSec">usec</param>
            <param name="scannerJumpUSec">usec</param>
            <param name="scannerMarkUSec">usec</param>
            <param name="scannerPolygonUSec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListSpeed(System.Single,System.Single)">
            <summary>
            insert list command
            </summary>
            <param name="jumpMmPerSec">mm/s</param>
            <param name="markMmPerSec">mm/s</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWait(System.Single)">
            <summary>
            insert list command
            do nothing during assigned time
            </summary>
            <param name="msec">msec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOn(System.Single)">
            <summary>
            insert list command
            laser pulses on during assiged time
            </summary>
            <param name="msec">msec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOn">
            <summary>
            insert list command
            (laser pulsed on until called ListLaserOff)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOff">
            <summary>
            insert list command
            laser off if called ListLaserOn
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserControl(System.Single)">
            <summary>
            레이저 파워를 RTC를 통해 직접 가변 제어할 경우 사용됨
            아나로그 전압값, 디지털 출력값, 주파수, 펄스폭 등 중에 하나
            </summary>
            <param name="powerXValue">X 요소값의 종류는 PowerXFactor 열거형 에서 나열됨</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListSkyWriting(System.Single,System.Single,System.Single)">
            <summary>
            레이저 가감속 구간의 모션 지연을 예방하기 위한 sky-writing 모드 사용
            </summary>
            <param name="laserOnShift_usec">usec</param>
            <param name="timeLag_usec">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (예: 90도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListPixelLine(System.Single,SpiralLab.Sirius.ExtensionChannel,System.Numerics.Vector2,System.UInt32)">
            <summary>
            Pixel Raster Operation
            Call ListJump before start pixel line
            </summary>
            <param name="usec">duration time</param>
            <param name="ext">analog 1 or 2 (if you wnat to vary the analog output voltage)</param>
            <param name="vDelta">pixel distance (mm)</param>
            <param name="pixelCount">pixel counts per line</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListPixel(System.Single,System.Single)">
            <summary>
            Output single pixel output during assigned time
            </summary>
            <param name="usec">duration time ( lower than usec in ListPixelLine ) </param>
            <param name="voltage">0~10V (if you wnat to vary the analog output voltage per pixel) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWobbel(System.Single,System.Single,System.Single)">
            <summary>
            Wobbel operation
            </summary>
            <param name="amplitudeX">size of W (parallel movement) (mm)</param>
            <param name="amplitudeY">size of Y (perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (속도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            insert list command
            jump scanner position
            </summary>
            <param name="position">mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            insert list command
            mark(draw line) scanner position
            </summary>
            <param name="position">mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            insert list command
            arc(draw arc)
            start position = current position
            center position = assigned
            sweep angle = + : CCW , - : CW
            </summary>
            <param name="center">center position of arc</param>
            <param name="sweepAngle">degree  (+ : CCW, - : CW)(</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListEnd">
            <summary>
            end of list buffer
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListExecute(System.Boolean)">
            <summary>
            execute inserted list commands if remains
            </summary>
            <param name="busyWait">wait until whole list commands finished</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6Ethernet">
            <summary>
            RTC6 이더넷 버전
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.#ctor(System.UInt32,System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="ipAddress">IP 주소</param>
            <param name="subNetMask">서브넷 마스크</param>
            <param name="outputFileName">명령을 기록할 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC6Ethernet 카드 통신 초기화 
            </summary>
            <param name="kFactor"></param>
            <param name="laserMode"></param>
            <param name="ctbFileName"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcJumpTo">
            <summary>
            Jump delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcMarkTo">
            <summary>
            Mark delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcVirtual">
            <summary>
            rtc virtual class (used for mark path simulation)
            
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MathHelper">
            <summary>
            Utility math functions and constants.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.DegToRad">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.RadToDeg">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MathHelper.Epsilon">
            <summary>
            Represents the smallest number used for comparison purposes.
            </summary>
            <remarks>
            The epsilon value must be a positive number greater than zero.
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.Sign(System.Single)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="number">Double precision number.
            </param>
            <returns>
            A number that indicates the sign of value.
            Return value Meaning -1 value is less than zero.
            0 value is equal to zero.
            1 value is greater than zero.
            </returns>
            <remarks>This method will test for values of numbers very close to zero.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.Sign(System.Single,System.Single)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="number">Double precision number.
            <param name="threshold">Tolerance.</param>
            </param>
            <returns>
            A number that indicates the sign of value.
            Return value Meaning -1 value is less than zero.
            0 value is equal to zero.
            1 value is greater than zero.
            </returns>
            <remarks>This method will test for values of numbers very close to zero.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsOne(System.Single)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsOne(System.Single,System.Single)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsZero(System.Single)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsZero(System.Single,System.Single)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsEqual(System.Single,System.Single)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsEqual(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.NormalizeAngle(System.Single)">
            <summary>
            Normalizes the value of an angle in degrees between [0, 360[.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>The equivalent angle in the range [0, 360[.</returns>
            <remarks>Negative angles will be converted to its positive equivalent.</remarks>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectPointInCircle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            점이 원안에 포함되는지 여부
            </summary>
            <param name="px"></param>
            <param name="py"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectPointInRect(SpiralLab.Sirius.BoundRect,System.Double,System.Double,System.Double)">
            <summary>
            점이 사각형 영역 내에 포함되어 있는지 여부
            </summary>
            <param name="br"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectPointInLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            점이 직선과 교차(충돌) 혹은 근접하는지 여부
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="px"></param>
            <param name="py"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectLineInCircle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            직선이 원과 교차(충돌) 혹은 근접하는지 여부
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectLineInLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            직선과 직선이 교차(충돌) 하는지 여부
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectLineInLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            직선과 직선이 교차(충돌) 하는지 여부 (교차점 구하기)
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
            <param name="collisionX"></param>
            <param name="collisionY"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectLineInRect(SpiralLab.Sirius.BoundRect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            직선이 사각형 영역 내에 있던가, 혹은 모서리의 일부가 교차(포함)하는지 여부
            </summary>
            <param name="br"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IntersectRectInRect(SpiralLab.Sirius.BoundRect,SpiralLab.Sirius.BoundRect,System.Double)">
            <summary>
            두 사각형이 일부라도 교차(교집합) 혹은 포함되는지 여부
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.CollisionRectWithRect(SpiralLab.Sirius.BoundRect,SpiralLab.Sirius.BoundRect)">
            <summary>
            두 사각형이 일부라도 교차(교집합) 여부 (포함은 제외?)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MatrixStack">
            <summary>
            3x3 matrix with stack 
            스택에 push/pop 및 스택내의 모든 행렬을 연산하는등의 유틸리티 클래스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MatrixStack.ToResult">
            <summary>
            calculate all matrices in stack
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor(System.Numerics.Matrix3x2)">
            <summary>
            constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor(SpiralLab.Sirius.MatrixStack)">
            <summary>
            constructor
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Clone">
            <summary>
            복제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Clear">
            <summary>
            모두 삭제하고 단위행렬상태로 초기화
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.LoadIdentity">
            <summary>
            reset to 3x3 identity matrix
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double)">
            <summary>
            push angle
            </summary>
            <param name="angle">degree</param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double,System.Double)">
            <summary>
            push translate by dx, dy
            </summary>
            <param name="dx">mm</param>
            <param name="dy">mm</param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double,System.Double,System.Double)">
            <summary>
            push rotate and translate
            </summary>
            <param name="dx">mm</param>
            <param name="dy">mm</param>
            <param name="angle">degree</param>
        </member>
        <member name="T:SpiralLab.Sirius.ObservableList`1">
            <summary>
            리스트 제네릭 컨테이너 + 추가 삭제에 대한 이벤트 통지 기능
            thread unsafe 컨테이너
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="T:SpiralLab.Sirius.ObservableList`1.BeforeAddItemEventHandler">
            <summary>
            아이템 추가전 이벤트 핸들러 델리게이트
            </summary>
            <param name="sender"></param>
            <param name="index"></param>
            <param name="e"></param>
        </member>
        <member name="T:SpiralLab.Sirius.ObservableList`1.AddItemEventHandler">
            <summary>
            아이템 추가 후 이벤트 핸들러 델리게이트
            </summary>
            <param name="sender"></param>
            <param name="index"></param>
            <param name="e"></param>
        </member>
        <member name="T:SpiralLab.Sirius.ObservableList`1.BeforeRemoveItemEventHandler">
            <summary>
            아이템 삭제전 이벤트 핸들러 델리게이트
            </summary>
            <param name="sender"></param>
            <param name="index"></param>
            <param name="e"></param>
        </member>
        <member name="T:SpiralLab.Sirius.ObservableList`1.RemoveItemEventHandler">
            <summary>
            아이템 삭제후 이벤트 핸들러 델리게이트
            </summary>
            <param name="sender"></param>
            <param name="index"></param>
            <param name="e"></param>
        </member>
        <member name="E:SpiralLab.Sirius.ObservableList`1.OnBeforeAddItem">
            <summary>
            추가전 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ObservableList`1.OnAddItem">
            <summary>
            추가후 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ObservableList`1.OnBeforeRemoveItem">
            <summary>
            삭제전 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ObservableList`1.OnRemoveItem">
            <summary>
            삭제후 이벤트 핸들러
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.#ctor">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c>.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:SpiralLab.Sirius.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:SpiralLab.Sirius.ObservableList`1.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ObservableList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire list.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparision">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Sort">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the default comparer.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Add(`0)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="item"> The object to add to the collection.</param>
            <returns>True if the object has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds an object list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can not be null.</param>
            <returns>True if the object has been inserted to the collection; otherwise, false.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the object to remove.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Clear">
            <summary>
            Removes all object from the collection.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether an object is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:SpiralLab.Sirius.ObservableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:SpiralLab.Sirius.FloatTypeConverter">
            <summary>
            부동소수점 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Vector2Converter">
            <summary>
            Numerics.Vector2 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DimensionEditor">
            <summary>
            Doc's Dimension 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AciColorEditor">
            <summary>
            ACI Color 객체 색상 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.InsertVertexEditor">
            <summary>
            InsertVertex 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.OffsetsEditor">
            <summary>
            offsets 배열 변환기 (group)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PointsEditor">
            <summary>
            points 배열 변환기 (points)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.FiducialEditor">
            <summary>
            Fiducial 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.FontStringConverter">
            <summary>
            ttf 폰트 디렉토리 목록 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SiriusFontStringConverter">
            <summary>
            cxf 폰트 디렉토리 목록 변환기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MarkerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MarkerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.MarkerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PropertyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PropertyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.PropertyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SiriusEditorForm">
            <summary>
            가공 데이타 (Document)를 화면에 출력및 사용자의 이벤트에 의해 데이타를 변경하는 등의 에디터및 뷰어 기능을 수행
            .NET Framework 의 WinForm 을 기반으로 하고 있으며, 사용자 정의 컨트롤로 제공되어진다.
            이 dll 은 사용자 정의 컨트롤로 제작되어 있으므로 이을 사용하기 위해서는 Visual Studio 의 도구상자에 등록한다.
            등록 방법 : 도구상자 -> 마우스 오른쪽 버튼 -> 항목선택 -> .NET FRAMEWORK 구성요소 -> 찾아보기 -> 해당 .dll 파일 선택 -> SiriusEditorForm 이 등록됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.AliasName">
            <summary>
            상태바에 출력되는 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Progress">
            <summary>
            상태바에 출력되는 진행상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.FileName">
            <summary>
            상태바에 출력되는 작업 파일이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.View">
            <summary>
            뷰 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Document">
            <summary>
            문서 컨테이너 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Rtc">
            <summary>
            RTC 제어 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Correction2D">
            <summary>
            스캐너 (2D) 보정 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Correction3D">
            <summary>
            스캐너 (3D) 보정 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Laser">
            <summary>
            레이저 소스 제어 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Motion">
            <summary>
            모션 제어 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusEditorForm.Marker">
            <summary>
            마커 제어 객체
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusEditorForm.Action_OnSelectedEntityChanged(SpiralLab.Sirius.IDocument,System.Collections.Generic.List{SpiralLab.Sirius.IEntity})">
            <summary>
            마우스 선택, 트리뷰 선택 등의 이벤트 발생시 내부 action 에 의해 콜백됨
            </summary>
            <param name="doc"></param>
            <param name="list"></param>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusEditorForm.trvEntity_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            트리뷰에서 엔티티 선택시
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:SpiralLab.Sirius.SiriusEditorForm.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusEditorForm.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusEditorForm.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SiriusViewerForm">
            <summary>
            가공 데이타 (Document)를 화면에 출력하는 뷰어 기능 (편집 불가)
            .NET Framework 의 WinForm 을 기반으로 하고 있으며, 사용자 정의 컨트롤로 제공되어진다.
            이 dll 은 사용자 정의 컨트롤로 제작되어 있으므로 이을 사용하기 위해서는 Visual Studio 의 도구상자에 등록한다.
            등록 방법 : 도구상자 -> 마우스 오른쪽 버튼 -> 항목선택 -> .NET FRAMEWORK 구성요소 -> 찾아보기 -> 해당 .dll 파일 선택 -> SiriusViewerForm 이 등록됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusViewerForm.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusViewerForm.AliasName">
            <summary>
            상태바에 출력되는 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusViewerForm.Progress">
            <summary>
            상태바에 출력되는 진행상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusViewerForm.FileName">
            <summary>
            상태바에 출력되는 작업 파일이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SiriusViewerForm.Document">
            <summary>
            문서 컨테이너 객체
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SiriusViewerForm.components">
            <summary> 
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusViewerForm.Dispose(System.Boolean)">
            <summary> 
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:SpiralLab.Sirius.SiriusViewerForm.InitializeComponent">
            <summary> 
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:RTC5Import.RTC5Wrap">
            <summary>
            Notice that the construction of the RTC5Import object or an initial
            call of any RTC5Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.init_rtc5_dll">
            <summary>
             uint init_rtc5_dll();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.free_rtc5_dll">
            <summary>
             void free_rtc5_dll();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rtc5_count_cards">
            <summary>
             uint rtc5_count_cards();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_x">
            <summary>
             void n_set_mcbsp_global_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_y">
            <summary>
             void n_set_mcbsp_global_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_rot">
            <summary>
             void n_set_mcbsp_global_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_matrix">
            <summary>
             void n_set_mcbsp_global_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_x">
            <summary>
             void set_mcbsp_global_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_y">
            <summary>
             void set_mcbsp_global_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_rot">
            <summary>
             void set_mcbsp_global_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_matrix">
            <summary>
             void set_mcbsp_global_matrix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_wobbel_power">
            <summary>
             uint n_load_wobbel_power(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_wobbel_power">
            <summary>
             uint load_wobbel_power(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_x_list">
            <summary>
             void n_set_mcbsp_global_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_y_list">
            <summary>
             void n_set_mcbsp_global_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_rot_list">
            <summary>
             void n_set_mcbsp_global_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_matrix_list">
            <summary>
             void n_set_mcbsp_global_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_x_list">
            <summary>
             void set_mcbsp_global_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_y_list">
            <summary>
             void set_mcbsp_global_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_rot_list">
            <summary>
             void set_mcbsp_global_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_matrix_list">
            <summary>
             void set_mcbsp_global_matrix_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_wobbel_power_list">
            <summary>
             void n_load_wobbel_power_list(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_power_angle">
            <summary>
             void n_set_wobbel_power_angle(uint CardNo, uint Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stretch_pixel_line">
            <summary>
             void n_stretch_pixel_line(uint CardNo, uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_wobbel_power_list">
            <summary>
             void load_wobbel_power_list(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_power_angle">
            <summary>
             void set_wobbel_power_angle(uint Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stretch_pixel_line">
            <summary>
             void stretch_pixel_line(uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel">
            <summary>
             void set_pixel(uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
        <member name="T:RTC6Import.RTC6Wrap">
            <summary>
            Notice that the construction of the RTC6Import object or an initial
            call of any RTC6Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.init_rtc6_dll">
            <summary>
             uint init_rtc6_dll();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.free_rtc6_dll">
            <summary>
             void free_rtc6_dll();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc6_mode">
            <summary>
             void set_rtc6_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_count_cards">
            <summary>
             uint eth_count_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_found_cards">
            <summary>
             uint eth_found_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_max_card">
            <summary>
             uint eth_max_card();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_remove_card">
            <summary>
             int eth_remove_card(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_card_info">
            <summary>
             void eth_get_card_info(uint CardNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_card_info_search">
            <summary>
             void eth_get_card_info_search(uint SearchNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_search_cards_timeout">
            <summary>
             void eth_set_search_cards_timeout(uint TimeOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_search_cards">
            <summary>
             uint eth_search_cards(uint Ip, uint NetMask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_search_cards_range">
            <summary>
             uint eth_search_cards_range(uint StartIp, uint EndIp);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_assign_card_ip">
            <summary>
             int eth_assign_card_ip(uint Ip, uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_assign_card">
            <summary>
             int eth_assign_card(uint SearchNo, uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_convert_string_to_ip">
            <summary>
             uint eth_convert_string_to_ip(string IpString);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_convert_ip_to_string">
            <summary>
             void eth_convert_ip_to_string(uint Ip, uint[] IpString);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_ip">
            <summary>
             uint eth_get_ip(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_ip_search">
            <summary>
             uint eth_get_ip_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_serial_search">
            <summary>
             uint eth_get_serial_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_last_error">
            <summary>
             uint n_eth_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_error">
            <summary>
             uint n_eth_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_error_dump">
            <summary>
             uint n_eth_error_dump(uint CardNo, uint[] Dump);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_static_ip">
            <summary>
             uint n_eth_set_static_ip(uint CardNo, uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_static_ip">
            <summary>
             uint n_eth_get_static_ip(uint CardNo, out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_port_numbers">
            <summary>
             uint n_eth_set_port_numbers(uint CardNo, uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_port_numbers">
            <summary>
             uint n_eth_get_port_numbers(uint CardNo, out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_com_timeouts">
            <summary>
             void n_eth_set_com_timeouts(uint CardNo, uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_com_timeouts">
            <summary>
             void n_eth_get_com_timeouts(uint CardNo, out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_check_connection">
            <summary>
             uint n_eth_check_connection(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_eth_boot_control">
            <summary>
             void n_set_eth_boot_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_boot_timeout">
            <summary>
             void n_eth_boot_timeout(uint CardNo, uint Timeout);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_boot_dcmd">
            <summary>
             void n_eth_boot_dcmd(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_program">
            <summary>
             uint n_store_program(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_last_error">
            <summary>
             uint eth_get_last_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_error">
            <summary>
             uint eth_get_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_error_dump">
            <summary>
             uint eth_error_dump(uint[] Dump);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_static_ip">
            <summary>
             uint eth_set_static_ip(uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_static_ip">
            <summary>
             uint eth_get_static_ip(out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_port_numbers">
            <summary>
             uint eth_set_port_numbers(uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_port_numbers">
            <summary>
             uint eth_get_port_numbers(out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_com_timeouts">
            <summary>
             void eth_set_com_timeouts(uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_com_timeouts">
            <summary>
             void eth_get_com_timeouts(out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_check_connection">
            <summary>
             uint eth_check_connection();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_eth_boot_control">
            <summary>
             void set_eth_boot_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_boot_timeout">
            <summary>
             void eth_boot_timeout(uint Timeout);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_boot_dcmd">
            <summary>
             void eth_boot_dcmd();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_program">
            <summary>
             uint store_program(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_create_dat_file">
            <summary>
             uint n_create_dat_file(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.create_dat_file">
            <summary>
             uint create_dat_file(int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rtc6_count_cards">
            <summary>
             uint rtc6_count_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_card_type">
            <summary>
             uint n_get_card_type(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_bios_version">
            <summary>
             uint n_get_bios_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_card_type">
            <summary>
             uint get_card_type();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_bios_version">
            <summary>
             uint get_bios_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_master_slave_config">
            <summary>
             void n_master_slave_config(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_oct_table_no">
            <summary>
             uint n_load_oct_table_no(uint CardNo, double A, double B, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table_no">
            <summary>
             uint n_load_z_table_no(uint CardNo, double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.master_slave_config">
            <summary>
             void master_slave_config(uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_oct_table_no">
            <summary>
             uint load_oct_table_no(double A, double B, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table_no">
            <summary>
             uint load_z_table_no(double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel_ctrl">
            <summary>
             uint n_list_jump_rel_ctrl(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel_ctrl">
            <summary>
             uint list_jump_rel_ctrl(int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_control_eth">
            <summary>
             void n_time_control_eth(uint CardNo, double PPM);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_control_eth">
            <summary>
             void time_control_eth(double PPM);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_power">
            <summary>
             void n_set_laser_power(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_spot_distance_ctrl">
            <summary>
             void n_spot_distance_ctrl(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_power">
            <summary>
             void set_laser_power(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.spot_distance_ctrl">
            <summary>
             void spot_distance_ctrl(double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_waveform_offset">
            <summary>
             void n_get_waveform_offset(uint CardNo, uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position_4">
            <summary>
             void n_home_position_4(uint CardNo, int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_home_position_4">
            <summary>
             void n_get_home_position_4(uint CardNo, out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_home_4_return_time">
            <summary>
             void n_set_home_4_return_time(uint CardNo, uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_home_4_return_time">
            <summary>
             uint n_get_home_4_return_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_uart_config">
            <summary>
             uint n_uart_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_multi_axis_config">
            <summary>
             void n_multi_axis_config(uint CardNo, uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_init">
            <summary>
             void n_quad_axis_init(uint CardNo, uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_get_status">
            <summary>
             uint n_quad_axis_get_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_get_values">
            <summary>
             void n_quad_axis_get_values(uint CardNo, out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_waveform_offset">
            <summary>
             void get_waveform_offset(uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position_4">
            <summary>
             void home_position_4(int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_home_position_4">
            <summary>
             void get_home_position_4(out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_home_4_return_time">
            <summary>
             void set_home_4_return_time(uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_home_4_return_time">
            <summary>
             uint get_home_4_return_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.uart_config">
            <summary>
             uint uart_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.multi_axis_config">
            <summary>
             void multi_axis_config(uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_init">
            <summary>
             void quad_axis_init(uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_get_status">
            <summary>
             uint quad_axis_get_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_get_values">
            <summary>
             void quad_axis_get_values(out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_timelag_compensation">
            <summary>
             void n_set_timelag_compensation(uint CardNo, uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_timelag_compensation">
            <summary>
             void set_timelag_compensation(uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_scanahead_params">
            <summary>
             uint n_get_scanahead_params(uint CardNo, uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_scanahead_autodelays">
            <summary>
             int n_activate_scanahead_autodelays(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_laser_shifts">
            <summary>
             void n_set_scanahead_laser_shifts(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params">
            <summary>
             void n_set_scanahead_line_params(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_ex">
            <summary>
             void n_set_scanahead_line_params_ex(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_params">
            <summary>
             uint n_set_scanahead_params(uint CardNo, uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_speed_control">
            <summary>
             void n_set_scanahead_speed_control(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_scanahead_params">
            <summary>
             uint get_scanahead_params(uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_scanahead_autodelays">
            <summary>
             int activate_scanahead_autodelays(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_laser_shifts">
            <summary>
             void set_scanahead_laser_shifts(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params">
            <summary>
             void set_scanahead_line_params(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_ex">
            <summary>
             void set_scanahead_line_params_ex(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_params">
            <summary>
             uint set_scanahead_params(uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_speed_control">
            <summary>
             void set_scanahead_speed_control(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_spot_distance">
            <summary>
             void n_spot_distance(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.spot_distance">
            <summary>
             void spot_distance(double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_in_range_mode">
            <summary>
             void n_wait_for_encoder_in_range_mode(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_prediction">
            <summary>
             void n_fly_prediction(uint CardNo, uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_in_range_mode">
            <summary>
             void wait_for_encoder_in_range_mode(int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_prediction">
            <summary>
             void fly_prediction(uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis_v_2">
            <summary>
             void n_micro_vector_quad_axis_v_2(uint CardNo, int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis_v">
            <summary>
             void n_micro_vector_quad_axis_v(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis">
            <summary>
             void n_micro_vector_quad_axis(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_set_position">
            <summary>
             void n_micro_vector_set_position(uint CardNo, int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_multi_axis_flags">
            <summary>
             void n_multi_axis_flags(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel">
            <summary>
             void set_pixel(uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis_v_2">
            <summary>
             void micro_vector_quad_axis_v_2(int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis_v">
            <summary>
             void micro_vector_quad_axis_v(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis">
            <summary>
             void micro_vector_quad_axis(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_set_position">
            <summary>
             void micro_vector_set_position(int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.multi_axis_flags">
            <summary>
             void multi_axis_flags(uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_scanahead_autodelays_list">
            <summary>
             void n_activate_scanahead_autodelays_list(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_laser_shifts_list">
            <summary>
             void n_set_scanahead_laser_shifts_list(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_list">
            <summary>
             void n_set_scanahead_line_params_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_ex_list">
            <summary>
             void n_set_scanahead_line_params_ex_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_scanahead_autodelays_list">
            <summary>
             void activate_scanahead_autodelays_list(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_laser_shifts_list">
            <summary>
             void set_scanahead_laser_shifts_list(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_list">
            <summary>
             void set_scanahead_line_params_list(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_ex_list">
            <summary>
             void set_scanahead_line_params_ex_list(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
    </members>
</doc>
