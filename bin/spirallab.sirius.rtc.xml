<?xml version="1.0"?>
<doc>
    <assembly>
        <name>spirallab.sirius.rtc</name>
    </assembly>
    <members>
        <member name="T:SpiralLab.Sirius.ICompensator`1">
            <summary>
            Compensator 인터페이스
            내부의 보간 테이블을 적용해 입력값을 가지고 새로운 출력값을 연산하는 연산기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICompensator`1.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICompensator`1.Index">
            <summary>
            식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICompensator`1.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICompensator`1.Interpolate(`0,`0@)">
            <summary>
            보간 연산하기
            </summary>
            <param name="input">입력값</param>
            <param name="output">보간된 출력값</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CompensatorDefault`1">
            <summary>
            Compensator 기본 버전 (1 to 1)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.Index">
            <summary>
            식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.FileName">
            <summary>
            파일 이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별자</param>
            <param name="name">이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.Interpolate(`0,`0@)">
            <summary>
            보간 연산하기
            </summary>
            <param name="input">입력값</param>
            <param name="output">보간된 출력값</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DRtc">
            <summary>
            스캐너 필드 보정 for 2D plane (Z=0)
            RTC4의 ctb 및 RTC5/6의 ct5 두가지 타입 모두 지원
            CorreXionPro 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction2DRtc.OnResult">
            <summary>
            변환 결과에 대한 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.RowInterval">
            <summary>
             행 간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.ColInterval">
            <summary>
            열 간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.KFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.IsAutoCenterOffset">
            <summary>
            보정 데이타중 스캐너 중심 위치에 0,0 이어야 하지만, 그렇지 않을경우 오프셋이 있는 중심위치값 만큼을 전체 데이타에서 빼기(오프셋)하여 보정을 하더라도 스캐너 중심이 변하지 않도록 해주는 기능
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.ResultMessage">
            <summary>
            변환 결과 로그 메시지
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.Data">
            <summary>
            절대 위치, 실측 데이타의 2차원 배열
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DRtc.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="rowInterval">행 간격 (mm)</param>
            <param name="colInterval">열 간격 (mm)</param>
            <param name="srcCtbOrCt5File">입력 보정 파일</param>
            <param name="targetCtbOrCt5File">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">절대좌표</param>
            <param name="measured">측정좌표</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력 
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">논리적인 좌표</param>
            <param name="error">에러량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.Convert">
            <summary>
            변환 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.AdlinkDInput">
            <summary>
            디지털 입력 인터페이스    
            Adlink 7230 류의 제품군
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AdlinkDOutput">
            <summary>
            디지털 출력 인터페이스    
            Adlink 7230 류의 제품군
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AjinExtekDInput">
            <summary>
            디지털 입력 인터페이스    
            아진엑스텍 D.Input 제품군
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsAOn``1(``0)">
            <summary>
            A On 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsAOn(System.UInt32)">
            <summary>
            A On 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsBOn``1(``0)">
            <summary>
            B On 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsBOn(System.UInt32)">
            <summary>
            B On 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.Update">
            <summary>
            입력 채널 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.GetModuleCnt">
            <summary>
            채널(모듈)의 개수 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AjinExtekDOutput">
            <summary>
            디지털 출력 인터페이스    
            아진엑스텍 D.Output 제품군
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOn``1(``0)">
            <summary>
            출력 켜기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOn(System.UInt32)">
            <summary>
            출력 켜기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOff``1(``0)">
            <summary>
            출력 끄기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOff(System.UInt32)">
            <summary>
            출력 끄기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOn``1(``0)">
            <summary>
            출력 켜짐 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOn(System.UInt32)">
            <summary>
            출력 켜짐 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOff``1(``0)">
            <summary>
            출력 꺼짐 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOff(System.UInt32)">
            <summary>
            출력 꺼짐 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.SetChannel(System.Int32,System.UInt16)">
            <summary>
            16비트 채널 설정
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.Update">
            <summary>
            출력 채널 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.ReverseUpdate">
            <summary>
            하드웨어적인 출력 상태를 역으로 읽어와 채널 메모리 값을 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.GetModuleCnt">
            <summary>
            출력 채널(모듈) 개수
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IDInputTrigger">
            <summary>
            디지털 입력 트리거 인터페이스
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDInputTrigger.IsTriggered(System.Boolean,System.Int64)">
            <summary>
            트리거 동작 여부
            </summary>
            <param name="inputStatus">접점 입력값</param>
            <param name="msec">hold time (msec)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerA">
            <summary>
            디지털 입력 A 접점 트리거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerA.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerA.IsTriggered(System.Boolean,System.Int64)">
            <summary>
            트리거 동작 여부
            </summary>
            <param name="inputStatus">접점 입력값 </param>
            <param name="msec">hold time (msec)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerB">
            <summary>
            디지털 입력 B 접점 트리거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerB.IsTriggered(System.Boolean,System.Int64)">
            <summary>
            트리거 동작 여부
            </summary>
            <param name="inputStatus">접점 입력값</param>
            <param name="msec">hold time (msec)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DInputVirtual">
            <summary>
            디지털 입력   
            가상 장치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsAOn``1(``0)">
            <summary>
            A On 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 대상</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsAOn(System.UInt32)">
            <summary>
            A On 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsBOn``1(``0)">
            <summary>
            B On 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 대상</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsBOn(System.UInt32)">
            <summary>
            B On 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            채널 16비트값 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Update">
            <summary>
            입력 채널들 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DOutputVirtual">
            <summary>
            디지털 출력     
            가상 장치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IDOutput">
            <summary>
            디지털 출력 인터페이스    
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOn``1(``0)">
            <summary>
            해당 접점 출력 On
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOn(System.UInt32)">
            <summary>
            해당 접점 출력 Off
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOff``1(``0)">
            <summary>
            해당 접점 출력 Off
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOff(System.UInt32)">
            <summary>
            해당 접점 출력 Off
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOn``1(``0)">
            <summary>
            해당 접점 출력 On 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOn(System.UInt32)">
            <summary>
            해당 접점 출력 On 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOff``1(``0)">
            <summary>
            해당 접점 출력 Off 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOff(System.UInt32)">
            <summary>
            해당 접점 출력 Off 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            해당 채널 16비트 상태 가져오기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.SetChannel(System.Int32,System.UInt16)">
            <summary>
            해당 채널 16비트 상태 강제 Override
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.Update">
            <summary>
            출력 채널들 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IDInput">
            <summary>
            디지털 입력 인터페이스    
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOn``1(``0)">
            <summary>
            해당 접점 입력 AOn 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOn(System.UInt32)">
            <summary>
            해당 접점 입력 AOn 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOff``1(``0)">
            <summary>
            해당 접점 입력 AOff 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOff(System.UInt32)">
            <summary>
            해당 접점 입력 AOff 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOn``1(``0)">
            <summary>
            해당 접점 입력 BOn 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOn(System.UInt32)">
            <summary>
            해당 접점 입력 BOn 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOff``1(``0)">
            <summary>
            해당 접점 입력 BOff 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOff(System.UInt32)">
            <summary>
            해당 접점 입력 BOff 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            해당 채널 16비트 상태 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.Update">
            <summary>
            입력 채널 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDInput">
            <summary>
            디지털 입력 인터페이스    
            RTC 제품의 확장(Extension) 16/16 포트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.#ctor(SpiralLab.Sirius.IRtc,System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.IsAOn``1(``0)">
            <summary>
            A On 상태
            </summary>
            <typeparam name="T">열거형 타입</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.IsAOn(System.UInt32)">
            <summary>
            A On 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.IsBOn``1(``0)">
            <summary>
            B On 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.IsBOn(System.UInt32)">
            <summary>
            B On 상태
            </summary>
            <param name="no"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널값 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput.Update">
            <summary>
            입력 채널들 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDOutputExt2">
            <summary>
            디지털 출력 인터페이스    
            RTC 제품의 확장(Extension2) 8 포트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.#ctor(SpiralLab.Sirius.IRtc,System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOn``1(``0)">
            <summary>
            출력 켜기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOn(System.UInt32)">
            <summary>
            출력 켜기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOff``1(``0)">
            <summary>
            출력 끄기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOff(System.UInt32)">
            <summary>
            출력 끄기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOn``1(``0)">
            <summary>
            출력 켜짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOn(System.UInt32)">
            <summary>
            출력 켜짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOff``1(``0)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOff(System.UInt32)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.SetChannel(System.Int32,System.UInt16)">
            <summary>
            16비트 채널 설정
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.Update">
            <summary>
            출력 채널 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDOutputExt1">
            <summary>
            디지털 출력 인터페이스    
            RTC 제품의 확장(Extension) 16/16 포트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.#ctor(SpiralLab.Sirius.IRtc,System.UInt32,System.String)">
            <summary>
            생서자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOn``1(``0)">
            <summary>
            출력 켜기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOn(System.UInt32)">
            <summary>
            출력 켜기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOff``1(``0)">
            <summary>
            출력 끄기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOff(System.UInt32)">
            <summary>
            출력 끄기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOn``1(``0)">
            <summary>
            출력 켜짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOn(System.UInt32)">
            <summary>
            출력 켜짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOff``1(``0)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOff(System.UInt32)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.SetChannel(System.Int32,System.UInt16)">
            <summary>
            16비트 채널 설정
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.Update">
            <summary>
            채널 출력 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.FiberVirtual">
            <summary>
            레이저 소스 (FiberVirtual)
            업체 : 오토닉스 전용. 확장2번 포트의 8비트를 이용한 파워제어, 확장 1 번 포트 핀맵 참고할것
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.FiberVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.PowerWatt">
            <summary>
            파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.PowerCompensator">
            <summary>
            파워 보정기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.RtcExt1">
            <summary>
            RTC 확장1 포트를 통해 레이저 파워 제어시 지정하여 사용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.RtcExt2">
            <summary>
            RTC 확장2 포트를 통해 레이저 파워 제어시 지정하여 사용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.FiberVirtual.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.FiberVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.FiberVirtual.#ctor(System.UInt32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.FiberVirtual.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.FiberVirtual.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.FiberVirtual.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.FiberVirtual.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPGYLPTypeE">
            <summary>
            레이저 소스 (IPG YLP Type E)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPGYLPTypeE.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PowerCompensator">
            <summary>
            파워 보정기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.RtcExt1">
            <summary>
            RTC 확장1 포트를 통해 레이저 제어시 (특정 고객 핀맵용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.RtcExt2">
            <summary>
            RTC 확장2 포트를 통해 레이저 파워 제어시 지정하여 사용 (특정 고객 핀맵용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Add(SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Remove(SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Contains(SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Status">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.PowerControlD0D7ByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.AuxOOffControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.GuideLaserControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.EmissionModulationControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Add(SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Remove(SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Contains(SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OpMode">
            <summary>
            OP 모드 (32비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Options.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.Add(SpiralLab.Sirius.IPGYLPTypeE.Options.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.Remove(SpiralLab.Sirius.IPGYLPTypeE.Options.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.Contains(SpiralLab.Sirius.IPGYLPTypeE.Options.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Options.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Option">
            <summary>
            옵션 (32비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Add(SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Remove(SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Contains(SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.ExtendedStatus">
            <summary>
            디바이스 확장 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Add(SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Remove(SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Contains(SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.ToUInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DigitalInterface">
            <summary>
             디지털 인터페이스 DB-25 핀의 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PulseRepRateMin">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PulseRepRateMax">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsTimedOut">
            <summary>
            현재 설정된 알람코드
            Status 속성을 통해 접근 !!!
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Device_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Device_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Digital_Interface_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is float in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Pulse_Duration">
            <summary>
            read nominal pulse duration of the laser [ns]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Pulse_Repetion_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two floats separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Head_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Main_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.HouseKeeping_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Pulse_Repetion_Rate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Power_Watt">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Power_Percentage">
            <summary>
            %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Pulse_Energy">
            <summary>
            mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Pulse_Repetion_Rate_Monitor">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Pulse_Repetion_Rate">
            <summary>
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Operating_Power">
            <summary>
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PhotonicsIndustryDX">
            <summary>
            레이저 소스 (Photonics Industry DX)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PhotonicsIndustryDX.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PowerCompensator">
            <summary>
            파워 보정기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsShutterOpen">
            <summary>
            Shutter 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsLDDEnable">
            <summary>
            LDD 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.SetCurrentAmp">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.MaxCurrentAmp">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.ActualCurrentAmp">
            <summary>
            실제 다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.DiodeVoltage">
            <summary>
            다이오드 전압 (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PulseRepRate">
            <summary>
            Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PECLevel">
            <summary>
            PEC Level (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.ActualTemperature">
            <summary>
            degree
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.LDDHours">
            <summary>
            LDD 사용 시간 (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PowerWatt">
            <summary>
            Power Monitoring (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsPRFSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsGateSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsPECSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsGuideOn">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.GuideOnPECLevel">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.JPTTypeE">
            <summary>
            레이저 소스 (JPT TypeE)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.JPTTypeE.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.PowerCompensator">
            <summary>
            파워 보정기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.RtcExt2">
            <summary>
            RTC 확장2 포트를 통해 레이저 파워 제어시 지정하여 사용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Simmer">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGUIPAEnable">
            <summary>
            Guide Laser온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGUIMOEnable">
            <summary>
            Guide Laser온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGuideOn">
            <summary>
            Guide Laser온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.Add(SpiralLab.Sirius.JPTTypeE.JPTStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.Remove(SpiralLab.Sirius.JPTTypeE.JPTStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.Contains(SpiralLab.Sirius.JPTTypeE.JPTStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Status">
            <summary>
            디바이스 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Add(SpiralLab.Sirius.JPTTypeE.JPTControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Remove(SpiralLab.Sirius.JPTTypeE.JPTControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Contains(SpiralLab.Sirius.JPTTypeE.JPTControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.ControlMode">
            <summary>
            Control Mode 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.ControlModeBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Add(SpiralLab.Sirius.JPTTypeE.JPTAlarm.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Remove(SpiralLab.Sirius.JPTTypeE.JPTAlarm.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Contains(SpiralLab.Sirius.JPTTypeE.JPTAlarm.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Alarm">
            <summary>
            디바이스 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.AlarmBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPGYLPTypeD">
            <summary>
            레이저 소스 (IPG YLP Type D)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPGYLPTypeD.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PowerCompensator">
            <summary>
            파워 보정기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.RtcExt1">
            <summary>
            RTC 확장1 포트를 통해 레이저 제어시 (특정 고객 핀맵용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.RtcExt2">
            <summary>
            RTC 확장2 포트를 통해 레이저 파워 제어시 지정하여 사용 (특정 고객 핀맵용)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Add(SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Remove(SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Contains(SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Status">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Add(SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Remove(SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Contains(SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.ExtendedStatus">
            <summary>
            디바이스 확장 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Add(SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Remove(SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Contains(SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.ToUInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DigitalInterface">
            <summary>
             디지털 인터페이스 DB-25 핀의 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PulseRepRateMin">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PulseRepRateMax">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsTimedOut">
            <summary>
            현재 설정된 알람코드
            Status 속성을 통해 접근 !!!
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Device_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Device_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Digital_Interface_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is float in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Pulse_Duration">
            <summary>
            read nominal pulse duration of the laser [ns]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Pulse_Repetion_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two floats separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Head_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Main_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.HouseKeeping_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Pulse_Repetion_Rate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Power_Watt">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Power_Percentage">
            <summary>
            %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Pulse_Energy">
            <summary>
            mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Pulse_Repetion_Rate_Monitor">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Pulse_Repetion_Rate">
            <summary>
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Operating_Power">
            <summary>
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AdvancedOptoWaveFotia">
            <summary>
            레이저 소스 (OptoWave Fotia)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.AdvancedOptoWaveFotia.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.PowerCompensator">
            <summary>
            파워 보정기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsDiodeOn">
            <summary>
            다이오드 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsQSwitchOn">
            <summary>
            Q스위치 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsShutterOpen">
            <summary>
            셔터 온오프
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.TriggerModes.Internal">
            <summary>
            내부 트리거
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.TriggerModes.External">
            <summary>
            외부 트리거
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.TriggerMode">
            <summary>
            트리거 모드 (External 로 해야 Rtc 로 제어 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.PulseRepRate">
            <summary>
            주파수 Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.PowerFactor">
            <summary>
            파워 비율값 
            0~100 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.DiodeCurrentAmp">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.DiodeActualCurrentAmp">
            <summary>
            실제 다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Diode1CurrentHightLimitAmp">
            <summary>
            다이오드1 커런트 상한값 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Diode2CurrentHightLimitAmp">
            <summary>
            다이오드2 커런트 상한값 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.LaserTime">
            <summary>
            레이저 사용 시간 (hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.FirmwareVersion">
            <summary>
            펌웨어 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.TargetCrystal1Temperature">
            <summary>
            크리스털1 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.TargetCrystal2Temperature">
            <summary>
            크리스털2 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualCrystal1Temperature">
            <summary>
            크리스털 1 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualCrystal2Temperature">
            <summary>
            크리스털 2 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualLaserHeadTemperature">
            <summary>
            레이저 헤드 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualDiodeTemperature">
            <summary>
            다이오드 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.EnvironmentalTemperature">
            <summary>
            환경 온도 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes">
            <summary>
            알람 코드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.Normal">
            <summary>
            알람 없는 상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.Diode1TemperatureHigh">
            <summary>
            higher 35
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.Diode1TemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.LaserHeadTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.LaserHeadTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.EnvironmentalTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.EnvironmentalTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.InterlockOpen">
            <summary>
            double check, lasting longer than 100ms
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCode">
            <summary>
            현재 알람코드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CoherentAviaLX">
            <summary>
            레이저 소스 (코히런트 AVIA LX)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.CoherentAviaLX.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PowerControlMethod">
            <summary>
            레이저 소스 파워 제어 방식 종류
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Unknown">
            <summary>
            모름
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Rs232">
            <summary>
            외부 통신
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.TcpIp">
            <summary>
            외부 통신 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Duty">
            <summary>
            펄스폭 비율을 통한 제어
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Analog">
            <summary>
            아나로그 전압을 이용한 제어
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.DigitalBits">
            <summary>
            디지털 비트 출력을 통한 제어
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Custom">
            <summary>
            사용자 정의
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IPowerControl">
            <summary>
            레이저 소스 IPowerControl 인터페이스 (파워 변경을 지원하는 레이저 소스)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerControl.PowerControlMethod">
            <summary>
            파워 변경 방식
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerControl.CtlPower(System.Single)">
            <summary>
            파워 변경 (즉시 명령)
            </summary>
            <param name="watt">출력 에너지(Watt)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerControl.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC제어기의 리스트 버퍼에 기록되어 실행되는 명령) 
            마커의 내부 쓰레드에 의해 호출됨
            </summary>
            <param name="watt">출력 에너지(Watt)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IGuideControl">
            <summary>
            레이저 소스 IGuide 인터페이스 (Guide 빔 출력을 지원하는 레이저 소스)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IGuideControl.IsGuideOn">
            <summary>
            가이드 빔(Guide) On/Off 상태 조회및 설정
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IShutterControl">
            <summary>
            레이저 소스 IShutter 인터페이스 (셔터 제어를 지원하는 레이저 소스)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IShutterControl.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태 조회및 설정
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ILaser">
            <summary>
            레이저 소스 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Index">
            <summary>
            식별번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.MaxPowerWatt">
            <summary>
            최대 출력 에너지 (Watt)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsReady">
            <summary>
            준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsBusy">
            <summary>
            출사중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부 (IPowerControl 인터페이스로 접근)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부 (IShutterControl 인터페이스로 접근)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부 (IGuideControl 인터페이스로 접근)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.Initialize">
            <summary>
            초기화 (통신 등)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.CtlAbort">
            <summary>
            출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.LaserVirtual">
            <summary>
            레이저 소스 (가상)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.LaserVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.#ctor(System.UInt32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CtlPower(System.Single)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.ListPower(System.Single)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsGuideOn">
            <summary>
            가이드 빔(Guide) On/Off 상태
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SPIG4">
            <summary>
            SPI - G3/G3 IR 파이버 레이저 소스 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.SPIG4.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SPIG4.SPIStatus">
            <summary>
            SPI 레이저 상태 정보
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.#ctor(System.UInt32,System.String,System.UInt32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
            <param name="comPort"></param>
            <param name="maxPowerWatt"></param>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.DegToRad">
            <summary>
            각도 -> 라디안 변환 상수
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.RadToDeg">
            <summary>
            라디안 -> 각도 변환 상수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsZero(System.Single,System.Single)">
            <summary>
            부동 소수점 동일성 비교
            </summary>
            <param name="number">부동소수점 값</param>
            <param name="threshold">마진값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsEqual(System.Single,System.Single)">
            <summary>
            부동 소수점 동일성 비교
            </summary>
            <param name="a">부동소수점 값</param>
            <param name="b">부동소수점 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsEqual(System.Single,System.Single,System.Single)">
            <summary>
            부동 소수점 동일성 비교
            </summary>
            <param name="a">부동소수점 값</param>
            <param name="b">부동소수점 값</param>
            <param name="threshold">마진값</param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.epsilon">
            <summary>
            마진값 상수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MathHelper.Epsilon">
            <summary>
            마진값 상수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
            해당 값이 범위 안에 있는지 여부
            </summary>
            <param name="a"></param>
            <param name="lower">하한값</param>
            <param name="upper">상한값</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MatrixStack">
            <summary>
            3x3 matrix with stack 
            스택에 push/pop 및 스택내의 모든 행렬을 연산하는등의 유틸리티 클래스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MatrixStack.ToResult">
            <summary>
            스택에 있는 모든 행렬 연산 결과 얻기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MatrixStack.Count">
            <summary>
            스택에 있는 행렬의 개수
            항상 1보다 큰값이 있다 (스택의 가장 밑바닥에는 단위행렬이 존재함)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor(SpiralLab.Sirius.MatrixStack)">
            <summary>
            복사 생성자
            </summary>
            <param name="matrixStack"></param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Clone">
            <summary>
            복제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Equals(SpiralLab.Sirius.MatrixStack)">
            <summary>
            동일성 비교 (deep compare)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Clear">
            <summary>
            모두 삭제하고 단위행렬상태로 초기화
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Numerics.Matrix3x2)">
            <summary>
            스택에 행렬 Push
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Pop(System.Numerics.Matrix3x2@)">
            <summary>
            스택에서 행렬 Pop
            </summary>
            <param name="matrix">반환된 행렬</param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Pop">
            <summary>
            스택에서 행렬 Pop
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double)">
            <summary>
            원점을 중심으로 회전
            </summary>
            <param name="angle">회전 (각도)</param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double,System.Double)">
            <summary>
            이동하기
            </summary>
            <param name="dx">이동량 X (mm)</param>
            <param name="dy">이동량 Y (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Numerics.Vector2)">
            <summary>
            이동하기
            </summary>
            <param name="translate">이동량 X,Y (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double,System.Double,System.Double)">
            <summary>
            회전후 이동
            </summary>
            <param name="dx">이동량 dX (mm)</param>
            <param name="dy">이동량 dY (mm)</param>
            <param name="angle">회전 (각도)</param>
        </member>
        <member name="T:SpiralLab.Sirius.IPoweMap">
            <summary>
            IPoweMap 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPoweMap.Index">
            <summary>
            식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPoweMap.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPoweMap.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterVirtual">
            <summary>
            PowerMeterVirtual 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.OnMeasured">
            <summary>
            파워 측정 이벤트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Index">
            <summary>
            파워메터 식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Period">
            <summary>
            샘플링 주기 시간(msec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Initialize">
            <summary>
            장치및 통신 초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Start">
            <summary>
            데이타 수집 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Stop">
            <summary>
            데이타 수집 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Clear">
            <summary>
            데이타 모두 삭제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Size">
            <summary>
            수집된 데이타 개수
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeasured">
            <summary>
            스캐너 필드 보정에 대한 결과 이벤트 통지용 델리게이트
            </summary>
            <param name="sender">IPowerMeter 인터페이스</param>
            <param name="watt">측정값 (Watt)</param>
        </member>
        <member name="T:SpiralLab.Sirius.IPowerMeter">
            <summary>
            PowerMeter 인터페이스
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMeter.OnMeasured">
            <summary>
            파워 측정 이벤트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Index">
            <summary>
            파워메터 식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.Initialize">
            <summary>
            장치및 통신 초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.Start">
            <summary>
            데이타 수집 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.Stop">
            <summary>
            데이타 수집 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.Clear">
            <summary>
            데이타 모두 삭제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.Size">
            <summary>
            수집된 데이타 개수
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IMotor">
             <summary>
             모터 인터페이스
             스캐너 Z or 회전축 을 제어하기 위한 모터 인터페이스 
            
             * 인터페이스는 추후 변경예정 !!!
             
             </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IMotor.MotorHomed">
            <summary>
            원점 탐색(홈 초기화) 완료시 이벤트 통지용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.CommandPosition">
            <summary>
            명령 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsServoAlarm">
            <summary>
            서보 알람 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsServoOn">
            <summary>
            서보 온오프 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsCwSenOn">
            <summary>
            Cw 리미트 센서 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsCCwSenOn">
            <summary>
            CCw 리미트 센서 
             </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsOrgSenOn">
            <summary>
            Origin(Home) 센서 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.MaxSpeed">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.Initialize">
            <summary>
            모터 축 생성후 내부 초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlServo(System.Boolean)">
            <summary>
            서보 온오프
            </summary>
            <param name="onOff">온오프</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치 이동
            </summary>
            <param name="position">위치값 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            </summary>
            <param name="distance">거리값 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorAjinExtek">
            <summary>
            Motor AjinExtek AXL
            추후 변경예정 !
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorAjinExtek.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.CommandPosition">
            <summary>
            위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.ActualVelocity">
            <summary>
            속도 (mm/sec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsServoAlarm">
            <summary>
            서보 알람 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsHomeSearching">
            <summary>
            원점 검색중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsServoOn">
            <summary>
            서보 온오프 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsCwSenOn">
            <summary>
            CW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsCCwSenOn">
            <summary>
            CCW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsOrgSenOn">
            <summary>
            ORG 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.PulsePerMm">
            <summary>
            모터 스케일 설정 : Pulses/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.MaxSpeed">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.ConvertMmToPulse(System.Single)">
            <summary>
            mm -> pulse
            </summary>
            <param name="mm"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.ConvertPulseToMm(System.Single)">
            <summary>
            pulse -> mm
            </summary>
            <param name="pulse"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.#ctor(System.Int32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
            <param name="pulsePerMm">펄스와 사용자 단위(mm)간 비율값</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.Initialize">
            <summary>
            초기화 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlServo(System.Boolean)">
            <summary>
            서보 온오프
            </summary>
            <param name="onOff"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치로 이동
            </summary>
            <param name="position">위치 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            </summary>
            <param name="distance">거리값(mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.LoadParameterFile(System.String)">
            <summary>
            설정파일 로드
            전체 축의 서보 오프상태 확인 후 사용
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.GetAxisCnt">
            <summary>
            연결된 모터 수량 확인
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorVirtual">
            <summary>
            Motor Virtual
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.CommandPosition">
            <summary>
            위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsServoOn">
            <summary>
            서보 온 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsCwSenOn">
            <summary>
            CW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsCCwSenOn">
            <summary>
            CCW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsOrgSenOn">
            <summary>
            ORG 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.MaxSpeed">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.Initialize">
            <summary>
            초기화 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치로 이동
            </summary>
            <param name="position">위치 (units)</param>
            <param name="vel">속도(units/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            </summary>
            <param name="distance">거리값(units)</param>
            <param name="vel">속도(units/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (units/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc4ExternalControlMode">
            <summary>
            RTC4 외부 트리거 모드 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4ExternalControlMode.Bit.ExternalStart">
            <summary>
            /START 핀 사용
            = 1 The external start input is enabled. The externals tart signal corresponds to the command execute_list_1 or execute_list_1. The external stop signal corresponds to the command stop_execution.
            = 0 no external start signal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4ExternalControlMode.Bit.ExternalStartDelayOff">
            <summary>
            = 1 The external start delay (encoder delay) is turned off.
            = 0 No effect
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            = 1 The external start input is not disabled by an external stop request
            = 0 The external start input is disabled by an external stop request
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4ExternalControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.Add(SpiralLab.Sirius.Rtc4ExternalControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.Remove(SpiralLab.Sirius.Rtc4ExternalControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.Contains(SpiralLab.Sirius.Rtc4ExternalControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4ExternalControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc4">
            <summary>
            RTC4 객체
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.Count">
            <summary>
            카드 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Index">
            <summary>
            RTC 제어기 식별 번호 (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.MatrixStack">
            <summary>
            행렬 스택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.KFactor">
            <summary>
            bits/mm 값 (2^16)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.FieldSize">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.LaserMode">
            <summary>
            레이저 모드(CO2, Yag1,2,3,4, ...)
            Laser1,2 출력핀의 타이밍 종류 선택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Frequency">
            <summary>
            마지막 설정된 주파수 값(Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsMOTF">
            <summary>
            MOTF 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Is2ndHead">
            <summary>
            듀얼 헤드 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Is3D">
            <summary>
            3D 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 2개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~2)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~2)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PrimaryHeadOffset">
            <summary>
            주 스캐너 헤드 X,Y 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PrimaryHeadAngle">
            <summary>
            주 스캔 헤드 회전 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.SecondaryHeadOffset">
            <summary>
            2nd 스캐너 헤드 X,Y 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.SecondaryHeadAngle">
            <summary>
            2nd 스캔 헤드 회전 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.ZOffset">
            <summary>
            Z 이동량 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.ZDefocus">
            <summary>
            Z 디포커스 값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.KZFactor">
            <summary>
            Z 축 bits/mm 값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncXCountsPerMm">
            <summary>
            단위 mm 당 엔코더 X 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncYCountsPerMm">
            <summary>
            단위 mm 당 엔코더 Y 개수
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.EncXSimulatedSpeed">
            <summary>
            엔코더 X 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.EncYSimulatedSpeed">
            <summary>
            엔코더 Y 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC 카드 초기화
            </summary>
            <summary>
            RTC 카드 초기화
            </summary>
            <param name="kFactor">k factor = bits/mm</param>
            <param name="laserMode">LaserMode 열거형</param>
            <param name="ctbFileName">주 스캐너의 보정 테이블(Table1)에 Load/Select 하려는 .ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb)을 RTC 내부 메모리로 로딩
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ctb 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserOn">
            <summary>
            현재 설정된 주파수, 펄스폭 으로 레이저 변조 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserOff">
            <summary>
            레이저 변호 신호 (LASER1,2,ON) 중단
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMove(System.Numerics.Vector2)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMove(System.Single,System.Single)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : double)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 레이저 출사 시간
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListArc(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListArc(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도</param>
            <param name="sweepAngle">각도 회전량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(int), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령의 실행이 완료될때까지 대기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlHomePosition(System.Numerics.Vector2)">
            <summary>
            지정된 위치를 홈(Home) 위치로 설정
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlHomePosition(System.Single,System.Single)">
            <summary>
            지정된 위치를 홈(Home) 위치로 설정
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정 (RTC4는 미지원. 보드상의 접점을 납땜하시오)
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC 15핀 입력으로 /START, /STOP 등의 트리거 사용여부 설정</param>
            <param name="maxStartCounts">/START 트리거 최대 허용 개수 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListSkyWriting(System.Single,System.Single,System.Single)">
            <summary>
            RTC4 카드는 미지원
            </summary>
            <param name="laserOnShift">usec</param>
            <param name="timeLag">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (예: 90도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 개별 픽셀 명령
            반드시 ListPixelLine 명령이 호출된후에 픽셀 개수만큼의 ListPixel 함수가 호출되어야 함
            </summary>
            <param name="usec">현재 픽셀의 출력 주기(lower than usec in ListPixelLine ) </param>
            <param name="weight">ExtensionChannel 출력의 가중치 값(0~1), 아나로그 10V</param>
            <param name="compensator">아나로그 출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 위 ListPixelLine + ListPixel * n 을 통합한 편이용 함수
            </summary>
            <param name="vStart">가공 시작점</param>
            <param name="vEnd">가공 끝점</param>
            <param name="periodUsec">픽셀 주기 (usec)</param>
            <param name="usecValues">매 픽셀 가공 시간 배열</param>
            <param name="ext">아나로그 확장 출력 1,2 지정</param>
            <param name="analogValues">아나로그 값(0~10) 배열</param>
            <param name="usecCompensator">픽셀 출력시간값 보정기 사용시</param>
            <param name="analogCompensator">아나로그 출력 보정기 사용시</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWobbel(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 와블 (Wobbel Operation)
            </summary>
            <param name="amplitudeX">size of W (parallel movement) (mm)</param>
            <param name="amplitudeY">size of Y (perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (Hz)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlEncoderReset(System.Single,System.Single)">
            <summary>
            RTC4 카드는 미지원
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlEncoderSpeed(System.Single,System.Single)">
            <summary>
            외부 엔코더 입력 대신 내부 가상 엔코더를 활성화 및 가상 입력 엔코더 속도 지정
            </summary>
            <param name="encXSimulatedSpeed">RTC 내부 가상 엔코더X 속도 (mm/s)</param>
            <param name="encYSimulatedSpeed">RTC 내부 가상 엔코더Y 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            현재 엔코더 값 얻기
            </summary>
            <param name="encX">X 엔코더 값 (counts)</param>
            <param name="encY">Y 엔코더 값 (counts)</param>
            <param name="encXmm">X 엔코더의 위치 (mm)</param>
            <param name="encYmm">Y 엔코더의 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlTrackingError(System.UInt32,System.UInt32)">
            <summary>
            RTC4 카드는 미지원
            </summary>
            <param name="xUsec">X 축 보상 시간(usec)</param>
            <param name="yUsec">Y축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfCompensateTable(System.String,System.UInt32)">
            <summary>
            RTC4 카드는 미지원
            </summary>
            <param name="fileName">보정 파일 이름 (경로포함), null 지정시 보정 리셋됨</param>
            <param name="tableNo">테이블 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMOTFBegin(System.Boolean)">
            <summary>
            리스트 명령 - MOTF 리스트 명령 시작
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </summary>
            <param name="encoderReset">엔코더 X,Y 초기화 여부 (RTC4는 무조건 초기화됨) (</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            리스트 명령 - 외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMOTFWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            RTC4는 미지원
            (단축 동기화 용)
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMOTFWaits(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            RTC4는 미지원
            /// </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMOTFEnd(System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 로 동작하는 리스트 명령 끝
            MOTF 종료시 스캐너를 지정된 위치로 점프 가능
            </summary>
            <param name="vPosition">점프 위치 (x,y) (mm)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5LaserControlSignal">
            <summary>
            RTC5 용 레이저 제어 신호 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.PulseSwitchSetting">
            <summary>
            Pulse Switch Setting (does not apply neither to laser mode 4 nor to laser mode 6):
            The setting only affects those laser control signals (more precisely: those LASER1 or LASER2 “laser active” modulation pulses in CO2 mode or LASER1 Q-Switch pulses in the YAG modes) that are not yet fully processed at completion of the LASERON signal.
            = 0: The signals are cut off at the end of the LASERON signal.
            = 1: The final pulse fully executes despite completion of the LASERON signal.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.PhaseShift">
            <summary>
            Phase shift of the laser control signals (does not apply neither to laser mode 4 nor to laser mode 6).
            = 0: No phase shift.
            = 1: CO2 mode: The LASER1 signal is exchanged with the LASER2 signal.
            YAG modes: The LASER1 is shifted back 180° (half a signal period)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.DisableLaserActiveSignal">
            <summary>
             Enabling or disabling of laser control signals for “Laser active” operation
            = 0: The “Laser active” laser control signals are enabled.
            = 1: The “Laser active” laser control signals are disabled (then the laser output ports are in the high impedance tristate mode).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.LaserOnSignalLevelLow">
            <summary>
            LASERON signal level.
            = 0: The signal at the LASERON port is set to active-high.
            = 1: The signal at the LASERON port is set to active-low.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.Laser12SignalLevelLow">
            <summary>
            LASER1/LASER2 signal level.
            = 0: The signals at the LASER1 and LASER2 output ports are set to active-high.
            = 1: The signals at the LASER1 and LASER2 output ports are set to active-low.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.ExtPulseSignalRisingEdge">
            <summary>
             Determines for laser_on_pulses_list whether external signal pulses (at the LASER connector’s DIGITAL IN1 digital input) are to be counted at rising or falling edges:
            = 0: At the falling edge.
            = 1: At the rising edge
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.OutputSynchronization">
            <summary>
             = 0: Output synchronization is switched off (default setting).
            = 1: Output synchronization is switched on
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.ConstantLaserPulseLength">
            <summary>
            = 0: The constant pulse length mode is switched off (default setting).
            = 1: The constant pulse length mode is switched on
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.AutomaticMonitoringToStop">
            <summary>
            = 1: In case of error, automatic monitoring (laser-signal auto-suppression) automatically generates a /STOP signal (list stops, laser control signals get permanently switched off).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5LaserControlSignal.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.Add(SpiralLab.Sirius.Rtc5LaserControlSignal.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.Remove(SpiralLab.Sirius.Rtc5LaserControlSignal.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.Contains(SpiralLab.Sirius.Rtc5LaserControlSignal.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5LaserControlSignal.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5ExternalControlMode">
            <summary>
            RTC5 외부 트리거 모드 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.ExternalStart">
            <summary>
            = 1: The external start input (by /START, /START2 or /Slave-START) is enabled.
            = 0: The external start input is disabled.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.ExternalStop">
            <summary>
            = 1: An external list stop (/STOP, /STOP2, /Slave-STOP or simulate_ext_stop) causes explicit cancellation of the external start queue’s entries (/START, /START2, /Slave-START or simulate_ext_start).
            = 0: No effect.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.TrackDelay">
            <summary>
            = 1: The track delay (defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list) that postpones execution of the list start relative to the triggering input signal or simulate_ext_start or simulate_ext_start_ctrl command (see ”External List Start”, page 240) is deactivated.
            = 0: No effect.To define and activate the track delay (e.g. for Processing-on-the-fly applications), use the command simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            = 1: The external start input is not disabled by an external stop request.
            = 0: The external start input is disabled by an external stop request
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.DisableSimulateExtCtrl">
            <summary>
             Disables simulate_ext_start_ctrl. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.EncoderReset">
            <summary>
            엔코더 리셋(초기화) 여부
            = 1 Encoder resets of the two internal encoder counters (initiated by the Processing-on-the-fly commands set_fly_x, set_fly_y or set_fly_rot) occur after the subsequent start trigger(i.e.the subsequent external start signal or simulate_ext_start or simulate_ext_start_ctrl command, possibly postponed by a track delay defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list, see also bit #2).
            = 0: Encoder resets occur immediately with each initiating Processing-on-the-fly command.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.TrackDelayConfig">
            <summary>
            = 1: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the most recent externally (but not with execute_list_pos etc.) triggered or simulated external list start.The interval between subsequent external list starts (in encoder pulses) is thus constant(see also page 242). For stop_execution or an external stop signal, bit #10 gets reset to “0”. This bit has no effect if the firmware version is 506 or lower(see get_rtc_version).
            = 0: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the time point an external list start was requested(i.e.with the corresponding simulate_ext_start or simulate_ext_start_ctrl command or external start signal). The interval between subsequent external list starts (in encoder pulses) can thus vary.This is standard for firmware version 506 or lower(see get_rtc_version).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5ExternalControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.Add(SpiralLab.Sirius.Rtc5ExternalControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.Remove(SpiralLab.Sirius.Rtc5ExternalControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.Contains(SpiralLab.Sirius.Rtc5ExternalControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.ToInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5ExternalControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5JumpMode">
            <summary>
            RTC5 점프 모드 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.Flag">
            <summary>
            -1 : Disabled
            0 : Enabled but Diactived
            1: Enabled and Activated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.Length">
            <summary>
            mm 값 입력 (자동으로 bits 로 내부 계산됨)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInXDirection">
            <summary>
            X &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInXDirection">
            <summary>
            X &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInYDirection">
            <summary>
            Y &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInYDirection">
            <summary>
            Y &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInXUserDirection">
            <summary>
            X &lt; Xmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInXUserDirection">
            <summary>
            X &gt; Xmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInYUserDirection">
            <summary>
            Y &lt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInYUserDirection">
            <summary>
            Y &gt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.TriggerError">
            <summary>
            TriggerError: an enabled external trigger or simulated trigger occurred during execution of a list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.ActivateFlyError">
            <summary>
            ActivateFlyError: an error has occurred during activation of Processing-on-the-fly correction by activate_fly_2d or activate_fly_xy 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInZDirection">
            <summary>
            Z &lt; –32.768
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInZDirection">
            <summary>
            Z &gt; +32.767
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInZUserDirection">
            <summary>
            Z &lt; Zmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInZUserDirection">
            <summary>
            Z &gt; Zmax
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5MarkingInfo.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.Add(SpiralLab.Sirius.Rtc5MarkingInfo.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.Remove(SpiralLab.Sirius.Rtc5MarkingInfo.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.Contains(SpiralLab.Sirius.Rtc5MarkingInfo.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.ToInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5MarkingInfo.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5">
            <summary>
            RTC5 객체
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.Count">
            <summary>
            카드 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Index">
            <summary>
            RTC 제어기 식별 번호 (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.MatrixStack">
            <summary>
            행렬 스택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.KFactor">
            <summary>
            bits/mm 값 (2^20)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.FieldSize">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.LaserMode">
            <summary>
            레이저 모드(CO2, Yag1,2,3,4, ...)
            Laser1,2 출력핀의 타이밍 종류 선택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Frequency">
            <summary>
            마지막 설정된 주파수 값(Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsMOTF">
            <summary>
            MOTF 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Is2ndHead">
            <summary>
            듀얼 헤드 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Is3D">
            <summary>
            3D 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 4개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PrimaryHeadOffset">
            <summary>
            첫번째 스캐너 헤드 X,Y 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PrimaryHeadAngle">
            <summary>
            첫번째 스캔 헤드 회전 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SecondaryHeadOffset">
            <summary>
            두번째 스캐너 헤드 X,Y 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SecondaryHeadAngle">
            <summary>
            두번째 스캔 헤드 회전 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.ZOffset">
            <summary>
            Z 이동량 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.ZDefocus">
            <summary>
            Z 디포커스 값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.KZFactor">
            <summary>
            Z 축 bits/mm 값 (= KFactor / 16 in RTC5)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.AutoLaserControlByPositionFileName">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 Scale 값이 외부 파일에서 제공됨
            Null 지정후 CtlAutoLaserControl 호출하면 비활성화됨
            포맷
            [PositionCtrlTable No]
            PositionNo = Value
            ScaleNo = Value
            ...
             N 1-50
            Position : 스캐너 중심으로 부터 떨어진 거리 (반지름) 의 퍼센트값: 100 % =  2^19 bits (RTC5 경우) 
            Scale : 0- 4
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.AutoLaserControlByPositionTableNo">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 어떤 테이블을 사용할지 지정
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncXCountsPerMm">
            <summary>
            단위 mm 당 엔코더 X 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncYCountsPerMm">
            <summary>
            단위 mm 당 엔코더 Y 개수
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.EncXSimulatedSpeed">
            <summary>
            엔코더 X 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.EncYSimulatedSpeed">
            <summary>
            엔코더 Y 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SerialStartNo">
            <summary>
            시작 시리얼 번호값 (CtlSerialReset 함수에 의해 설정)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SerialIncrementStep">
            <summary>
            증가 시리얼 번호값 (CtlSerialReset 함수에 의해 설정)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SerialCurrentNo">
            <summary>
            현재 시리얼 번호값 (외부 /START 에 의해 증가된 값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC 카드 초기화
            </summary>
            <summary>
            RTC 카드 초기화
            </summary>
            <param name="kFactor">k factor = bits/mm</param>
            <param name="laserMode">LaserMode 열거형</param>
            <param name="ctbFileName">주 스캐너의 보정 테이블(Table1)에 Load/Select 하려는 .ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb)을 RTC 내부 메모리로 로딩
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ctb 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserOn">
            <summary>
            현재 설정된 주파수, 펄스폭 으로 레이저 변조 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserOff">
            <summary>
            레이저 변호 신호 (LASER1,2,ON) 중단
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMove(System.Numerics.Vector2)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMove(System.Single,System.Single)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">ExtDI2, ExtDI16, ExtDO16 가능</param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetErrMsg(System.UInt32)">
            <summary>
            RTC5 내부 에러코드에 해당하는 메시지
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="s">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : double)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 레이저 출사 시간
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도</param>
            <param name="sweepAngle">각도 회전량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(int), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령의 실행이 완료될때까지 대기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            데이타 중복 여부
            </summary>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.IsListReady(System.UInt32)">
            <summary>
            내부 버퍼 메모리 상태 처리
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlHomePosition(System.Numerics.Vector2)">
            <summary>
            지정된 위치를 홈(Home) 위치로 설정
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlHomePosition(System.Single,System.Single)">
            <summary>
            지정된 위치를 홈(Home) 위치로 설정
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC 15핀 입력으로 /START, /STOP 등의 트리거 사용여부 설정</param>
            <param name="maxStartCounts">/START 트리거 최대 허용 개수 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 모드 사용시 (intelli~ 기반의 스캐너 제품군으로 벡터 점프 모드 튜닝 지원시)
            </summary>
            <param name="jumpMode">Rtc5JumpMode , Rtc6JumpMode 클래스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <summary>
            로드된 보정 파일의 헤더 정보 조회
            </summary>
            <param name="tableIndex">테이블 번호 (Table1)</param>
            <param name="parameter">CorrectionFileHeader 열거 항목</param>
            <param name="data">조회된 데이타</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            마킹 정보 얻기
            </summary>
            <param name="info">Rtc5MarkingInfo</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSkyWriting(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 레이저 가감속 구간의 모션 지연으로 인한 레이저 펄스의 중첩을 예방하기 위한 sky-writing 모드 사용
            </summary>
            <param name="laserOnShift">usec</param>
            <param name="timeLag">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (예: 90도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 개별 픽셀 명령
            반드시 ListPixelLine 명령이 호출된후에 픽셀 개수만큼의 ListPixel 함수가 호출되어야 함
            </summary>
            <param name="usec">현재 픽셀의 출력 주기(lower than usec in ListPixelLine ) </param>
            <param name="weight">ExtensionChannel 출력의 가중치 값(0~1), 내부적으로는 float : 아나로그 10V</param>
            <param name="compensator">아나로그 출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 위 ListPixelLine + ListPixel * n 을 통합한 편이용 함수
            </summary>
            <param name="start">가공 시작점</param>
            <param name="end">가공 끝점</param>
            <param name="periodUsec">픽셀 주기 (usec)</param>
            <param name="usecValues">매 픽셀 가공 시간 배열</param>
            <param name="ext">아나로그 확장 출력 1,2 지정</param>
            <param name="analogValues">아나로그 값(0~10) 배열</param>
            <param name="usecCompensator">픽셀 출력시간값 보정기 사용시</param>
            <param name="analogCompensator">아나로그 출력 보정기 사용시</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWobbel(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 와블 (Wobbel Operation)
            </summary>
            <param name="amplitudeX">size of W (parallel movement) (mm)</param>
            <param name="amplitudeY">size of Y (perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (Hz)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpHard(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="vPosition">x,y 위치</param>
            <param name="laserOn">usec</param>
            <param name="laserOff">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpHard(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="x">x,y 위치</param>
            <param name="y">x,y 위치</param>
            <param name="laserOn">usec</param>
            <param name="laserOff">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpMode(System.Int32)">
            <summary>
            리스트 명령 - 점프 모드 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="flag">-1 : Disabled, 0 : Enabled but Diactived, 1: Enabled and Activated</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpDrill(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <summary>
            측정된 데이타 가져오기
            </summary>
            <param name="channel">채널</param>
            <param name="data">데이타 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <summary>
            리스트 명령 - 샘플링 측정 시작
            </summary>
            <param name="frequency">샘플링 주기 (Hz : ~ 100KHz)</param>
            <param name="channels">대상 채널 (최대 4개)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMeasurementEnd">
            <summary>
            리스트 명령 - 샘플링 측정 끝
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,SpiralLab.Sirius.AutoLaserControlMode,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="mode">AutoLaserControlMode 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값</param>
            <param name="max">최대 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값</param>
            <param name="max">최대 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListAlcByVectorBegin``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 활성화
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="startingValue">시작 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListAlcByVectorEnd">
            <summary>
            리스트 명령 -  ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 비활성화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector2,System.Single)">
            <summary>
            듀얼 헤드 사용시 개별 헤드에 대한 오프셋 이동 회전량 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx,dy (mm)</param>
            <param name="angle">회전 (각도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 듀얼 헤드 사용시 개별 헤드에 대한 오프셋 이동 회전량 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx, dy (mm)</param>
            <param name="angle">회전 (각도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMove(System.Numerics.Vector3)">
            <summary>
            스캐너 이동
            </summary>
            <param name="vPosition">x, y, z (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlZOffset(System.Single)">
            <summary>
            Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlZDefocus(System.Single)">
            <summary>
            Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLoadZTable(System.Single,System.Single,System.Single)">
            <summary>
            3D 옵션 사용시 포물선 방정식의 계수 재설정
            </summary>
            <param name="coefA">Z (out) = A + Bl + Cl^2</param>
            <param name="coefB">Z (out) = A + Bl + Cl^2</param>
            <param name="coefC">Z (out) = A + Bl + Cl^2</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlZDistance(System.Numerics.Vector3,System.Single@)">
            <summary>
            지정된 좌표의 초점 거리(l)
            3D 옵션이 있고, 보정 파일이 지정되어 있어야 함
            </summary>
            <param name="vPosition"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListZOffset(System.Single)">
            <summary>
            리스트 명령 - Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListZDefocus(System.Single)">
            <summary>
            리스트 명령 - Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            </summary>
            <param name="vCenter">중심 위치 (cx, cy, cz) (mm)</param>
            <param name="sweepAngle">회전 각도 (+ : 반시계방향)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            </summary>
            <param name="cx">중심 위치 (cx) (mm)</param>
            <param name="cy">중심 위치 (cy) (mm)</param>
            <param name="cz">중심 위치 (cz) (mm)</param>
            <param name="sweepAngle">회전 각도 (+ : 반시계방향)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlEncoderReset(System.Single,System.Single)">
            <summary>
            입력 엔코더의 초기화 (오프셋값 Dx, Dy를 설정 가능)
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlEncoderSpeed(System.Single,System.Single)">
            <summary>
            외부 엔코더 입력 대신 내부 가상 엔코더를 활성화 및 가상 입력 엔코더 속도 지정
            </summary>
            <param name="encXSimulatedSpeed">RTC 내부 가상 엔코더X 속도 (mm/s)</param>
            <param name="encYSimulatedSpeed">RTC 내부 가상 엔코더Y 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            현재 엔코더 값 얻기
            </summary>
            <param name="encX">X 엔코더 값 (counts)</param>
            <param name="encY">Y 엔코더 값 (counts)</param>
            <param name="encXmm">X 엔코더의 위치 (mm)</param>
            <param name="encYmm">Y 엔코더의 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlTrackingError(System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="xUsec">X 축 보상 시간(usec)</param>
            <param name="yUsec">Y축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfCompensateTable(System.String,System.UInt32)">
            <summary>
            엔코더 테이블 보정 파일 로드
            보정 테이블0 번의 포맷 예 : 
            [Fly2DTable0]
            Encoder0 Encoder1 Encoder0_Delta Encoder1_Delta ;주석
            ...
            추신) 모든 위치값은 bits 이므로 mm * kFactor 하여 bits 값을 구할것. 
            추신) 모든 bits 값은 +-524288 을 초과하지 말것 
            The first of the two tables is loaded with No = 0 and the second with No = 1 + 65,536.
            </summary>
            <param name="fileName">보정 파일 이름 (경로포함), null 지정시 보정 리셋됨</param>
            <param name="tableNo">테이블 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFBegin(System.Boolean)">
            <summary>
            리스트 명령 - MOTF 리스트 명령 시작
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </summary>
            <param name="encoderReset">엔코더 X,Y 초기화 여부 (</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFRotateBegin(System.Numerics.Vector2,System.UInt32)">
            <summary>
            리스트 명령 - 회전에 대한 MOTF 
            기구 회전부의 엔코더가 (Enc0 으로 입력되고, 이때 회전 중심부분은 스캐너에서의 상대적인 위치값
            </summary>
            <param name="vCenter">회전 중심 (x,y)</param>
            <param name="pulsedPerRevolution">한 회전당 발생하는 엔코더 개수 (최소 100 이상)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFRange(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위를 설정
            범위를 벋어나면 get_marking_info 를 통해 에러 비트가 설정되며
            이를 회피하기 위해서 ListMOTFWaitLimitX 등의 조건을 통해 리스트 명령이 대기되도록 조치 필요
            </summary>
            <param name="xRange">X 영역 크기</param>
            <param name="yRange">Y 영역 크기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFSkipIfRange(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위 조건에 맞으면 다음 리스트 명령을 건너뜀(!!!) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            리스트 명령 - 외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            리스트 명령 - 지정된 엔코더 단축(X 혹은 Y)의 위치가 특정 조건을 만족할때까지 리스트 명령 대기
            (단축 동기화 용)
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFWaits(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 두개의 엔코더가 (X, Y)가 특정 조건이 될때 까지 대기 (다축 동기화 용)
            </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위(mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMOTFEnd(System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 로 동작하는 리스트 명령 끝
            MOTF 종료시 스캐너를 지정된 위치로 점프 가능
            </summary>
            <param name="vPosition">점프 위치 (x,y) (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterBegin(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            특정 색인 문자 좌표 정보 저장 시작 
            이 명령 이후 해당 문자(character)에 대한 리스트 명령 (jump, mark, arc) 명령 호출 필요
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterEnd">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인 문자 저장 완료
            CtlCharacterSetBegin 함수와 짝이 되어 문자 리스트 명령 기록 완료시 호출
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자가 있는지 여부
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterSetClear(SpiralLab.Sirius.CharacterSet)">
            <summary>
            지정된 색인 문자열 집합을 삭제합니다
            </summary>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSerialReset(System.UInt32,System.UInt32)">
            <summary>
            시리얼 번호 리셋
            </summary>
            <param name="serialNo">시작 번호</param>
            <param name="incrementStep">증가 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListText(System.String,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 문자열 마킹
            </summary>
            <param name="text">문자열</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListDate(SpiralLab.Sirius.DateFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 날짜 마킹
            </summary>
            <param name="dateFormat">DateFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListTime(SpiralLab.Sirius.TimeFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시간 마킹
            호출 시점의 윈도우즈 시스템 시간을 사용함
            </summary>
            <param name="timeFormat">TimeFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSerial(System.UInt32,SpiralLab.Sirius.SerialFormat,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시리얼 번호 마킹
            </summary>
            <param name="numOfDigits">최대 자리수 (최대 15자)</param>
            <param name="serialFormat">SerialFormat 열거형</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6LaserControlSignal">
            <summary>
            RTC6 용 레이저 제어 신호 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.PulseSwitchSetting">
            <summary>
            Pulse Switch Setting (does not concern Laser Mode 4 or Laser Mode 6).
            The setting only affects those laser control signals (more precisely: those LASER1 or LASER2 “laser active” modulation pulses in CO2 Mode or LASER1 Q-Switch pulses in the YAG modes) that are not yet fully processed at completion of the LASERON signal.
            = 0: The signals are cut off at the end of the LASERON signal.
            = 1: The final pulse fully executes despite completion of the LASERON signal.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.PhaseShift">
            <summary>
            Phase shift of the laser control signals (does not concern Laser Mode 4 or Laser Mode 6).
            = 0: No phase shift.
            = 1: CO2 Mode: The LASER1 signal is exchanged with the LASER2 signal. YAG modes: The LASER1 is shifted back 180° (half a signal period).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.DisableLaserActiveSignal">
            <summary>
            Enabling or disabling of laser control signals for “Laser active” operation.
            = 0: The “Laser active” laser control signals are enabled.
            = 1: The “Laser active” laser control signals are disabled (then the laser output ports are in the high impedance tristate mode).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.LaserOnSignalLevelLow">
            <summary>
             LASERON signal level.
            = 0: The signal at the LASERON port is set to active-HIGH.
            = 1: The signal at the LASERON port is set to active-LOW.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.Laser12SignalLevelLow">
            <summary>
             LASER1/LASER2 signal level.
            = 0: The signals at the LASER1 and LASER2 output ports are set to active-HIGH.
            = 1: The signals at the LASER1 and LASER2 output ports are set to active-LOW
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.ExtPulseSignalRisingEdge">
            <summary>
            Determines for laser_on_pulses_list whether external signal pulses (at the
            LASER connector’s DIGITAL IN1 digital input) are to be counted at rising or falling edges:
            = 0: At the falling edge.
            = 1: At the rising edge.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.OutputSynchronization">
            <summary>
            = 0: Output synchronization is switched off (default setting).
            = 1: Output synchronization is switched on.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.ConstantLaserPulseLength">
            <summary>
            = 0: The “constant pulse length” mode is switched off (default setting).
            = 1: The “constant pulse length” mode is switched on.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.AutomaticMonitoringToStop">
            <summary>
            = 1: In case of error, automatic monitoring (automatic suppression of laser control signals) automatically generates a /STOP signal (list stops, laser control signals get permanently switched off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.StopToAllMasterSlave">
            <summary>
            = 1: In case of error according to Bit #28, the stop_execution is forwarded as /Master-STOP 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6LaserControlSignal.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.Add(SpiralLab.Sirius.Rtc6LaserControlSignal.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.Remove(SpiralLab.Sirius.Rtc6LaserControlSignal.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.Contains(SpiralLab.Sirius.Rtc6LaserControlSignal.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6LaserControlSignal.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6ExternalControlMode">
            <summary>
            RTC6 외부 트리거 모드 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.ExternalStart">
            <summary>
            = 1: The external start input (by /START, /START2 or /Slave-START) is enabled.
            = 0: The external start input is disabled
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.ExternalStop">
            <summary>
            = 1: An external stop (/STOP, /STOP2, /Slave-STOP or simulate_ext_stop) causes explicit cancellation of the external start queue’s entries (/START, /START2, /Slave-START             or simulate_ext_start).
            = 0: No effect
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.TrackDelay">
            <summary>
            Track 지연 사용
            = 1: The track delay (defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list) that postpones execution of the start relative to the triggering input signal or simulate_ext_start or simulate_ext_start_ctrl command (see Section ”External Start”, page 268) is deactivated.
            = 0: No effect.To define and activate the track delay (for example, for Processing-on-the-fly applications), use simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            /START 핀 재 사용 여부
            = 1: The external start input is not disabled by an external stop request. 
            = 0: The external start input is disabled by an external stop request.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.EncoderReset">
            <summary>
            엔코더 리셋(초기화) 여부
            = 1: Encoder resets of the two internal encoder counters occur with an external start signal or simulate_ext_start or simulate_ext_start_ctrl, postponed by a track delay defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list, see also Bit #2).
            = 0: Encoder resets occur immediately with each initiating Processing-on-the-fly command.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.TrackDelayConfig">
            <summary>
            = 1: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the most recent externally (but not with execute_list_pos etc.) triggered or simulated external list start.The interval between subsequent external list starts (in encoder pulses) is thus constant(see also page 242). For stop_execution or an external stop signal, bit #10 gets reset to “0”. This bit has no effect if the firmware version is 506 or lower(see get_rtc_version).
            = 0: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the time point an external list start was requested(i.e.with the corresponding simulate_ext_start or simulate_ext_start_ctrl command or external start signal). The interval between subsequent external list starts (in encoder pulses) can thus vary.This is standard for firmware version 506 or lower(see get_rtc_version).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6ExternalControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.Add(SpiralLab.Sirius.Rtc6ExternalControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.Remove(SpiralLab.Sirius.Rtc6ExternalControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.Contains(SpiralLab.Sirius.Rtc6ExternalControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6ExternalControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6JumpMode">
            <summary>
            RTC6 점프 모드 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.Flag">
            <summary>
            -1 : Disabled
            0 : Enabled but Diactived
            1: Enabled and Activated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.Length">
            <summary>
            mm 값 입력 (자동으로 bits 로 내부 계산됨)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInXDirection">
            <summary>
            X &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInXDirection">
            <summary>
            X &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInYDirection">
            <summary>
            Y &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInYDirection">
            <summary>
            Y &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInXUserDirection">
            <summary>
            X &lt; Xmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInXUserDirection">
            <summary>
            X &gt; Xmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInYUserDirection">
            <summary>
            Y &lt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInYUserDirection">
            <summary>
            Y &gt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.TriggerError">
            <summary>
            TriggerError: an enabled external trigger or simulated trigger occurred during execution of a list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.ActivateFlyError">
            <summary>
            ActivateFlyError: an error has occurred during activation of Processing-on-the-fly correction by activate_fly_2d or activate_fly_xy 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInZDirection">
            <summary>
            Z &lt; –32.768
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInZDirection">
            <summary>
            Z &gt; +32.767
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInZUserDirection">
            <summary>
            Z &lt; Zmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInZUserDirection">
            <summary>
            Z &gt; Zmax
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6MarkingInfo.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.Add(SpiralLab.Sirius.Rtc6MarkingInfo.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.Remove(SpiralLab.Sirius.Rtc6MarkingInfo.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.Contains(SpiralLab.Sirius.Rtc6MarkingInfo.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.ToInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6MarkingInfo.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6">
            <summary>
            RTC6 객체
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.Count">
            <summary>
            카드 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Index">
            <summary>
            RTC 제어기 식별 번호 (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.MatrixStack">
            <summary>
            행렬 스택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.KFactor">
            <summary>
            bits/mm 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.FieldSize">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.LaserMode">
            <summary>
            레이저 모드(CO2, Yag1,2,3,4, ...)
            Laser1,2 출력핀의 타이밍 종류 선택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Frequency">
            <summary>
            마지막 설정된 주파수 값(Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsMOTF">
            <summary>
            MOTF 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Is2ndHead">
            <summary>
            듀얼 헤드 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Is3D">
            <summary>
            3D 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 4개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PrimaryHeadOffset">
            <summary>
            첫번째 스캐너 헤드 X,Y 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PrimaryHeadAngle">
            <summary>
            첫번째 스캔 헤드 회전 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SecondaryHeadOffset">
            <summary>
            두번째 스캐너 헤드 X,Y 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SecondaryHeadAngle">
            <summary>
            두번째 스캔 헤드 회전 (각도)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ZOffset">
            <summary>
            Z 이동량 오프셋 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ZDefocus">
            <summary>
            Z 디포커스 값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.KZFactor">
            <summary>
            Z 축 bits/mm 값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.AutoLaserControlByPositionFileName">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 Scale 값이 외부 파일에서 제공됨
            Null 지정후 CtlAutoLaserControl 호출하면 비활성화됨
            포맷
            [PositionCtrlTable No]
            PositionNo = Value
            ScaleNo = Value
            ...
             N 1-50
            Position : 스캐너 중심으로 부터 떨어진 거리 (반지름) 의 퍼센트값: 100 % =  2^19 bits (RTC5 경우) 
            Scale : 0- 4
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.AutoLaserControlByPositionTableNo">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 어떤 테이블을 사용할지 지정
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncXCountsPerMm">
            <summary>
            단위 mm 당 엔코더 X 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncYCountsPerMm">
            <summary>
            단위 mm 당 엔코더 Y 개수
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.EncXSimulatedSpeed">
            <summary>
            엔코더 X 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.EncYSimulatedSpeed">
            <summary>
            엔코더 Y 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SerialStartNo">
            <summary>
            시작 시리얼 번호값 (CtlSerialReset 함수에 의해 설정)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SerialIncrementStep">
            <summary>
            증가 시리얼 번호값 (CtlSerialReset 함수에 의해 설정)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SerialCurrentNo">
            <summary>
            현재 시리얼 번호값 (외부 /START 에 의해 증가된 값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC 카드 초기화
            </summary>
            <summary>
            RTC 카드 초기화
            </summary>
            <param name="kFactor">k factor = bits/mm</param>
            <param name="laserMode">LaserMode 열거형</param>
            <param name="ctbFileName">주 스캐너의 보정 테이블(Table1)에 Load/Select 하려는 .ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb)을 RTC 내부 메모리로 로딩
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ctb 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserOn">
            <summary>
            현재 설정된 주파수, 펄스폭 으로 레이저 변조 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserOff">
            <summary>
            레이저 변호 신호 (LASER1,2,ON) 중단
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMove(System.Numerics.Vector2)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMove(System.Single,System.Single)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">ExtDI2, ExtDI16, ExtDO16 가능</param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetErrMsg(System.UInt32)">
            <summary>
            RTC6 내부 에러코드에 해당하는 메시지
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="s">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : double)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 레이저 출사 시간
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도</param>
            <param name="sweepAngle">각도 회전량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(int), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령의 실행이 완료될때까지 대기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            좌표 중복 여부
            </summary>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.IsListReady(System.UInt32)">
            <summary>
            내부 버퍼 메모리 상태 처리
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlHomePosition(System.Numerics.Vector2)">
            <summary>
            지정된 위치를 홈(Home) 위치로 설정
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlHomePosition(System.Single,System.Single)">
            <summary>
            지정된 위치를 홈(Home) 위치로 설정
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC 15핀 입력으로 /START, /STOP 등의 트리거 사용여부 설정</param>
            <param name="maxStartCounts">/START 트리거 최대 허용 개수 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 모드 사용시 (intelli~ 기반의 스캐너 제품군으로 벡터 점프 모드 튜닝 지원시)
            </summary>
            <param name="jumpMode">Rtc5JumpMode , Rtc6JumpMode 클래스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <summary>
            로드된 보정 파일의 헤더 정보 조회
            </summary>
            <param name="tableIndex"></param>
            <param name="parameter"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            마킹 정보 얻기
            </summary>
            <param name="info">Rtc6MarkingInfo</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSkyWriting(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 레이저 가감속 구간의 모션 지연으로 인한 레이저 펄스의 중첩을 예방하기 위한 sky-writing 모드 사용
            </summary>
            <param name="laserOnShift">usec</param>
            <param name="timeLag">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (예: 90도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 개별 픽셀 명령
            반드시 ListPixelLine 명령이 호출된후에 픽셀 개수만큼의 ListPixel 함수가 호출되어야 함
            </summary>
            <param name="usec">현재 픽셀의 출력 주기(lower than usec in ListPixelLine ) </param>
            <param name="weight">ExtensionChannel 출력의 가중치 값(0~1), 내부적으로는 int: 16비트, 8비트, float : 아나로그 10V</param>
            <param name="compensator">아나로그 출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 위 ListPixelLine + ListPixel * n 을 통합한 편이용 함수
            </summary>
            <param name="start">가공 시작점</param>
            <param name="end">가공 끝점</param>
            <param name="periodUsec">픽셀 주기 (usec)</param>
            <param name="usecValues">매 픽셀 가공 시간 배열</param>
            <param name="ext">아나로그 확장 출력 1,2 지정</param>
            <param name="analogValues">아나로그 값(0~10) 배열</param>
            <param name="usecCompensator">픽셀 출력시간값 보정기 사용시</param>
            <param name="analogCompensator">아나로그 출력 보정기 사용시</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWobbel(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 와블 (Wobbel Operation)
            </summary>
            <param name="amplitudeX">size of W (parallel movement) (mm)</param>
            <param name="amplitudeY">size of Y (perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (Hz)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpHard(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="vPosition">x,y 위치</param>
            <param name="laserOn">usec</param>
            <param name="laserOff">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpHard(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="x">x,y 위치</param>
            <param name="y">x,y 위치</param>
            <param name="laserOnUSec">usec</param>
            <param name="laserOffUSec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpMode(System.Int32)">
            <summary>
            리스트 명령 - 점프 모드 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="flag">-1 : Disabled, 0 : Enabled but Diactived, 1: Enabled and Activated</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpDrill(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <summary>
            측정된 데이타 가져오기
            </summary>
            <param name="channel">채널</param>
            <param name="data">데이타 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <summary>
            리스트 명령 - 샘플링 측정 시작
            </summary>
            <param name="frequency">샘플링 주기 (Hz : ~ 100KHz)</param>
            <param name="channels">대상 채널 (최대 4개)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMeasurementEnd">
            <summary>
            리스트 명령 - 샘플링 측정 끝
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,SpiralLab.Sirius.AutoLaserControlMode,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="mode">AutoLaserControlMode 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값 (RTC6 + SpotDistance 의 경우 거리값(mm) </param>
            <param name="max">최대 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값</param>
            <param name="max">최대 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListAlcByVectorBegin``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 활성화
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="startingValue">시작 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListAlcByVectorEnd">
            <summary>
            리스트 명령 - ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 비활성화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector2,System.Single)">
            <summary>
            듀얼 헤드 사용시 개별 헤드에 대한 오프셋 이동 회전량 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx,dy (mm)</param>
            <param name="angle">회전 (각도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 듀얼 헤드 사용시 개별 헤드에 대한 오프셋 이동 회전량 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx, dy (mm)</param>
            <param name="angle">회전 (각도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMove(System.Numerics.Vector3)">
            <summary>
            스캐너 이동
            </summary>
            <param name="vPosition">x, y, z (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlZOffset(System.Single)">
            <summary>
            Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlZDefocus(System.Single)">
            <summary>
            Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLoadZTable(System.Single,System.Single,System.Single)">
            <summary>
            3D 옵션 사용시 포물선 방정식의 계수 재설정
            </summary>
            <param name="coefA">Z (out) = A + Bl + Cl^2</param>
            <param name="coefB">Z (out) = A + Bl + Cl^2</param>
            <param name="coefC">Z (out) = A + Bl + Cl^2</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlZDistance(System.Numerics.Vector3,System.Single@)">
            <summary>
            지정된 좌표의 초점 거리(l)
            3D 옵션이 있고, 보정 파일이 지정되어 있어야 함
            </summary>
            <param name="vPosition"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListZOffset(System.Single)">
            <summary>
            리스트 명령 - Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListZDefocus(System.Single)">
            <summary>
            리스트 명령 - Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            </summary>
            <param name="vCenter">중심 위치 (cx, cy, cz) (mm)</param>
            <param name="sweepAngle">회전 각도 (+ : 반시계방향)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            </summary>
            <param name="cx">중심 위치 (cx) (mm)</param>
            <param name="cy">중심 위치 (cy) (mm)</param>
            <param name="cz">중심 위치 (cz) (mm)</param>
            <param name="sweepAngle">회전 각도 (+ : 반시계방향)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlEncoderReset(System.Single,System.Single)">
            <summary>
            입력 엔코더의 초기화 (오프셋값 Dx, Dy를 설정 가능)
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlEncoderSpeed(System.Single,System.Single)">
            <summary>
            외부 엔코더 입력 대신 내부 가상 엔코더를 활성화 및 가상 입력 엔코더 속도 지정
            </summary>
            <param name="encXSimulatedSpeed">RTC 내부 가상 엔코더X 속도 (mm/s)</param>
            <param name="encYSimulatedSpeed">RTC 내부 가상 엔코더Y 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            현재 엔코더 값 얻기
            </summary>
            <param name="encX">X 엔코더 값 (counts)</param>
            <param name="encY">Y 엔코더 값 (counts)</param>
            <param name="encXmm">X 엔코더의 위치 (mm)</param>
            <param name="encYmm">Y 엔코더의 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlTrackingError(System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="xUsec">X 축 보상 시간(usec)</param>
            <param name="yUsec">Y 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfCompensateTable(System.String,System.UInt32)">
            <summary>
            엔코더 테이블 보정 파일 로드
            보정 테이블0 번의 포맷 예 : 
            [Fly2DTable0]
            Encoder0 Encoder1 Encoder0_Delta Encoder1_Delta ;주석
            ...
            추신) 모든 위치값은 bits 이므로 mm * kFactor 하여 bits 값을 구할것. 
            추신) 모든 bits 값은 +-524288 을 초과하지 말것
            </summary>
            <param name="fileName">보정 파일 이름 (경로포함), null 지정시 보정 리셋됨</param>
            <param name="tableNo">테이블 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFBegin(System.Boolean)">
            <summary>
            리스트 명령 - MOTF 리스트 명령 시작
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </summary>
            <param name="encoderReset">엔코더 X,Y 초기화 여부 (</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFRotateBegin(System.Numerics.Vector2,System.UInt32)">
            <summary>
            리스트 명령 - 회전에 대한 MOTF 
            기구 회전부의 엔코더가 (Enc0 으로 입력되고, 이때 회전 중심부분은 스캐너에서의 상대적인 위치값
            </summary>
            <param name="vCenter">회전 중심 (x,y)</param>
            <param name="pulsedPerRevolution">한 회전당 발생하는 엔코더 개수 (최소 100 이상)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFRange(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위를 설정
            범위를 벋어나면 get_marking_info 를 통해 에러 비트가 설정되며
            이를 회피하기 위해서 ListMOTFWaitLimitX 등의 조건을 통해 리스트 명령이 대기되도록 조치 필요
            </summary>
            <param name="xRange">X 영역 크기</param>
            <param name="yRange">Y 영역 크기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFSkipIfRange(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위 조건에 맞으면 다음 리스트 명령을 건너뜀(!!!) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            리스트 명령 - 외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            리스트 명령 - 지정된 엔코더 단축(X 혹은 Y)의 위치가 특정 조건을 만족할때까지 리스트 명령 대기
            (단축 동기화 용)
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFWaits(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 두개의 엔코더가 (X, Y)가 특정 조건이 될때 까지 대기 (다축 동기화 용)
            </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위 (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMOTFEnd(System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 로 동작하는 리스트 명령 끝
            MOTF 종료시 스캐너를 지정된 위치로 점프 가능
            </summary>
            <param name="vPosition">점프 위치 (x,y) (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterBegin(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            특정 색인 문자 좌표 정보 저장 시작 
            이 명령 이후 해당 문자(character)에 대한 리스트 명령 (jump, mark, arc) 명령 호출 필요
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterEnd">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인 문자 저장 완료
            CtlCharacterSetBegin 함수와 짝이 되어 문자 리스트 명령 기록 완료시 호출
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자가 있는지 여부
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterSetClear(SpiralLab.Sirius.CharacterSet)">
            <summary>
            지정된 색인 문자열 집합을 삭제합니다
            </summary>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSerialReset(System.UInt32,System.UInt32)">
            <summary>
            시리얼 번호 리셋
            </summary>
            <param name="serialNo">시작 번호</param>
            <param name="incrementStep">증가 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListText(System.String,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 문자열 마킹
            </summary>
            <param name="text">문자열</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListDate(SpiralLab.Sirius.DateFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 날짜 마킹
            </summary>
            <param name="dateFormat">DateFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListTime(SpiralLab.Sirius.TimeFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시간 마킹
            호출 시점의 윈도우즈 시스템 시간을 사용함
            </summary>
            <param name="timeFormat">TimeFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSerial(System.UInt32,SpiralLab.Sirius.SerialFormat,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시리얼 번호 마킹
            </summary>
            <param name="numOfDigits">최대 자리수 (최대 15자)</param>
            <param name="serialFormat">SerialFormat 열거형</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6Ethernet">
            <summary>
            RTC6 이더넷 제품용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6Ethernet.IpAddress">
            <summary>
            IP 주소
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6Ethernet.SubNetMask">
            <summary>
            서브넷 마스크
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.#ctor(System.UInt32,System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="ipAddress">IP 주소</param>
            <param name="subNetMask">서브넷 마스크</param>
            <param name="outputFileName">명령을 기록할 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC6Ethernet 카드 통신 초기화 
            </summary>
            <param name="kFactor"></param>
            <param name="laserMode"></param>
            <param name="ctbFileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlGetErrMsg(System.UInt32)">
            <summary>
            RTC6 내부 에러코드에 해당하는 메시지
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CalculationStatus">
            <summary>
            모션 계산 상태
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.TransferStatus">
            <summary>
            모션 경로 전송 상태
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ExecutionStatus">
            <summary>
            모션 실행 상태
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6SyncAxis">
            <summary>
            SCANLAB's XLSCAN (RTC6 + SyncAXIS + ExcelliSCAN + ACS Motion)
            x64 버전만 지원 가능
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Index">
            <summary>
            RTC 제어기 식별 번호 (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.MatrixStack">
            <summary>
            행렬 스택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.KFactor">
            <summary>
            bits/mm 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.FieldSize">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.LaserMode">
            <summary>
            레이저 신호 모드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Frequency">
            <summary>
            마지막 설정된 주파수 값(Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsMOTF">
            <summary>
            MOTF 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Is2ndHead">
            <summary>
            듀얼 헤드 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Is3D">
            <summary>
            3D 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 4개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.ConfigXMLFile">
            <summary>
            XML 환경 설정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.StageMoveSpeed">
            <summary>
            스테이지 이동 속도 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.StageMoveTimeOut">
            <summary>
            스테이지 이동시 타임아웃 시간 (s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.BandWidth">
            <summary>
            LPF(Low Pass Filter) Bandwidth
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.HeuristicIndex">
            <summary>
            XML 설정파일의 DynamicReductionFunction 항목의 휴리스틱 사용 인덱스 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.#ctor(System.UInt32,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호 (1,2,3, ...)</param>
            <param name="configXMLFile">SyncAxis 환경설정(xml) 파일</param>
            <param name="outputFileName">RTC 데이타 상세 로그 출력 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            초기화 : 리스트 핸들링 모드가 RepeatWhileBufferFull 로 자동 설정됨
            </summary>
            <param name="unUsed_kFactor"></param>
            <param name="unUsed_laserMode"></param>
            <param name="unUsed_ctbFileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일 변경 - syncAxis 미지원
            (XML 설정 파일에 등록된 ct5 파일이 대신 사용됨)
            </summary>
            <param name="tableIndex"></param>
            <param name="ctbFileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            보정 파일 선택 - syncAxis 미지원
            (XML 설정 파일에 등록된 ct5 파일에서 선택됨)
            </summary>
            <param name="primaryHeadTableIndex"></param>
            <param name="secondaryHeadTableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLaserOn">
            <summary>
            현재 설정된 주파수, 펄스폭 으로 레이저 변조 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLaserOff">
            <summary>
            레이저 변호 신호 (LASER1,2,ON) 중단
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMove(System.Numerics.Vector2)">
            <summary>
            미사용 할것 / ISyncAxis 에서 별도의 CtlMove 제공됨
            (스캐너 위치 이동)
            </summary>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMove(System.Single,System.Single)">
            <summary>
            미사용 할것 / ISyncAxis 에서 별도의 CtlMove 제공됨
            (스캐너 위치 이동)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기 - 미지원
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch"></param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetErrMsg(System.UInt32)">
            <summary>
            SYNCAXIS 의 에러코드 조회
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMove(SpiralLab.Sirius.MotionType,System.Numerics.Vector2)">
            <summary>
            스캐너 혹은 스테이지 이동
            (스테이지 이동일 경우 StageMoveSpeed / StageMoveTimeOut 값이 사용됨)
            </summary>
            <param name="motionType">모션 타입</param>
            <param name="vPosition">X,Y 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMove(SpiralLab.Sirius.MotionType,System.Single,System.Single)">
            <summary>
            스캐너 혹은 스테이지 이동
            (스테이지 이동일 경우 StageMoveSpeed / StageMoveTimeOut 값이 사용됨)
            </summary>
            <param name="motionType">모션 타입</param>
            <param name="x">X 위치 (mm)</param>
            <param name="y">Y 위치 (mm) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlBandWidth(System.Single)">
            <summary>
            LPF (Low Pass Filter)의 Cut Off 대역폭
            </summary>
            <param name="filterBandWidth"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Numerics.Vector2,System.Single)">
            <summary>
            멀티 헤드 오프셋 적용
            </summary>
            <param name="scanDevice">멀티헤드번호</param>
            <param name="offset">오프셋 량</param>
            <param name="angle">회전량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비 (Scanner Only 방식으로 고정됨)
            * 전용 ListBegin 함수를 사용할것을 추천함
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : double)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.MotionType)">
            <summary>
            리스트 명령 시작 - 자동으로 slsc_ListHandlingMode_RepeatWhileBufferFull 처리됨
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="motionType">스캐너 단독, 스테이지 단독, 스캐너+스테이지 혼합</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 레이저 출사 시간
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListArc(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListArc(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도</param>
            <param name="sweepAngle">각도 회전량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListApproxBlendLimit(System.Single)">
            <summary>
            Maximum tolerable distance of the blend curve from the corner.
            </summary>
            <param name="approxBlendLimit"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            ExtDO16, ExtAO1, ExtAO2 만 지원됨
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(int), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령의 실행이 완료될때까지 대기</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtcCtb">
            <summary>
            scanner correction for 3D 
            RTC4의 ctb 포맷용
            StretchCorreXion5.exe + CorrectionFileConverter.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction3DRtcCtb.OnResult">
            <summary>
            변환 결과에 대한 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.Interval">
            <summary>
            간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.KFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.ZLower">
            <summary>
            Z 보정 위치 최하단값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.ZUpper">
            <summary>
            Z 보정 위치 최상단값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.DataLower">
            <summary>
            최하단의 "절대위치, 측정위치" (mm) 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.DataUpper">
            <summary>
            최상단의 "절대위치, 측정위치" (mm) 배열 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.ResultMessage">
            <summary>
            변환 결과 로그 메시지
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.kFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.interval">
            <summary>
            mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.converterExeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtcCtb.ExitCode">
            process exit code ref : stretch correction.pdf by scanlab
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격</param>
            <param name="zUpper">최상단 위치 (mm)</param>
            <param name="zLower">최하단 위치 (mm)</param>
            <param name="srcCtbFile">입력 보정 파일</param>
            <param name="targetCtbFile">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            측정 데이타 입력 (절대 좌표 값)
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">기준 좌표(mm)</param>
            <param name="measured">측정 절대 좌표 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            측정 데이타 입력 (상대 좌표값) 
            ex) 상대 좌표값 = 비전 오차량 만큼만 입력
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">기준 좌표값 (mm)</param>
            <param name="error">측정 상대 좌표 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.Convert">
            <summary>
            변환 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DRtcCtb">
            <summary>
            스캐너 필드 보정 for 2D plane (Z=0)
            RTC4의 ctb 포맷용
            CFMP.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction2DRtcCtb.OnResult">
            <summary>
            변환 결과에 대한 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Interval">
            <summary>
             간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.KFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.IsAutoCenterOffset">
            <summary>
            보정 데이타중 스캐너 중심 위치에 0,0 이어야 하지만, 그렇지 않을경우 오프셋이 있는 중심위치값 만큼을 전체 데이타에서 빼기(오프셋)하여 보정을 하더라도 스캐너 중심이 변하지 않도록 해주는 기능
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.ResultMessage">
            <summary>
            변환 결과 로그 메시지
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Data">
            <summary>
            절대 위치, 실측 데이타의 2차원 배열
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DRtcCtb.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격 (mm)</param>
            <param name="srcCtbFile">입력 보정 파일</param>
            <param name="targetCtbFile">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">절대좌표</param>
            <param name="measured">측정좌표</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력 
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">논리적인 좌표</param>
            <param name="error">에러량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.Convert">
            <summary>
            변환 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DRtcCt5">
            <summary>
            스캐너 필드 보정 for 2D plane (Z=0)
            RTC5/6의 ct5 포맷용
            CorreXion5.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction2DRtcCt5.OnResult">
            <summary>
            변환 결과에 대한 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.RowInterval">
            <summary>
             행 간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.ColInterval">
            <summary>
            열 간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.KFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.IsAutoCenterOffset">
            <summary>
            보정 데이타중 스캐너 중심 위치에 0,0 이어야 하지만, 그렇지 않을경우 오프셋이 있는 중심위치값 만큼을 전체 데이타에서 빼기(오프셋)하여 보정을 하더라도 스캐너 중심이 변하지 않도록 해주는 기능
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.ResultMessage">
            <summary>
            변환 결과 로그 메시지
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.Data">
            <summary>
            절대 위치, 실측 데이타의 2차원 배열
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DRtcCt5.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="rowInterval">행 간격 (mm)</param>
            <param name="colInterval">열 간격 (mm)</param>
            <param name="srcCt5File">입력 보정 파일</param>
            <param name="targetCt5File">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">절대좌표</param>
            <param name="measured">측정좌표</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력 
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">논리적인 좌표</param>
            <param name="error">에러량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.Convert">
            <summary>
            변환 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtcCt5">
            <summary>
            scanner correction for 3D 
            RTC5/6의 ct5 포맷용
            StretchCorreXion5.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction3DRtcCt5.OnResult">
            <summary>
            변환 결과에 대한 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.SourceCorrectionFile">
            <summary>
            입력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.TargetCorrectionFile">
            <summary>
            출력 보정 파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.Interval">
            <summary>
            간격 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.KFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.ZLower">
            <summary>
            Z 보정 위치 최하단값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.ZUpper">
            <summary>
            Z 보정 위치 최상단값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.DataLower">
            <summary>
            최하단의 "절대위치, 측정위치" (mm) 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.DataUpper">
            <summary>
            최상단의 "절대위치, 측정위치" (mm) 배열 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.ResultMessage">
            <summary>
            변환 결과 로그 메시지
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCt5.kFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCt5.interval">
            <summary>
            mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCt5.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격</param>
            <param name="zUpper">최상단 위치 (mm)</param>
            <param name="zLower">최하단 위치 (mm)</param>
            <param name="srcCt5File">입력 보정 파일</param>
            <param name="targetCt5File">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            측정 데이타 입력 (절대 좌표 값)
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">기준 좌표(mm)</param>
            <param name="measured">측정 절대 좌표 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            측정 데이타 입력 (상대 좌표값) 
            ex) 상대 좌표값 = 비전 오차량 만큼만 입력
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">기준 좌표값 (mm)</param>
            <param name="error">측정 상대 좌표 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.Convert">
            <summary>
            변환 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcJumpTo">
            <summary>
            Jump delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcMarkTo">
            <summary>
            Mark delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcVirtual">
            <summary>
            RTC 가상 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.RtcVirtual.OnJumpTo">
            <summary>
            점프 위치 이벤트
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.RtcVirtual.OnMarkTo">
            <summary>
            마크 위치 이벤트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Index">
            <summary>
            RTC 제어기 식별 번호 (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.MatrixStack">
            <summary>
            행렬 스택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.KFactor">
            <summary>
            bits/mm 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.FieldSize">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Frequency">
            <summary>
            마지막 설정된 주파수 값(Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsMOTF">
            <summary>
            MOTF 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Is2ndHead">
            <summary>
            듀얼 헤드 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Is3D">
            <summary>
            3D 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 4개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.#ctor(System.UInt32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별 번호 (1,2,3,...)</param>
            <param name="outputFileName">RTC 데이타 상세 로그 출력 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 모드 사용시 (intelli~ 기반의 스캐너 제품군으로 벡터 점프 모드 튜닝 지원시)
            </summary>
            <param name="jumpMode">Rtc5JumpMode , Rtc6JumpMode 클래스</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionData2D">
            <summary>
            2차원 보정 데이타 구조체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Reference">
            <summary>
            이론상의 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Measured">
            <summary>
            실제 측정된 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Delta">
            <summary>
            오차량 (실제 측정된 좌표값 - 이론상의 좌표값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            생성자
            </summary>
            <param name="reference">이론상의 좌표값</param>
            <param name="measured">실제 측정된 좌표값</param>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.ReferenceToString">
            <summary>
            이론값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.MeasuredToString">
            <summary>
            실측값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionData3D">
            <summary>
            3차원 보정 데이타 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Reference">
            <summary>
            논리적인 좌표값 x,y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Measured">
            <summary>
            실제 측정된 좌표값 x,y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Delta">
            <summary>
            오차량 (실제 측정된 좌표값 - 이론상의 좌표값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            생성자
            </summary>
            <param name="reference">논리적인 좌표값</param>
            <param name="measured">실제 측정된 좌표값</param>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.ReferenceToString">
            <summary>
            논리 좌표 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.MeasuredToString">
            <summary>
            실측값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.ResultEventHandler">
            <summary>
            스캐너 필드 보정에 대한 결과 이벤트 통지용 델리게이트
            </summary>
            <param name="sender">IRtcCorrection 인터페이스</param>
            <param name="success">변환 성공 여부</param>
            <param name="message">변환 로그 메시지</param>
        </member>
        <member name="T:SpiralLab.Sirius.ICorrection">
            <summary>
            Correction (스캐너 보정) 인터페이스
            실행파일\correction\correXionPro.exe (for 2D)
            실행파일\correction\stretchcorreXion5.exe (for 3D)
            가 경로상에 존재해야 한다
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ICorrection.OnResult">
            <summary>
            결과 통보용 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection.KFactor">
            <summary>
            K 값 (bits/mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection.SourceCorrectionFile">
            <summary>
            입력 보정 파일 (correction 폴더에서의 상대적 경로)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection.TargetCorrectionFile">
            <summary>
            출력 보정 파일 (correction 폴더에서의 상대적 경로)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection.Convert">
            <summary>
            변환 시작
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.IMatrixStack">
            <summary>
            3x3 행렬 스택 인터페이스
            스택 자료구조에 3*3 행렬구조체를 push/pop 하여 저장하고, 스택내의 모든 행렬을 곱셈 연산하는등의 유틸리티 클래스
            스택내에 있는 행렬들의 곱셈을 빈번히 계산하지 않고 변경점이 있을때만 계산을 하기 위해 만들어짐
            가장 마지막에 삽입된 행렬값부터 적용됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMatrixStack.ToResult">
            <summary>
            스택에 있는 모든 행렬 연산 결과 얻기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMatrixStack.Count">
            <summary>
            스택에 있는 행렬의 개수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Clear">
            <summary>
            스택에 모든 행렬을 초기화 하고 단위행렬로 설정
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Numerics.Matrix3x2)">
            <summary>
            스택에 행렬 Push
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Pop(System.Numerics.Matrix3x2@)">
            <summary>
            스택에서 행렬 Pop
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Pop">
            <summary>
            스택에서 행렬 Pop
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Double)">
            <summary>
            회전 
            </summary>
            <param name="angle">각도</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Double,System.Double)">
            <summary>
            이동
            </summary>
            <param name="dx">X 이동량 (mm)</param>
            <param name="dy">Y 이동량 (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Numerics.Vector2)">
            <summary>
            이동
            </summary>
            <param name="translate">x,y 이동량 (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Double,System.Double,System.Double)">
            <summary>
            회전후 이동
            </summary>
            <param name="dx">이동량 dX (mm)</param>
            <param name="dy">이동량 dY (mm)</param>
            <param name="angle">회전 (각도)</param>
        </member>
        <member name="T:SpiralLab.Sirius.ListType">
            <summary>
            리스트 타입
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ListType.Single">
            <summary>
            single buffered list
            단일한 리스트 버퍼 사용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ListType.Auto">
            <summary>
            double buffered list (auto)
            자동 리스트 버퍼 사용 (예를 들어 두개의 리스트 버퍼를 번갈아 가며 사용하는 등 내부 처리됨)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.LaserMode">
            <summary>
            레이저 핀의 펄스 모드 (LASER1, LASER2 output pulse timing methods)
            rf. Scanlab's Manual Doc
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScannerHead">
            <summary>
            스캔 헤드 식별자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionTableIndex">
            <summary>
            RTC 카드 내에는 4개의 스캐너 보정 테이블을 저장해 놓고 추후 사용 가능
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ExtensionChannel">
            <summary>
            RTC 카드의 확장 IO 포트 종류
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.RtcStatus">
            <summary>
            RTC 상태 확인용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.Busy">
            <summary>
            가공중
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.NotBusy">
            <summary>
            가공중이 아님
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.List1Busy">
            <summary>
            리스트 1번이 사용됨 (리스트 모드가 auto 일 경우 내부적으로 사용됨)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.List2Busy">
            <summary>
            리스트 2번이 사용됨 (리스트 모드가 auto 일 경우 내부적으로 사용됨)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.NoError">
            <summary>
            에러 발생 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.Aborted">
            <summary>
            가공중 강제 종료 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.PositionAckOK">
            <summary>
            스캐너의 위치 응답 오류 발생 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.PowerOK">
            <summary>
            스캔 헤드의 전원 공급 이상 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.TempOK">
            <summary>
            스캔 헤드의 사용가능 온도 도달 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.MotfOutOfRange">
            <summary>
            MOTF 사용시 스캐너의 허용영역을 벋어났는지 여부 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ILaserControlSignal">
            <summary>
            레이저 제어 신호의 레벨 설정(Laser1, 2, On 등의 신호 레벨 : Active Low/High)
            RTC5 이상만 지원됨
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ILaserControlSignal.ToInt">
            <summary>
            비트 구조체를 32비트 값으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcExternalControlMode">
            <summary>
            RTC 외부 제어 모드 값 (Rtc4,5 의 비트 플래그가 다르므로 각 버전별 상속 구현)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExternalControlMode.ToInt">
            <summary>
            비트 구조체를 32 비트값으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcJumpMode">
            <summary>
            RTC 점프 모드 설정용 인터페이스
            Rtc5JumpMode , Rtc6JumpMode 클래스 사용 필요
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc">
            <summary>
            RTC 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Index">
            <summary>
            RTC 카드 식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.KFactor">
            <summary>
            k factor = bits / mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.FieldSize">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.LaserMode">
            <summary>
            레이저 모드(CO2, Yag1,2,3,4, ...)
            Laser1,2 출력핀의 타이밍 종류 선택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Frequency">
            <summary>
            마지막 설정된 주파수 (Hz) 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.CorrectionFiles">
            <summary>
            보정 파일 테이블 목록 (최대 4개의 테이블을 로드할수있음 : 0,1,2,3)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.PrimaryHeadTable">
            <summary>
            Primary 헤드의 보정 파일 테이블 번호 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.MatrixStack">
            <summary>
             3x3 행렬 스택 (Push/Pop 을 통해 복수개의 행렬을 스택에 저장)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsMOTF">
            <summary>
            MOTF(Marking on the fly) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Is2ndHead">
            <summary>
            듀얼 헤드 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Is3D">
            <summary>
            3D 옵션 (VarioScan, Z-Shift) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsScanAhead">
            <summary>
            ScanAhead (for syncAxis) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsSyncAxis">
            <summary>
            SyncAxis (XL-SCAN) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화되어 Jump and Drill 사용시 자동 적용됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.ListType">
            <summary>
            현재 사용중인 리스트 타입
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC 카드 초기화
            </summary>
            <summary>
            RTC 카드 초기화
            </summary>
            <param name="kFactor">k factor = bits/mm</param>
            <param name="laserMode">LaserMode 열거형</param>
            <param name="ctbFileName">주 스캐너의 보정 테이블(Table1)에 Load/Select 하려는 .ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ct5)을 RTC 내부 메모리로 로딩
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserOn">
            <summary>
            현재 설정된 주파수, 펄스폭 으로 레이저 변조 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserOff">
            <summary>
            레이저 변호 신호 (LASER1,2,ON) 중단
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlMove(System.Numerics.Vector2)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlMove(System.Single,System.Single)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">uint/float</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : double)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 레이저 출사 시간
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListArc(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListArc(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도</param>
            <param name="sweepAngle">각도 회전량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(int), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령의 실행이 완료될때까지 대기</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc3D">
            <summary>
            RTC 의 3D 옵션 (VarioScan 혹은 excelliSHIFT 등의 장치에서 사용됨)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.ZOffset">
            <summary>
            Z 오프셋 (단위 : mm)
            + 값이 위방향
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.ZDefocus">
            <summary>
            Z 디포커스 (defocus) (단위 : mm)
            + 값이 위방향
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.KZFactor">
            <summary>
            Z 축의 KZ 값 = bits/mm 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlMove(System.Numerics.Vector3)">
            <summary>
            스캐너 이동
            </summary>
            <param name="vPosition">x, y, z (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlZOffset(System.Single)">
            <summary>
            Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlZDefocus(System.Single)">
            <summary>
            Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListZOffset(System.Single)">
            <summary>
            리스트 명령 - Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListZDefocus(System.Single)">
            <summary>
            리스트 명령 - Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListJump(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListJump(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListMark(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListMark(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListArc(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            </summary>
            <param name="vCenter">중심 위치 (cx, cy, cz) (mm)</param>
            <param name="sweepAngle">회전 각도 (+ : 반시계방향)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            </summary>
            <param name="cx">중심 위치 (cx) (mm)</param>
            <param name="cy">중심 위치 (cy) (mm)</param>
            <param name="cz">중심 위치 (cz) (mm)</param>
            <param name="sweepAngle">회전 각도 (+ : 반시계방향)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AutoLaserControlMode">
            <summary>
            자동 레이저 제어 모드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.Disabled">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.SetVelocity">
            <summary>
            스캐너 명령 속도
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.ActualVelocity">
            <summary>
            스캐너 실제 속도 (iDRIVE 스캐너만 사용가능)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.EncoderSpeed">
            <summary>
            외부 엔코더 입력 속도
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.ActualVelocityAndEncoderSpeed">
            <summary>
            ActualVelocity + EncoderSpeed 복합 속도
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.ActualVelocityWithSCANAhead">
            <summary>
            RTC6 + ExcelliSCAN 스캐너 전용
            ActualVelocity(ScanAhead 기능으로) + EncoderSpeed 복합 속도
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AutoLaserControlSignal">
            <summary>
            자동 레이저 제어용 신호 종류
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Disabled">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Analog1">
            <summary>
            아나로그1 출력 (~10V)
            T 타입은 float
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Analog2">
            <summary>
            아나로그2 출력 (~10V)
            T 타입은 float
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.ExtDO8Bit">
            <summary>
            확장 8비트 DO 출력 (0~255)
            T 타입은 uint
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.PulseWidth">
            <summary>
            펄스폭 출력 (usec)
            T 타입은 float
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Frequency">
            <summary>
            주파수 출력 (Hz)
            T 타입은 float
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.ExtDO16">
            <summary>
            확장 16비트 DO 출력 (0~65535)
            T 타입은 uint
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcAutoLaserControl">
            <summary>
            RTC 의 ALC(Automatic Laser Control 기능의 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcAutoLaserControl.AutoLaserControlByPositionFileName">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 Scale 값이 외부 파일에서 제공됨
            Null 지정후 CtlAutoLaserControl 호출하면 비활성화됨
            포맷
            [PositionCtrlTable No]
            PositionNo = Value
            ScaleNo = Value
            ...
             N 1-50
            Position : 스캐너 중심으로 부터 떨어진 거리 (반지름) 의 퍼센트값: 100 % =  2^19 bits (RTC5 경우) 
            Scale : 0- 4
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcAutoLaserControl.AutoLaserControlByPositionTableNo">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 어떤 테이블을 사용할지 지정
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.CtlAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,SpiralLab.Sirius.AutoLaserControlMode,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="mode">AutoLaserControlMode 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값 (RTC6 + SpotDistance 의 경우 거리값(mm) </param>
            <param name="max">최대 출력값</param>
            <param name="compensator">출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.ListAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값</param>
            <param name="max">최대 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 활성화
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="startingValue">시작 출력값</param>
            <param name="compensator">출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.ListAlcByVectorEnd">
            <summary>
            ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 비활성화
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CharacterSet">
            <summary>
            문자 집합 (최대 4개까지 지원)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._3">
            <summary>
            3
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DateFormat">
            <summary>
            날짜 포맷
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.Year2Digits">
            <summary>
            마지막 2 자리 연도 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.Day">
            <summary>
            날짜
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.Year4Digits">
            <summary>
            4 자리 연도 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.MonthDigit">
            <summary>
            월 표기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.TimeFormat">
            <summary>
            시간 포맷
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Hours24">
            <summary>
            24시간제 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Minutes">
            <summary>
            분 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Seconds">
            <summary>
            초 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Hours12">
            <summary>
            12시간제 표기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SerialFormat">
            <summary>
            시리얼 포맷
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SerialFormat.LeadingWithZero">
            <summary>
            앞을 0 으로 채우기 + 오른쪽 정렬
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SerialFormat.NoLeadingAndLeftAligned">
            <summary>
            앞 채우기 없음 + 왼쪽 정렬
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SerialFormat.LeadingWithBlank">
            <summary>
            앞을 공백으로 채우기 + 오른쪽 정렬
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcCharacterSet">
            <summary>
            RTC IRtcCharacterSet 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcCharacterSet.SerialStartNo">
            <summary>
            시작 시리얼 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcCharacterSet.SerialIncrementStep">
            <summary>
            증가 시리얼 번호값 (CtlSerialReset 함수에 의해 설정)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcCharacterSet.SerialCurrentNo">
            <summary>
            현재 시리얼 번호값 (외부 /START 에 의해 증가된 값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterBegin(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            특정 색인 문자 좌표 정보 저장 시작 
            이 명령 이후 해당 문자(character)에 대한 리스트 명령 (jump, mark, arc) 명령 호출 필요
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterEnd">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인 문자 저장 완료
            CtlCharacterSetBegin 함수와 짝이 되어 문자 리스트 명령 기록 완료시 호출
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자가 있는지 여부
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterSetClear(SpiralLab.Sirius.CharacterSet)">
            <summary>
            지정된 색인 문자열 집합을 삭제합니다
            </summary>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlSerialReset(System.UInt32,System.UInt32)">
            <summary>
            시리얼 번호 리셋
            </summary>
            <param name="serialNo">시작 번호</param>
            <param name="incrementStep">증가 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListText(System.String,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 문자열 마킹
            </summary>
            <param name="text">문자열</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListDate(SpiralLab.Sirius.DateFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 날짜 마킹
            </summary>
            <param name="dateFormat">DateFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListTime(SpiralLab.Sirius.TimeFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시간 마킹
            호출 시점의 윈도우즈 시스템 시간을 사용함
            </summary>
            <param name="timeFormat">TimeFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListSerial(System.UInt32,SpiralLab.Sirius.SerialFormat,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시리얼 번호 마킹
            </summary>
            <param name="numOfDigits">최대 자리수 (최대 15자)</param>
            <param name="serialFormat">SerialFormat 열거형</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcDualHead">
            <summary>
            RTC 듀얼헤드 인터페이스
            (여기에서 제공되는 Offset/Angle 은 행렬스택과 무관하게 적용됨. 즉 스캐너의 HW 적인 장착 방향에 대한 오프셋 처리용으로 사용 권장함)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.SecondaryHeadTable">
            <summary>
            Secondary 헤드의 보정 파일 테이블 번호 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.PrimaryHeadOffset">
            <summary>
            Primary 헤드의 오프셋 (듀얼 헤드 사용시)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.PrimaryHeadAngle">
            <summary>
            Primary 헤드의 회전각도 (듀얼 헤드 사용시)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.SecondaryHeadOffset">
            <summary>
            Secondary 헤드의 오프셋 (듀얼 헤드 사용시)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDualHead.SecondaryHeadAngle">
            <summary>
            Secondary 헤드의 회전각도 (듀얼 헤드 사용시)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcDualHead.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector2,System.Single)">
            <summary>
            듀얼 헤드 사용시 개별 헤드에 대한 오프셋 이동 회전량 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx,dy (mm)</param>
            <param name="angle">회전 (각도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcDualHead.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 듀얼 헤드 사용시 개별 헤드에 대한 오프셋 이동 회전량 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx, dy (mm)</param>
            <param name="angle">회전 (각도)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionFileHeaderParam">
            <summary>
            보정 파일 헤더 파라메터 조회 항목
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CorrectionTable">
            <summary>
            0 = 2D
            1 = 3D
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.KFactor">
            <summary>
            Calibration factor Kxy [bit/mm]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.FocalLengthOrWorkingDistance">
            <summary>
            For a configuration with a scan objective: the effective focal length of the objective [mm]. 
            For a configuration without a scan objective: the working distance A [mm]. 
            A = distance from the optical axis of the incident laser beam at the first deflection mirror to the image plane.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.StretchFactorX">
            <summary>
            Stretch factor for the x direction. Compensates the pyramid-shaped image field change which exists in the z direction of 3D markings.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.StretchFactorY">
            <summary>
            Stretch factor for the y direction. Compensates the pyramid-shaped image field change which exists in the z direction of 3D markings.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CoefficientA">
            <summary>
            Bits ! 
            Coefficient A of the polynomial for z axis control, offset part, ±26 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CoefficientB">
            <summary>
            Bits ! 
            Coefficient B of the polynomial for z axis control, linear part, ±11 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CoefficientC">
            <summary>
            Bits ! 
            Coefficient C of the polynomial for z axis control, square part, ±4 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.NumOfCorrectionFile">
            <summary>
            Number of the correction file. With correction files supplied by SCANLAB, 
            the parameter corresponds to the number in the file name (for example, 145 for D2_145.ct5 or D3_145.ct5)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.DifferentiationFThetaObjective">
            <summary>
            Differentiation between correction with or without an F-Theta objective.
            The following applies: 
            Parameter = 10 * PObj + PTyp with
            – PObj = 0: Correction without F-Theta objective
              PObj = 1: Correction with F-Theta objective
            – if correction with F-Theta objective:
              PTyp = 0.0: without distortion data
              PTyp = 1.0: with F-Theta’s F-stop progression condition
              PTyp = 2.0: with image height table
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.IndicatorFortheSourceOfTheCorrectionFile">
            <summary>
            Indicator for the source of the correction file.
            The following applies: Parameter = 1000 * POrig + PVer with
            • POrig = 10000: Originally calculated file
              POrig = 20000: converted from ctb file
              POrig = 30000: reconstructed from txt file
              By manipulating a correction file using correction programs available from SCANLAB,
              POrig is increased by 1 in each case.
               – PVer = Version number of the program used to create the correction file
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.InverseTable">
            <summary>
            Information about the inverse table.
            The following applies: Parameter = PExist + 2 × PCalc with
            • PExist = 1.0: valid inverse table is present
              PExist = 0.0: no valid inverse table present
            • If valid inverse table is present:
              PCalc = 0: inverse table calculated ab initio
              PCalc = 1: inverse table numerically calculated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.AngleCalibration">
            <summary>
            Angle calibration of the scan system.
            Mechanical angle deflection in [± °] at 96% of the maximum control.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.ScanHeadGeometry">
            <summary>
            Code for the scan head geometry used for the calculation (for internal use only), for example,
            • = –1.0: unknown geometry (for example, for a table converted from a ctb file)
            • = 0.0: standard geometry
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.ProtectiveWindow">
            <summary>
            Indicator for whether an additional protective window has been taken into account.
            The following applies: Parameter = 1,000,000 × PT + 1,000 × PI with
            • PT = Protective window thickness in mm (max. 2 decimal places)
            • PI = Refraction index(max. 3 decimal places)
            Example: The value 3,521,450.0 corresponds to a protective window thickness of 3.52 mm and a refraction index of 1.450.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.ImageFieldSizeLimited">
            <summary>
            Indicator for whether the image field size has been limited in the correction file.
            • = 0.0: without field size limit
            • = 2.0: with field size limit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMarkingInfo">
            <summary>
            RTC 마킹 정보(marking info 비트 데이타)
            RTC5 : Rtc5MarkingInfo
            RTC6 : Rtc6MarkingInfo
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMarkingInfo.ToInt">
            <summary>
            32 비트 값
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcExtension">
            <summary>
            RTC 확장 기능 인터페이스
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스 (Rtc5LaserControlSignal, Rtc6LaserControlSignal)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC (RTC5,6 경우 15핀) /START, /STOP 등의 트리거 사용여부 설정</param>
            <param name="maxStartCounts">/START 트리거 최대 허용 개수 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 모드 사용시 (intelli~ 기반의 스캐너 제품군으로 벡터 점프 모드 튜닝 지원시)
            </summary>
            <param name="jumpMode">Rtc5JumpMode , Rtc6JumpMode 클래스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <summary>
            로드된 보정 파일의 헤더 정보 조회
            </summary>
            <param name="tableIndex">테이블 번호 (Table1)</param>
            <param name="parameter">CorrectionFileHeader 열거 항목</param>
            <param name="data">조회된 데이타</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            마킹 정보 32비트값 조회
            RTC5 : Rtc5MarkingInfo
            RTC6 : Rtc6MarkingInfo
            </summary>
            <param name="markingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListSkyWriting(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 레이저 가감속 구간의 모션 지연으로 인한 레이저 펄스의 중첩을 예방하기 위한 sky-writing 모드 사용
            </summary>
            <param name="laserOnShift">usec</param>
            <param name="timeLag">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (예: 90도)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 개별 픽셀 명령
            반드시 ListPixelLine 명령이 호출된후에 픽셀 개수만큼의 ListPixel 함수가 호출되어야 함
            </summary>
            <param name="usec">현재 픽셀의 출력 주기(lower than usec in ListPixelLine ) </param>
            <param name="weight">ExtensionChannel 출력의 가중치 값(0~1)</param>
            <param name="compensator">아나로그 출력값 보정기 사용시 지정</param>
            <returns></returns>        
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 위 ListPixelLine + ListPixel * n 을 통합한 편이용 함수
            </summary>
            <param name="vStart">가공 시작점</param>
            <param name="vEnd">가공 끝점</param>
            <param name="period">픽셀 주기 (usec)</param>
            <param name="usecValues">매 픽셀 가공 시간 배열</param>
            <param name="ext">아나로그 확장 출력 1,2 지정</param>
            <param name="analogValues">아나로그 값(0~10) 배열</param>
            <param name="usecCompensator">픽셀 출력시간값 보정기 사용시</param>
            <param name="analogCompensator">아나로그 출력 보정기 사용시</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListWobbel(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 와블 (Wobbel Operation)
            </summary>
            <param name="amplitudeX">size of W (parallel movement) (mm)</param>
            <param name="amplitudeY">size of Y (perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (Hz)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListJumpMode(System.Int32)">
            <summary>
            리스트 명령 - 점프 모드 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="flag">-1 : Disabled, 0 : Enabled but Diactived, 1: Enabled and Activated</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListJumpDrill(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MeasurementChannel">
            <summary>
            Measurement 관련 채널 목록
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.LaserOn">
            <summary>
            LASERON signal (1 = laser signal on, 0 = laser signal off.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAX">
            <summary>
            StatusAX (X-axis status signal of the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAY">
            <summary>
            StatusAY (Y-axis status signal of the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBX">
            <summary>
            StatusBX (X-axis status signal of the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBY">
            <summary>
            StatusBY (Y-axis status signal of the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleX">
            <summary>
            SampleX (X-axis cartesian control value).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleY">
            <summary>
            SampleY (Y-axis cartesian control value).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleZ">
            <summary>
            SampleZ (Z-axis cartesian control value).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAX_Coor">
            <summary>
            SampleAX_Corr (corrected X-axis control value for the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAY_Coor">
            <summary>
            SampleAY_Corr (corrected Y-axis control value for the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAZ_Coor">
            <summary>
            SampleAZ_Corr (corrected Z-axis control value, if XY are connected to the primary scan head connector; identical to the effective output value for the Z axis).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBX_Coor">
            <summary>
            SampleBX_Corr (corrected X-axis control value for the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBY_Coor">
            <summary>
            SampleBY_Corr (corrected Y-axis control value for the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBZ_Coor">
            <summary>
            SampleBZ_Corr (corrected Z-axis control value, if XY are connected to the secondary scan head connector; identical to the effective output value for the Z axis).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAX_LaserOn">
            <summary>
            StatusAX+LASERON (StatusAX for laser signal on, –524288 for laser signal off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAY_LaserOn">
            <summary>
            StatusAY+LASERON (StatusAY for laser signal on, –524288 for laser signal off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBX_LaserOn">
            <summary>
            StatusBX+LASERON (StatusBX for laser signal on, –524288 for laser signal off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBY_LaserOn">
            <summary>
            StatusBY+LASERON (StatusBY for laser signal on, –524288 for laser signal off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAX_Out">
            <summary>
            SampleAX_Out (effective X-axis output value for the primary scan head connector; if applicable incl. any scanner offset and gain compensation, see comments; not usable for measuring Z-axis output values).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAY_Out">
            <summary>
            SampleAY_Out (effective Y-axis output value for the primary scan head connector; not usable for measuring Z-axis output values).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBX_Out">
            <summary>
            SampleBX_Out (effective X-axis output value for the secondary scan head connector; not usable for measuring Z-axis output values).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBY_Out">
            <summary>
            SampleBY_Out (effective Y-axis output value for the secondary scan head connector; not usable for measuring Z-axis output values).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.AutomaticLaserControlParam">
            <summary>
            Laser control parameter of automatic laser control (see set_auto_laser_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAX_Trans">
            <summary>
            SampleAX_Trans (transformed X-axis control value for the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAY_Trans">
            <summary>
            SampleAY_Trans (transformed Y-axis control value for the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAZ_Trans">
            <summary>
            SampleAZ_Trans (transformed Z-axis control value, if XY are connected to the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBX_Trans">
            <summary>
            SampleBX_Trans (transformed X-axis control value for the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBY_Trans">
            <summary>
            SampleBY_Trans (transformed Y-axis control value for the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBZ_Trans">
            <summary>
            SampleBZ_Trans (transformed Z-axis control value, if XY are connected to the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.AutomaticLaserControlByVectorParam">
            <summary>
            Laser control parameter of vector-defined laser control (see set_vector_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.FocusShift">
            <summary>
            Focus shift (see set_vector_control, set_defocus, set_defocus_list).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtAO1">
            <summary>
            12-bit output value at the ANALOG OUT1 output port (see set_auto_laser_control, set_vector_control and chapter 9.1.4 ”12- Bit Analog Output Ports”).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtAO2">
            <summary>
            12-bit output value at the ANALOG OUT2 output port (see set_auto_laser_control, set_vector_control and chapter 9.1.4 ”12- Bit Analog Output Ports”). /// </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtDO16">
            <summary>
            Output value at the 16-bit digital output port (see set_auto_laser_control, set_vector_control and chapter 9.1.1 ”16- Bit Digital Output Port”) /// </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtDO8">
            <summary>
            Output value at the 8-bit digital output port (see set_auto_laser_control, set_vector_control and chapter 9.1.2 ”8- Bit Digital Output Port”).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.PulseLength">
            <summary>
            Pulse length (PulseLength) of the LASER1 and LASER2 laser signals (see set_auto_laser_control, set_vector_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.OutputPeroid">
            <summary>
            Output period (HalfPeriod) of the LASER1 and LASER2 laser signals (see set_auto_laser_control, set_vector_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.Enc0Counter">
            <summary>
            Counter value of encoder counter Encoder0.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.Enc1Counter">
            <summary>
            Counter value of encoder counter Encoder1.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.MarkSpeed">
            <summary>
            Marking speed (from set_mark_speed, set_mark_speed_ctrl).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtDI16">
            <summary>
            16-bit digital input (EXTENSION 1).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ZoomValueForIntelliWeld">
            <summary>
            Zoom value (only for intelliWELD II).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.TimeStampCounter">
            <summary>
            Time stamp counter (see chapter 8.13 ”Time Measurements”, page 231).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.WobbelAmplitude">
            <summary>
            Wobbel amplitude (see set_wobbel, set_wobbel_mode and chapter 8.4 ”Wobbel Mode”, page 189).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtAI">
            <summary>
            ReadAnalogIn (see read_analog_in).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ScaledEncoderX">
            <summary>
            Scaled encoder value for X. (RTC6 only)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ScaledEncoderY">
            <summary>
            Scaled encoder value for Y. (RTC6 only)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ScaledEncoderZ">
            <summary>
            Scaled encoder value for Z. (RTC6 only)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMeasurement">
            <summary>
            RTC Measurement (계측 데이타) 인터페이스
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <summary>
            측정된 샘플링 데이타 가져오기
            </summary>
            <param name="channel">채널</param>
            <param name="data">데이타 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <summary>
            리스트 명령 - 샘플링 측정 시작
            </summary>
            <param name="frequency">샘플링 주기 (Hz : ~ 100KHz)</param>
            <param name="channels">대상 채널 (최대 4개)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.ListMeasurementEnd">
            <summary>
            리스트 명령 - 샘플링 측정 끝
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcEncoder">
            <summary>
            RTC 엔코더 종류
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcEncoder.EncX">
            <summary>
            Enc0 = X
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcEncoder.EncY">
            <summary>
            Enc1 = Y
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.EncoderWaitCondition">
            <summary>
            엔코더 대기 조건
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Under">
            <summary>
            입력 엔코더 값이 지정된 값보다 작아질 때까지 대기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Auto">
            <summary>
            자동 = 호출될 당시의 입력 엔코더 위치를 기준으로 자동으로 판단 (리스트 명령이 추후 실행되고, 이때의 기구 상태에 따라 가변적임)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Over">
            <summary>
            입력 엔코더 값이 지정된 값 보다 커질 때까지 대기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.EncoderRangeCondition">
            <summary>
            엔코더 사용범위 (제한 영역)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderRangeCondition.UnderFlow">
            <summary>
            입력 엔코더 + 위치값이 지정된 영역 내부일 때
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderRangeCondition.Boundary">
            <summary>
            영역을 넘나들때
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderRangeCondition.OverFlow">
            <summary>
            입력 엔코더 + 위치값이 지정된 영역 외부일 때
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMOTF">
            <summary>
            RTC MOTF 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncXCountsPerMm">
            <summary>
            mm 당 엔코더 X 의 펄스 개수 
            
                                  counts 
            EncXCountsPerMm =   -----------
                                    mm  
            * 주의 사항 (한축의 엔코더만 사용할 경우에도 임의의 값을 설정하는것을 추천)               
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncYCountsPerMm">
            <summary>
            mm 당 엔코더 Y 의 펄스 개수
            
                                  counts 
            EncYCountsPerMm =   -----------
                                    mm  
            * 주의 사항 (한축의 엔코더만 사용할 경우에도 임의의 값을 설정하는것을 추천)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlEncoderReset(System.Single,System.Single)">
            <summary>
            입력 엔코더의 초기화 (오프셋값 Dx, Dy를 설정 가능)
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlEncoderSpeed(System.Single,System.Single)">
            <summary>
            외부 엔코더 입력 대신 내부 가상 엔코더를 활성화 및 가상 입력 엔코더 속도 지정
            </summary>
            <param name="encXSimulatedSpeed">RTC 내부 가상 엔코더X 속도 (mm/s)</param>
            <param name="encYSimulatedSpeed">RTC 내부 가상 엔코더Y 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            현재 엔코더 값 얻기
            </summary>
            <param name="encX">X 엔코더 값 (counts)</param>
            <param name="encY">Y 엔코더 값 (counts)</param>
            <param name="encXmm">X 엔코더의 위치 (mm)</param>
            <param name="encYmm">Y 엔코더의 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlTrackingError(System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            (추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)
            </summary>
            <param name="xUsec">X 축 보상 시간(usec)</param>
            <param name="yUsec">Y축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfCompensateTable(System.String,System.UInt32)">
            <summary>
            엔코더 테이블 보정 파일 로드
            보정 테이블0 번의 포맷 예 : 
            [Fly2DTable0]
            Encoder0 Encoder1 Encoder0_Delta Encoder1_Delta ;주석
            ...
            추신) 모든 위치값은 bits 이므로 mm * kFactor 하여 bits 값을 구할것. 
            추신) 모든 bits 값은 +-524288 을 초과하지 말것
            </summary>
            <param name="fileName">보정 파일 이름 (경로포함), null 지정시 보정 리셋됨</param>
            <param name="tableNo">테이블 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFBegin(System.Boolean)">
            <summary>
            리스트 명령 - MOTF 리스트 명령 시작
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </summary>
            <param name="encoderReset">엔코더 X,Y 초기화 여부 (</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            리스트 명령 - 외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            리스트 명령 - 지정된 엔코더 단축(X 혹은 Y)의 위치가 특정 조건을 만족할때까지 리스트 명령 대기
            (단축 동기화 용)
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFWaits(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 두개의 엔코더가 (X, Y)가 특정 조건이 될때 까지 대기 (다축 동기화 용)
            </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMOTFEnd(System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 로 동작하는 리스트 명령 끝
            MOTF 종료시 스캐너를 지정된 위치로 점프 가능
            </summary>
            <param name="vPosition">점프 위치 (x,y) (mm)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotionType">
            <summary>
            모션 방식 (SYNCAXIS 기반의 MOTF 를 위한 내용)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.ScannerOnly">
            <summary>
            스캐너 단독 (일반적인 경우)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.StageOnly">
            <summary>
            스태이지 단독 (Route)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.StageAndScanner">
            <summary>
            스캐너 + 스테이지 (MOTF/Marking On the flying)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScanDevice">
            <summary>
            스캔 헤드 번호 (멀티 헤드 사용시)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice3">
            <summary>
            3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice4">
            <summary>
            4
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcSyncAxis">
            <summary>
            RTC SYNCAXIS 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.StageMoveSpeed">
            <summary>
            Stage Move 시 사용할 속도 (초기설정값 : 10mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.StageMoveTimeOut">
            <summary>
            Stage Move 시 사용할 시간제한 (초)
            기본 5초
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.BandWidth">
            <summary>
            LPF (Low Pass Filter) 주파수
            초기값은 XML 설정 파일에 있는 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlBandWidth(System.Single)">
            <summary>
            LPF(Low Pass Filter) 주파수를 설정한다
            (xml 설정 파일에 저장 되지 않음)
            </summary>
            <param name="filterBandWidth">Hz</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSelectHeuristic(System.UInt32)">
            <summary>
            사용 휴리스틱 변경하기
            (xml 설정 파일에서 미리 저장되어 있어야함)
            </summary>
            <param name="heristicIndex">XML 설정파일의 DynamicReductionFunction 항목의 휴리스틱 사용 인덱스 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlMove(SpiralLab.Sirius.MotionType,System.Numerics.Vector2)">
            <summary>
            스테이지 혹은 스캐너 를 수동 이동할때 사용
            </summary>
            <param name="motionType">모션 종류</param>
            <param name="position">x,y 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlMove(SpiralLab.Sirius.MotionType,System.Single,System.Single)">
            <summary>
            스테이지 혹은 스캐너 를 수동 이동할때 사용
            </summary>
            <param name="motionType">모션 종류</param>
            <param name="x">X 위치 (mm)</param>
            <param name="y">Y 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Numerics.Vector2,System.Single)">
            <summary>
            멀티 헤드 사용시 개별 헤드에 대한 오프셋, 회전 처리
            </summary>
            <param name="scanDevice">ScanDevice 열거형</param>
            <param name="offset">dx, dy 이동량 (mm)</param>
            <param name="angle">회전량 (각도) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.MotionType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            syncAxis 는 버퍼 처리 방식이 전혀 다르므로  IRtc 인터페이스의 ListBegin 를 사용하지 않고, 전용의 ListBegin 을 지원한다
            내부적으로는 slsc_ListHandlingMode_RepeatWhileBufferFull 방식으로 고정된다.
            주의사항 : 버퍼가 고갈되지 않도록 지속적으로 리스트 명령을 삽입해야 주어야 한다. 그렇지 않으면 버퍼 고갈(buffer underrun) 이 발생된다.
            때문에 리스트 데이타를 넣는동안 디버깅(디버깅 중지) 할때는 매우 조심해야 한다
            </summary>
            <param name="laser">ILaser 인터페이스</param>
            <param name="motionType">MotionType 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListApproxBlendLimit(System.Single)">
            <summary>
            모션 블랜딩 반지름 근사값
            Maximum tolerable mathematical distance of the blending curve to the corner point. 
            </summary>
            <param name="approxBlendLimit">반지름 거리값 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListContourDependentSpeedCalculation(System.Int32,System.Single)">
            <summary>
            Contour-dependent speed calculation 사용유무
            </summary>
            <param name="direction">0 : 비활성화, 1 : Speeds are determined right of the curve mid-line. -1 : Speeds are determined left of the curve mid-line.</param>
            <param name="spotRadius">Radius of the laser spot in the working plane. (mm) specifies how far to the right or left of the curve mid-line the speeds are determined.</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListSpotDistanceControl(System.Boolean,System.Single)">
            <summary>
            Spot Distance Control 비활성화 유무
            </summary>
            <param name="isSupress">활성화 경우 (“Automatic Laser Control“ is active with SpotDistance as an “ActiveChannel”) </param>
            <param name="timeDelay"></param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RTC4Import.RTC4Wrap">
            <summary>
            Static RTC4 Wrapper class.
            Notice that the construction of the RTC4Wrap object or an initial
            call of any RTC4Wrap method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.getmemory">
            <summary>
             short getmemory(ushort adr);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_waveform">
            <summary>
             n_get_waveform(ushort n, ushort channel, ushort istop, short[] memptr);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_waveform">
            <summary>
             get_waveform(ushort channel, ushort istop, short[] memptr);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_measurement_status">
            <summary>
             n_measurement_status(ushort n, out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.measurement_status">
            <summary>
             measurement_status(out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_varpolydelay">
            <summary>
             short n_load_varpolydelay(ushort n, string stbfilename, ushort tableno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_varpolydelay">
            <summary>
             short load_varpolydelay(string stbfilename, ushort tableno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_program_file">
            <summary>
             short n_load_program_file(ushort n, string name);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_program_file">
            <summary>
             short load_program_file(string name);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_correction_file">
            <summary>
             short n_load_correction_file(ushort n, string filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_correction_file">
            <summary>
             short load_correction_file(string filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_z_table">
            <summary>
             short n_load_z_table(ushort n, double a, double b, double c);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_z_table">
            <summary>
             short load_z_table(double a, double b, double c);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_nop">
            <summary>
             n_list_nop(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_nop">
            <summary>
             list_nop();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_end_of_list">
            <summary>
             n_set_end_of_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_end_of_list">
            <summary>
             set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_abs_3d">
            <summary>
             n_jump_abs_3d(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_abs_3d">
            <summary>
             jump_abs_3d(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_abs">
            <summary>
             n_jump_abs(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_abs">
            <summary>
             jump_abs(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_abs_3d">
            <summary>
             n_mark_abs_3d(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_abs_3d">
            <summary>
             mark_abs_3d(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_abs">
            <summary>
             n_mark_abs(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_abs">
            <summary>
             mark_abs(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_rel_3d">
            <summary>
             n_jump_rel_3d(ushort n, short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_rel_3d">
            <summary>
             jump_rel_3d(short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_rel">
            <summary>
             n_jump_rel(ushort n, short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_rel">
            <summary>
             jump_rel(short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_rel_3d">
            <summary>
             n_mark_rel_3d(ushort n, short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_rel_3d">
            <summary>
             mark_rel_3d(short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_rel">
            <summary>
             n_mark_rel(ushort n, short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_rel">
            <summary>
             mark_rel(short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_8bit_port_list">
            <summary>
             n_write_8bit_port_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_8bit_port_list">
            <summary>
             write_8bit_port_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_1_list">
            <summary>
             n_write_da_1_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_1_list">
            <summary>
             write_da_1_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_2_list">
            <summary>
             n_write_da_2_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_2_list">
            <summary>
             write_da_2_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_matrix_list">
            <summary>
             n_set_matrix_list(ushort n, ushort i, ushort j, double mij);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_matrix_list">
            <summary>
             set_matrix_list(ushort i, ushort j, double mij);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_defocus_list">
            <summary>
             n_set_defocus_list(ushort n, short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_defocus_list">
            <summary>
             set_defocus_list(short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_control_mode_list">
            <summary>
             n_set_control_mode_list(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_control_mode_list">
            <summary>
             set_control_mode_list(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_offset_list">
            <summary>
             n_set_offset_list(ushort n, short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_offset_list">
            <summary>
             set_offset_list(short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_long_delay">
            <summary>
             n_long_delay(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.long_delay">
            <summary>
             long_delay(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_on_list">
            <summary>
             n_laser_on_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_on_list">
            <summary>
             laser_on_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_jump_speed">
            <summary>
             n_set_jump_speed(ushort n, double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_jump_speed">
            <summary>
             set_jump_speed(double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_mark_speed">
            <summary>
             n_set_mark_speed(ushort n, double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_mark_speed">
            <summary>
             set_mark_speed(double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_laser_delays">
            <summary>
             n_set_laser_delays(ushort n, short ondelay, short offdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_laser_delays">
            <summary>
             set_laser_delays(short ondelay, short offdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_scanner_delays">
            <summary>
             n_set_scanner_delays(ushort n, ushort jumpdelay, ushort markdelay, ushort polydelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_scanner_delays">
            <summary>
             set_scanner_delays(ushort jumpdelay, ushort markdelay, ushort polydelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_list_jump">
            <summary>
             n_set_list_jump(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_list_jump">
            <summary>
             set_list_jump(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_input_pointer">
            <summary>
             n_set_input_pointer(ushort n, ushort pointer);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_input_pointer">
            <summary>
             set_input_pointer(ushort pointer);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_call">
            <summary>
             n_list_call(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_call">
            <summary>
             list_call(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_return">
            <summary>
             n_list_return(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_return">
            <summary>
             list_return();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_z_out_list">
            <summary>
             n_z_out_list(ushort n, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.z_out_list">
            <summary>
             z_out_list(short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_standby_list">
            <summary>
             n_set_standby_list(ushort n, ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_standby_list">
            <summary>
             set_standby_list(ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_jump_abs">
            <summary>
             n_timed_jump_abs(ushort n, short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_jump_abs">
            <summary>
             timed_jump_abs(short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_mark_abs">
            <summary>
             n_timed_mark_abs(ushort n, short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_mark_abs">
            <summary>
             timed_mark_abs(short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_jump_rel">
            <summary>
             n_timed_jump_rel(ushort n, short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_jump_rel">
            <summary>
             timed_jump_rel(short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_mark_rel">
            <summary>
             n_timed_mark_rel(ushort n, short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_mark_rel">
            <summary>
             timed_mark_rel(short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_laser_timing">
            <summary>
             n_set_laser_timing(ushort n, ushort halfperiod, ushort pulse1, ushort pulse2, ushort timebase);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_laser_timing">
            <summary>
             set_laser_timing(ushort halfperiod, ushort pulse1, ushort pulse2, ushort timebase);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_wobbel_xy">
            <summary>
             n_set_wobbel_xy(ushort n, ushort long_wob, ushort trans_wob, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_wobbel_xy">
            <summary>
             set_wobbel_xy(ushort long_wob, ushort trans_wob, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_wobbel">
            <summary>
             n_set_wobbel(ushort n, ushort amplitude, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_wobbel">
            <summary>
             set_wobbel(ushort amplitude, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_fly_x">
            <summary>
             n_set_fly_x(ushort n, double kx);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_fly_x">
            <summary>
             set_fly_x(double kx);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_fly_y">
            <summary>
             n_set_fly_y(ushort n, double ky);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_fly_y">
            <summary>
             set_fly_y(double ky);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_fly_rot">
            <summary>
             n_set_fly_rot(ushort n, double resolution);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_fly_rot">
            <summary>
             set_fly_rot(double resolution);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_fly_return">
            <summary>
             n_fly_return(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.fly_return">
            <summary>
             fly_return(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_calculate_fly">
            <summary>
             n_calculate_fly(ushort n, ushort direction, double distance);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.calculate_fly">
            <summary>
             calculate_fly(ushort direction, double distance);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_io_port_list">
            <summary>
             n_write_io_port_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_io_port_list">
            <summary>
             write_io_port_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_cor_table_list">
            <summary>
             n_select_cor_table_list(ushort n, ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_cor_table_list">
            <summary>
             select_cor_table_list(ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_wait">
            <summary>
             n_set_wait(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_wait">
            <summary>
             set_wait(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_simulate_ext_start">
            <summary>
             n_simulate_ext_start(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.simulate_ext_start">
            <summary>
             simulate_ext_start(short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_x_list">
            <summary>
             n_write_da_x_list(ushort n, ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_x_list">
            <summary>
             write_da_x_list(ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_pixel_line">
            <summary>
             n_set_pixel_line(ushort n, ushort pixelmode, ushort pixelperiod, double dx, double dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_pixel_line">
            <summary>
             set_pixel_line(ushort pixelmode, ushort pixelperiod, double dx, double dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_pixel">
            <summary>
             n_set_pixel(ushort n, ushort pulswidth, ushort davalue, ushort adchannel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_pixel">
            <summary>
             set_pixel(ushort pulswidth, ushort davalue, ushort adchannel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_extstartpos_list">
            <summary>
             n_set_extstartpos_list(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_extstartpos_list">
            <summary>
             set_extstartpos_list(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_on_list">
            <summary>
             n_laser_signal_on_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_on_list">
            <summary>
             laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_off_list">
            <summary>
             n_laser_signal_off_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_off_list">
            <summary>
             laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_firstpulse_killer_list">
            <summary>
             n_set_firstpulse_killer_list(ushort n, ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_firstpulse_killer_list">
            <summary>
             set_firstpulse_killer_list(ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_io_cond_list">
            <summary>
             n_set_io_cond_list(ushort n, ushort mask_1, ushort mask_0, ushort mask_set);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_io_cond_list">
            <summary>
             set_io_cond_list(ushort mask_1, ushort mask_0, ushort mask_set);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_clear_io_cond_list">
            <summary>
             n_clear_io_cond_list(ushort n, ushort mask_1, ushort mask_0, ushort mask_clear);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.clear_io_cond_list">
            <summary>
             clear_io_cond_list(ushort mask_1, ushort mask_0, ushort mask_clear);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_jump_cond">
            <summary>
             n_list_jump_cond(ushort n, ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_jump_cond">
            <summary>
             list_jump_cond(ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_call_cond">
            <summary>
             n_list_call_cond(ushort n, ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_call_cond">
            <summary>
             list_call_cond(ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_save_and_restart_timer">
            <summary>
             n_save_and_restart_timer(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.save_and_restart_timer">
            <summary>
             save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_ext_start_delay_list">
            <summary>
             n_set_ext_start_delay_list(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_ext_start_delay_list">
            <summary>
             set_ext_start_delay_list(short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_trigger">
            <summary>
             n_set_trigger(ushort n, ushort sampleperiod, ushort channel1, ushort channel2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_trigger">
            <summary>
             set_trigger(ushort sampleperiod, ushort signal1, ushort signal2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_arc_rel">
            <summary>
             n_arc_rel(ushort n, short dx, short dy, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.arc_rel">
            <summary>
             arc_rel(short dx, short dy, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_arc_abs">
            <summary>
             n_arc_abs(ushort n, short x, short y, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.arc_abs">
            <summary>
             arc_abs(short x, short y, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.drilling">
            <summary>
             drilling(short pulsewidth, short relencoderdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.regulation">
            <summary>
             regulation();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.flyline">
            <summary>
             flyline(short encoderdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_input_pointer">
            <summary>
             ushort n_get_input_pointer(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_input_pointer">
            <summary>
             ushort get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_rtc">
            <summary>
             select_rtc(ushort cardno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.rtc4_count_cards">
            <summary>
             ushort rtc4_count_cards();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_status">
            <summary>
             n_get_status(ushort n, out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_status">
            <summary>
             get_status(out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_status">
            <summary>
             ushort n_read_status(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_status">
            <summary>
             ushort read_status();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_startstop_info">
            <summary>
             ushort n_get_startstop_info(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_startstop_info">
            <summary>
             ushort get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_marking_info">
            <summary>
             ushort n_get_marking_info(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_marking_info">
            <summary>
             ushort get_marking_info();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_dll_version">
            <summary>
             ushort get_dll_version();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_start_list_1">
            <summary>
             n_set_start_list_1(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_start_list_1">
            <summary>
             set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_start_list_2">
            <summary>
             n_set_start_list_2(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_start_list_2">
            <summary>
             set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_start_list">
            <summary>
             n_set_start_list(ushort n, ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_start_list">
            <summary>
             set_start_list(ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_list_1">
            <summary>
             n_execute_list_1(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_list_1">
            <summary>
             execute_list_1();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_list_2">
            <summary>
             n_execute_list_2(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_list_2">
            <summary>
             execute_list_2();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_list">
            <summary>
             n_execute_list(ushort n, ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_list">
            <summary>
             execute_list(ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_8bit_port">
            <summary>
             n_write_8bit_port(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_8bit_port">
            <summary>
             write_8bit_port(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_io_port">
            <summary>
             n_write_io_port(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_io_port">
            <summary>
             write_io_port(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_auto_change">
            <summary>
             n_auto_change(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.auto_change">
            <summary>
             auto_change();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_auto_change_pos">
            <summary>
             n_auto_change_pos(ushort n, ushort start);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.auto_change_pos">
            <summary>
             auto_change_pos(ushort start);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.aut_change">
            <summary>
             aut_change();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_start_loop">
            <summary>
             n_start_loop(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.start_loop">
            <summary>
             start_loop();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_quit_loop">
            <summary>
             n_quit_loop(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.quit_loop">
            <summary>
             quit_loop();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_list_mode">
            <summary>
             n_set_list_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_list_mode">
            <summary>
             set_list_mode(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_stop_execution">
            <summary>
             n_stop_execution(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.stop_execution">
            <summary>
             stop_execution();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_io_port">
            <summary>
             ushort n_read_io_port(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_io_port">
            <summary>
             ushort read_io_port();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_1">
            <summary>
             n_write_da_1(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_1">
            <summary>
             write_da_1(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_2">
            <summary>
             n_write_da_2(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_2">
            <summary>
             write_da_2(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_max_counts">
            <summary>
             n_set_max_counts(ushort n, int counts);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_max_counts">
            <summary>
             set_max_counts(int counts);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_counts">
            <summary>
             int n_get_counts(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_counts">
            <summary>
             int get_counts();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_matrix">
            <summary>
             n_set_matrix(ushort n, double m11, double m12, double m21, double m22);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_matrix">
            <summary>
             set_matrix(double m11, double m12, double m21, double m22);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_offset">
            <summary>
             n_set_offset(ushort n, short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_offset">
            <summary>
             set_offset(short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_goto_xyz">
            <summary>
             n_goto_xyz(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.goto_xyz">
            <summary>
             goto_xyz(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_goto_xy">
            <summary>
             n_goto_xy(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.goto_xy">
            <summary>
             goto_xy(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_hex_version">
            <summary>
             ushort n_get_hex_version(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_hex_version">
            <summary>
             ushort get_hex_version();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_disable_laser">
            <summary>
             n_disable_laser(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.disable_laser">
            <summary>
             disable_laser();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_enable_laser">
            <summary>
             n_enable_laser(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.enable_laser">
            <summary>
             enable_laser();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_stop_list">
            <summary>
             n_stop_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.stop_list">
            <summary>
             stop_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_restart_list">
            <summary>
             n_restart_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.restart_list">
            <summary>
             restart_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_xyz_pos">
            <summary>
             n_get_xyz_pos(ushort n, out short x, out short y, out short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_xyz_pos">
            <summary>
             get_xyz_pos(out short x, out short y, out short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_xy_pos">
            <summary>
             n_get_xy_pos(ushort n, out short x, out short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_xy_pos">
            <summary>
             get_xy_pos(out short x, out short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_list">
            <summary>
             n_select_list(ushort n, ushort list_2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_list">
            <summary>
             select_list(ushort list_2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_z_out">
            <summary>
             n_z_out(ushort n, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.z_out">
            <summary>
             z_out(short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_firstpulse_killer">
            <summary>
             n_set_firstpulse_killer(ushort n, ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_firstpulse_killer">
            <summary>
             set_firstpulse_killer(ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_standby">
            <summary>
             n_set_standby(ushort n, ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_standby">
            <summary>
             set_standby(ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_on">
            <summary>
             n_laser_signal_on(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_on">
            <summary>
             laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_off">
            <summary>
             n_laser_signal_off(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_off">
            <summary>
             laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_delay_mode">
            <summary>
             n_set_delay_mode(ushort n, ushort varpoly, ushort directmove3d, ushort edgelevel, ushort minjumpdelay, ushort jumplengthlimit);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_delay_mode">
            <summary>
             set_delay_mode(ushort varpoly, ushort directmove3d, ushort edgelevel, ushort minjumpdelay, ushort jumplengthlimit);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_piso_control">
            <summary>
             n_set_piso_control(ushort n, ushort l1, ushort l2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_piso_control">
            <summary>
             set_piso_control(ushort l1, ushort l2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_status">
            <summary>
             n_select_status(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_status">
            <summary>
             select_status(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_encoder">
            <summary>
             n_get_encoder(ushort n, out short zx, out short zy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_encoder">
            <summary>
             get_encoder(out short zx, out short zy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_cor_table">
            <summary>
             n_select_cor_table(ushort n, ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_cor_table">
            <summary>
             select_cor_table(ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_at_pointer">
            <summary>
             n_execute_at_pointer(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_at_pointer">
            <summary>
             execute_at_pointer(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_head_status">
            <summary>
             ushort n_get_head_status(ushort n, ushort head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_head_status">
            <summary>
             ushort get_head_status(ushort head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_simulate_encoder">
            <summary>
             n_simulate_encoder(ushort n, ushort channel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.simulate_encoder">
            <summary>
             simulate_encoder(ushort channel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_hi">
            <summary>
             n_set_hi(ushort n, double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_hi">
            <summary>
             set_hi(double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_release_wait">
            <summary>
             n_release_wait(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.release_wait">
            <summary>
             release_wait();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_wait_status">
            <summary>
             ushort n_get_wait_status(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_wait_status">
            <summary>
             ushort get_wait_status();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_control_mode">
            <summary>
             n_set_control_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_control_mode">
            <summary>
             set_control_mode(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_laser_mode">
            <summary>
             n_set_laser_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_laser_mode">
            <summary>
             set_laser_mode(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_ext_start_delay">
            <summary>
             n_set_ext_start_delay(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_ext_start_delay">
            <summary>
             set_ext_start_delay(short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_home_position">
            <summary>
             n_home_position(ushort n, short xhome, short yhome);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.home_position">
            <summary>
             home_position(short xhome, short yhome);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_rot_center">
            <summary>
             n_set_rot_center(ushort n, int center_x, int center_y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_rot_center">
            <summary>
             set_rot_center(int center_x, int center_y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_dsp_start">
            <summary>
             n_dsp_start(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.dsp_start">
            <summary>
             dsp_start();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_x">
            <summary>
             n_write_da_x(ushort n, ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_x">
            <summary>
             write_da_x(ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_ad_x">
            <summary>
             ushort n_read_ad_x(ushort n, ushort x);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_ad_x">
            <summary>
             ushort read_ad_x(ushort x);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_pixel_ad">
            <summary>
             ushort n_read_pixel_ad(ushort n, ushort pos);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_pixel_ad">
            <summary>
             ushort read_pixel_ad(ushort pos);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_z_distance">
            <summary>
             short n_get_z_distance(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_z_distance">
            <summary>
             short get_z_distance(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_io_status">
            <summary>
             ushort n_get_io_status(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_io_status">
            <summary>
             ushort get_io_status();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_time">
            <summary>
             double n_get_time(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_defocus">
            <summary>
             n_set_defocus(ushort n, short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_defocus">
            <summary>
             set_defocus(short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_softstart_mode">
            <summary>
             n_set_softstart_mode(ushort n, ushort mode, ushort number, ushort restartdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_softstart_mode">
            <summary>
             set_softstart_mode(ushort mode, ushort number, ushort resetdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_softstart_level">
            <summary>
             n_set_softstart_level(ushort n, ushort index, ushort level);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_softstart_level">
            <summary>
             set_softstart_level(ushort index, ushort level);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_control_command">
            <summary>
             n_control_command(ushort n, ushort head, ushort axis, ushort data);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.control_command">
            <summary>
             control_command(ushort head, ushort axis, ushort data);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_cor">
            <summary>
             short load_cor(string filename);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_pro">
            <summary>
             short load_pro(string filename);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_serial_number">
            <summary>
             ushort n_get_serial_number(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_serial_number">
            <summary>
             ushort get_serial_number();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_serial_number_32">
            <summary>
             int n_get_serial_number_32(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_serial_number_32">
            <summary>
             int get_serial_number_32();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_rtc_version">
            <summary>
             ushort n_get_rtc_version(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_rtc_version">
            <summary>
             ushort get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_hi_data">
            <summary>
             get_hi_data(out ushort x1, out ushort x2, out ushort y1, out ushort y2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_auto_cal">
            <summary>
             short n_auto_cal(ushort n, ushort head, ushort command);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.auto_cal">
            <summary>
             short auto_cal(ushort head, ushort command);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_list_space">
            <summary>
             ushort n_get_list_space(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_list_space">
            <summary>
             ushort get_list_space();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.teachin">
            <summary>
             short teachin(string filename, short xin, short yin, short zin, double ll0, out short xout, out short yout, out short zout);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_value">
            <summary>
             short n_get_value(ushort n, ushort signal);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_value">
            <summary>
             short get_value(ushort signal);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_io_bit">
            <summary>
             n_set_io_bit(ushort n, ushort mask1);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_io_bit">
            <summary>
             set_io_bit(ushort mask1);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_clear_io_bit">
            <summary>
             n_clear_io_bit(ushort n, ushort mask0);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.clear_io_bit">
            <summary>
             clear_io_bit(ushort mask0);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_duty_cycle_table">
            <summary>
             set_duty_cycle_table(ushort index, ushort dutycycle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_move_to">
            <summary>
             n_move_to(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.move_to">
            <summary>
             move_to(ushort position);
            </summary>
        </member>
        <member name="T:RTC5Import.RTC5Wrap">
            <summary>
            Notice that the construction of the RTC5Import object or an initial
            call of any RTC5Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.init_rtc5_dll">
            <summary>
             uint init_rtc5_dll();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.free_rtc5_dll">
            <summary>
             void free_rtc5_dll();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rtc5_count_cards">
            <summary>
             uint rtc5_count_cards();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_x">
            <summary>
             void n_set_mcbsp_global_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_y">
            <summary>
             void n_set_mcbsp_global_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_rot">
            <summary>
             void n_set_mcbsp_global_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_matrix">
            <summary>
             void n_set_mcbsp_global_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_x">
            <summary>
             void set_mcbsp_global_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_y">
            <summary>
             void set_mcbsp_global_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_rot">
            <summary>
             void set_mcbsp_global_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_matrix">
            <summary>
             void set_mcbsp_global_matrix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_wobbel_power">
            <summary>
             uint n_load_wobbel_power(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_wobbel_power">
            <summary>
             uint load_wobbel_power(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_x_list">
            <summary>
             void n_set_mcbsp_global_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_y_list">
            <summary>
             void n_set_mcbsp_global_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_rot_list">
            <summary>
             void n_set_mcbsp_global_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_matrix_list">
            <summary>
             void n_set_mcbsp_global_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_x_list">
            <summary>
             void set_mcbsp_global_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_y_list">
            <summary>
             void set_mcbsp_global_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_rot_list">
            <summary>
             void set_mcbsp_global_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_matrix_list">
            <summary>
             void set_mcbsp_global_matrix_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_wobbel_power_list">
            <summary>
             void n_load_wobbel_power_list(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_power_angle">
            <summary>
             void n_set_wobbel_power_angle(uint CardNo, uint Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stretch_pixel_line">
            <summary>
             void n_stretch_pixel_line(uint CardNo, uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_wobbel_power_list">
            <summary>
             void load_wobbel_power_list(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_power_angle">
            <summary>
             void set_wobbel_power_angle(uint Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stretch_pixel_line">
            <summary>
             void stretch_pixel_line(uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel">
            <summary>
             void set_pixel(uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
        <member name="T:RTC6Import.RTC6Wrap">
            <summary>
            Notice that the construction of the RTC6Import object or an initial
            call of any RTC6Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.init_rtc6_dll">
            <summary>
             uint init_rtc6_dll();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.free_rtc6_dll">
            <summary>
             void free_rtc6_dll();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc6_mode">
            <summary>
             void set_rtc6_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_count_cards">
            <summary>
             uint eth_count_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_found_cards">
            <summary>
             uint eth_found_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_max_card">
            <summary>
             uint eth_max_card();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_remove_card">
            <summary>
             int eth_remove_card(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_card_info">
            <summary>
             void eth_get_card_info(uint CardNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_card_info_search">
            <summary>
             void eth_get_card_info_search(uint SearchNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_search_cards_timeout">
            <summary>
             void eth_set_search_cards_timeout(uint TimeOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_search_cards">
            <summary>
             uint eth_search_cards(uint Ip, uint NetMask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_search_cards_range">
            <summary>
             uint eth_search_cards_range(uint StartIp, uint EndIp);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_assign_card_ip">
            <summary>
             int eth_assign_card_ip(uint Ip, uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_assign_card">
            <summary>
             int eth_assign_card(uint SearchNo, uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_convert_string_to_ip">
            <summary>
             uint eth_convert_string_to_ip(string IpString);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_convert_ip_to_string">
            <summary>
             void eth_convert_ip_to_string(uint Ip, uint[] IpString);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_ip">
            <summary>
             uint eth_get_ip(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_ip_search">
            <summary>
             uint eth_get_ip_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_serial_search">
            <summary>
             uint eth_get_serial_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_last_error">
            <summary>
             uint n_eth_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_error">
            <summary>
             uint n_eth_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_error_dump">
            <summary>
             uint n_eth_error_dump(uint CardNo, uint[] Dump);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_static_ip">
            <summary>
             uint n_eth_set_static_ip(uint CardNo, uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_static_ip">
            <summary>
             uint n_eth_get_static_ip(uint CardNo, out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_port_numbers">
            <summary>
             uint n_eth_set_port_numbers(uint CardNo, uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_port_numbers">
            <summary>
             uint n_eth_get_port_numbers(uint CardNo, out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_com_timeouts">
            <summary>
             void n_eth_set_com_timeouts(uint CardNo, uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_com_timeouts">
            <summary>
             void n_eth_get_com_timeouts(uint CardNo, out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_check_connection">
            <summary>
             uint n_eth_check_connection(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_eth_boot_control">
            <summary>
             void n_set_eth_boot_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_boot_timeout">
            <summary>
             void n_eth_boot_timeout(uint CardNo, uint Timeout);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_boot_dcmd">
            <summary>
             void n_eth_boot_dcmd(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_program">
            <summary>
             uint n_store_program(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_last_error">
            <summary>
             uint eth_get_last_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_error">
            <summary>
             uint eth_get_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_error_dump">
            <summary>
             uint eth_error_dump(uint[] Dump);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_static_ip">
            <summary>
             uint eth_set_static_ip(uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_static_ip">
            <summary>
             uint eth_get_static_ip(out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_port_numbers">
            <summary>
             uint eth_set_port_numbers(uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_port_numbers">
            <summary>
             uint eth_get_port_numbers(out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_com_timeouts">
            <summary>
             void eth_set_com_timeouts(uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_com_timeouts">
            <summary>
             void eth_get_com_timeouts(out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_check_connection">
            <summary>
             uint eth_check_connection();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_eth_boot_control">
            <summary>
             void set_eth_boot_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_boot_timeout">
            <summary>
             void eth_boot_timeout(uint Timeout);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_boot_dcmd">
            <summary>
             void eth_boot_dcmd();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_program">
            <summary>
             uint store_program(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_create_dat_file">
            <summary>
             uint n_create_dat_file(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.create_dat_file">
            <summary>
             uint create_dat_file(int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rtc6_count_cards">
            <summary>
             uint rtc6_count_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_card_type">
            <summary>
             uint n_get_card_type(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_bios_version">
            <summary>
             uint n_get_bios_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_card_type">
            <summary>
             uint get_card_type();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_bios_version">
            <summary>
             uint get_bios_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_master_slave_config">
            <summary>
             void n_master_slave_config(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_oct_table_no">
            <summary>
             uint n_load_oct_table_no(uint CardNo, double A, double B, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table_no">
            <summary>
             uint n_load_z_table_no(uint CardNo, double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.master_slave_config">
            <summary>
             void master_slave_config(uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_oct_table_no">
            <summary>
             uint load_oct_table_no(double A, double B, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table_no">
            <summary>
             uint load_z_table_no(double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel_ctrl">
            <summary>
             uint n_list_jump_rel_ctrl(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel_ctrl">
            <summary>
             uint list_jump_rel_ctrl(int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_control_eth">
            <summary>
             void n_time_control_eth(uint CardNo, double PPM);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_control_eth">
            <summary>
             void time_control_eth(double PPM);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_power">
            <summary>
             void n_set_laser_power(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_spot_distance_ctrl">
            <summary>
             void n_spot_distance_ctrl(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_power">
            <summary>
             void set_laser_power(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.spot_distance_ctrl">
            <summary>
             void spot_distance_ctrl(double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_waveform_offset">
            <summary>
             void n_get_waveform_offset(uint CardNo, uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position_4">
            <summary>
             void n_home_position_4(uint CardNo, int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_home_position_4">
            <summary>
             void n_get_home_position_4(uint CardNo, out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_home_4_return_time">
            <summary>
             void n_set_home_4_return_time(uint CardNo, uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_home_4_return_time">
            <summary>
             uint n_get_home_4_return_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_uart_config">
            <summary>
             uint n_uart_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_multi_axis_config">
            <summary>
             void n_multi_axis_config(uint CardNo, uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_init">
            <summary>
             void n_quad_axis_init(uint CardNo, uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_get_status">
            <summary>
             uint n_quad_axis_get_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_get_values">
            <summary>
             void n_quad_axis_get_values(uint CardNo, out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_waveform_offset">
            <summary>
             void get_waveform_offset(uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position_4">
            <summary>
             void home_position_4(int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_home_position_4">
            <summary>
             void get_home_position_4(out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_home_4_return_time">
            <summary>
             void set_home_4_return_time(uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_home_4_return_time">
            <summary>
             uint get_home_4_return_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.uart_config">
            <summary>
             uint uart_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.multi_axis_config">
            <summary>
             void multi_axis_config(uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_init">
            <summary>
             void quad_axis_init(uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_get_status">
            <summary>
             uint quad_axis_get_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_get_values">
            <summary>
             void quad_axis_get_values(out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_timelag_compensation">
            <summary>
             void n_set_timelag_compensation(uint CardNo, uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_timelag_compensation">
            <summary>
             void set_timelag_compensation(uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_scanahead_params">
            <summary>
             uint n_get_scanahead_params(uint CardNo, uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_scanahead_autodelays">
            <summary>
             int n_activate_scanahead_autodelays(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_laser_shifts">
            <summary>
             void n_set_scanahead_laser_shifts(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params">
            <summary>
             void n_set_scanahead_line_params(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_ex">
            <summary>
             void n_set_scanahead_line_params_ex(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_params">
            <summary>
             uint n_set_scanahead_params(uint CardNo, uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_speed_control">
            <summary>
             void n_set_scanahead_speed_control(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_scanahead_params">
            <summary>
             uint get_scanahead_params(uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_scanahead_autodelays">
            <summary>
             int activate_scanahead_autodelays(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_laser_shifts">
            <summary>
             void set_scanahead_laser_shifts(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params">
            <summary>
             void set_scanahead_line_params(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_ex">
            <summary>
             void set_scanahead_line_params_ex(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_params">
            <summary>
             uint set_scanahead_params(uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_speed_control">
            <summary>
             void set_scanahead_speed_control(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_spot_distance">
            <summary>
             void n_spot_distance(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.spot_distance">
            <summary>
             void spot_distance(double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_in_range_mode">
            <summary>
             void n_wait_for_encoder_in_range_mode(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_prediction">
            <summary>
             void n_fly_prediction(uint CardNo, uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_in_range_mode">
            <summary>
             void wait_for_encoder_in_range_mode(int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_prediction">
            <summary>
             void fly_prediction(uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis_v_2">
            <summary>
             void n_micro_vector_quad_axis_v_2(uint CardNo, int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis_v">
            <summary>
             void n_micro_vector_quad_axis_v(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis">
            <summary>
             void n_micro_vector_quad_axis(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_set_position">
            <summary>
             void n_micro_vector_set_position(uint CardNo, int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_multi_axis_flags">
            <summary>
             void n_multi_axis_flags(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel">
            <summary>
             void set_pixel(uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis_v_2">
            <summary>
             void micro_vector_quad_axis_v_2(int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis_v">
            <summary>
             void micro_vector_quad_axis_v(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis">
            <summary>
             void micro_vector_quad_axis(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_set_position">
            <summary>
             void micro_vector_set_position(int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.multi_axis_flags">
            <summary>
             void multi_axis_flags(uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_scanahead_autodelays_list">
            <summary>
             void n_activate_scanahead_autodelays_list(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_laser_shifts_list">
            <summary>
             void n_set_scanahead_laser_shifts_list(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_list">
            <summary>
             void n_set_scanahead_line_params_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_ex_list">
            <summary>
             void n_set_scanahead_line_params_ex_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_scanahead_autodelays_list">
            <summary>
             void activate_scanahead_autodelays_list(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_laser_shifts_list">
            <summary>
             void set_scanahead_laser_shifts_list(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_list">
            <summary>
             void set_scanahead_line_params_list(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_ex_list">
            <summary>
             void set_scanahead_line_params_ex_list(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
    </members>
</doc>
