<?xml version="1.0"?>
<doc>
    <assembly>
        <name>spirallab.sirius.rtc</name>
    </assembly>
    <members>
        <member name="E:SpiralLab.Sirius.AttenuatorVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AttenuatorVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AttenuatorVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AttenuatorVirtual.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.AttenuatorVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AttenuatorVirtual.CtlMoveRatio(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AttenuatorVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.AltechnaWattPilot">
            <summary>
            ALTECHNA WATT PILOT 감쇄기
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.AltechnaWattPilot.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AltechnaWattPilot.Tag">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.AltechnaWattPilot.degreePerStep">
            std 1 step = 0.0115 deg
            big 1 step = 0.005 deg
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.#ctor(System.Int32,System.String,System.UInt32)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
            <param name="comPort"></param>
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.GetStepPosFromRatio(System.Single)">
            <summary>
            비율에 따른 스텝 모터 계산
            malus' law 를 사용함
            </summary>
            <param name="ratio"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.AngleToSteps(System.Single)">
            <summary>
            각도를 모터 위치(스텝)로 변환
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.CtlMoveRatio(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.CtlMoveStep(System.Int32,System.Boolean)">
            <summary>
            구동 (스텝값)
            </summary>
            <param name="steps">스텝 값</param>
            <param name="isAbsoulte">절대(1)/상대(0)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.CtlMoveAngle(System.Single,System.Boolean)">
            <summary>
            구동 (각도)
            </summary>
            <param name="angle">각도</param>
            <param name="isAbsoulte">절대(1)/상대(0)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AltechnaWattPilot.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.SyncRoot">
            <summary>
            동기화 객체
            데이타 처리시 크로스 쓰레드 방지용으로 사용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.IsReady">
            <summary>
            준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IAttenuator.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IAttenuator.Initialize">
            <summary>
            초기화 
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IAttenuator.CtlMoveRatio(System.Single)">
            <summary>
            구동
            </summary>
            <param name="ratio">비율 (0~1)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IAttenuator.CtlReset">
            <summary>
            에러 리셋
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.ICompensator`1">
            <summary>
            Compensator 인터페이스
            <para>입력값에 대해 변환된 출력값을 연산해주는 기능 (사용자 보간 알고리즘 직접 구현)</para>
            </summary>
            <typeparam name="T">제네릭 타입</typeparam>
        </member>
        <member name="P:SpiralLab.Sirius.ICompensator`1.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICompensator`1.Index">
            <summary>
            식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICompensator`1.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICompensator`1.Interpolate(`0,`0@)">
            <summary>
            보간 연산하기
            </summary>
            <param name="input">입력값</param>
            <param name="output">보간된 출력값</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICompensator`1.Reset">
            <summary>
            초기화
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CompensatorDefault`1">
            <summary>
            CompensatorDefault 기본 버전
            <para>입력값과 동일한 출력(1:1) 제공</para>
            </summary>
            <typeparam name="T">제네릭 타입</typeparam>
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.CompensatorDefault`1.FileName">
            <summary>
            파일 이름
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CompensatorDefault`1.prev">
            <summary>
            이전 출력값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별자</param>
            <param name="name">이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.Interpolate(`0,`0@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.CompensatorDefault`1.Reset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerEvent">
            <summary>
            트리거 발생 이벤트 핸들러 
            </summary>
            <param name="dInput">디지털 입력 객체</param>
            <param name="trigger">트리거 발생 객체</param>
        </member>
        <member name="T:SpiralLab.Sirius.IDInputTriggers">
            <summary>
            디지털 입력 트리거 집합 인터페이스
            복수개의 디지털 입력 트리거를 모아 관리하는 객체
            개별 입력 상태에 따른 트리거 발생 여부 확인 후 이벤트 핸들러 처리
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IDInputTriggers.OnTriggered">
            <summary>
            트리거 이벤트 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTriggers.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTriggers.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTriggers.DInput">
            <summary>
            대상 디지털 입력 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTriggers.HoldingTime">
            <summary>
            트리거 발생 유지 시간 (holding time) (msec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTriggers.Items">
            <summary>
            트리거 리스트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTriggers.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDInputTriggers.Add(SpiralLab.Sirius.IDInputTrigger)">
            <summary>
            트리거 추가
            </summary>
            <param name="dInputTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInputTriggers.Remove(SpiralLab.Sirius.IDInputTrigger)">
            <summary>
            트리거 제거
            </summary>
            <param name="dInputTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInputTriggers.Remove(System.Int32)">
            <summary>
            트리거 제거
            </summary>
            <param name="no"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInputTriggers.Update">
            <summary>
            입력 상태에 따른 트리거 발생 여부 확인
            트리거 발생시 이벤트 핸들러 호출 처리
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggersDefault">
            <summary>
            디지털 입력 트리거 집합 (기본 버전)
            복수개의 디지털 입력 트리거를 모아 관리하는 객체
            개별 입력 상태에 따른 트리거 발생 여부 확인 후 이벤트 핸들러 처리
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.DInputTriggersDefault.OnTriggered">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.DInput">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.HoldingTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.Items">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggersDefault.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggersDefault.#ctor(System.Int32,System.String,SpiralLab.Sirius.IDInput,System.Int64)">
            <summary>
            생성자
            </summary>
            <param name="index">식별 번호</param>
            <param name="name">이름</param>
            <param name="dInput">대상 디지털 입력 객체</param>
            <param name="msec">트리거 발생 유지 시간 (holding time) (msec)</param>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggersDefault.Add(SpiralLab.Sirius.IDInputTrigger)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggersDefault.Remove(SpiralLab.Sirius.IDInputTrigger)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggersDefault.Remove(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggersDefault.Update">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggersDefault.NotifyTriggered(SpiralLab.Sirius.IDInput,SpiralLab.Sirius.IDInputTrigger)">
            <summary>
            트리거 통지 이벤트
            </summary>
            <param name="dInput"></param>
            <param name="dInputTrigger"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDInput2Pin">
            <summary>
            디지털 입력 인터페이스    
            RTC5/6 제품의 레이저 포트 2핀 출력 2비트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput2Pin.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput2Pin.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput2Pin.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput2Pin.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInput2Pin.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.#ctor(SpiralLab.Sirius.IRtc,System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsAOn``1(``0)">
            <summary>
            A On 상태
            </summary>
            <typeparam name="T">열거형 타입</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsAOn(System.Int32)">
            <summary>
            A On 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsAOff``1(``0)">
            <summary>
            해당 접점 입력 AOff 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsAOff(System.Int32)">
            <summary>
            해당 접점 입력 AOff 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsBOff``1(``0)">
            <summary>
            해당 접점 입력 BOn 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsBOff(System.Int32)">
            <summary>
            해당 접점 입력 BOn 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsBOn``1(``0)">
            <summary>
            B On 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.IsBOn(System.Int32)">
            <summary>
            B On 상태
            </summary>
            <param name="no"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널값 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInput2Pin.Update">
            <summary>
            입력 값들을 채널 메모리로 반영 (업데이트)
            하드웨어 입력 상태 -> 메모리
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDOutput2Pin">
            <summary>
            디지털 출력 인터페이스    
            RTC5/6 제품의 레이저 포트 2핀 출력 2 비트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutput2Pin.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutput2Pin.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutput2Pin.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutput2Pin.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutput2Pin.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.#ctor(SpiralLab.Sirius.IRtc,System.Int32,System.String)">
            <summary>
            생서자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.OutOn``1(``0)">
            <summary>
            출력 켜기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.OutOn(System.Int32)">
            <summary>
            출력 켜기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.OutOff``1(``0)">
            <summary>
            출력 끄기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.OutOff(System.Int32)">
            <summary>
            출력 끄기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.IsOutOn``1(``0)">
            <summary>
            출력 켜짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.IsOutOn(System.Int32)">
            <summary>
            출력 켜짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.IsOutOff``1(``0)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.IsOutOff(System.Int32)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.SetChannel(System.Int32,System.UInt16)">
            <summary>
            16비트 채널 설정
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.Update">
            <summary>
            출력 채널값을 모두 출력에 반영
            채널 메모리 -> 하드웨어 출력 
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutput2Pin.ReverseUpdate">
            <summary>
            출력 채널 상태를 내부 채널로 역반영
            하드웨어 출력 -> 채널 메모리 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AdvancedOptoWaveAOPico">
            <summary>
            레이저 소스 (Advanced OptoWave AOPico)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.AdvancedOptoWaveAOPico.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.MaxPowerWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.Rtc">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsPowerControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.PowerControlMethod">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsShutterControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsGuideControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.IsShutterOpen">
            <summary>
            셔터 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.PulseRepRate">
            <summary>
            주파수 Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.PulsedInBurstMode">
            <summary>
            Pulses in Burst Mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.PowerFactor">
            <summary>
            파워 비율값 
            0~100 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.TargetCrystal1Temperature">
            <summary>
            크리스털1 목표 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.TargetCrystal2Temperature">
            <summary>
            크리스털2 목표 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.TargetCrystal3Temperature">
            <summary>
            크리스털3 목표 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.TargetCrystal4Temperature">
            <summary>
            크리스털4 목표 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ActualCrystal1Temperature">
            <summary>
            크리스털 1 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ActualCrystal2Temperature">
            <summary>
            크리스털 2 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ActualCrystal3Temperature">
            <summary>
            크리스털 3 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ActualCrystal4Temperature">
            <summary>
            크리스털 4 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ActualLaserHeadTemperature">
            <summary>
            레이저 헤드 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.EnvironmentalTemperature">
            <summary>
            환경 온도 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes">
            <summary>
            알람 코드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.Normal">
            <summary>
            알람 없는 상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.Diode1TemperatureHigh">
            <summary>
            higher 35
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.Diode1TemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.LaserHeadTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.LaserHeadTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.EnvironmentalTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.EnvironmentalTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCodes.InterlockOpen">
            <summary>
            double check, lasting longer than 100ms
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.AlarmCode">
            <summary>
            현재 알람코드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.CtlPower(System.Single,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveAOPico.ListPower(System.Single,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.CoherentDiamondCSeries">
            <summary>
            레이저 소스 (코히런트 Diamond C Series)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.CoherentDiamondCSeries.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsLaserOk">
            <summary>
            PIN3 Laser OK
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsTemperatureOk">
            <summary>
            PIN4 Temperature OK
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsVoltageOk">
            <summary>
            PIN5 Voltage OK
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondCSeries.IsControlEnable">
            <summary>
            PIN7 Control Enable
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.#ctor(System.Int32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondCSeries.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (시리얼 통신으로 처리됨)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CoherentDiamondJSeries">
            <summary>
            레이저 소스 (코히런트 Diamond J Series)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.CoherentDiamondJSeries.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Add(SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Remove(SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Contains(SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte1.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Add(SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Remove(SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Contains(SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.StatusByte2.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentDiamondJSeries.IpAddress">
            <summary>
            통신 IP 주소
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.#ctor(System.Int32,System.String,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="ipAddress">IP 주소</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentDiamondJSeries.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (시리얼 통신으로 처리됨)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPGYLPN">
            <summary>
            레이저 소스 (IPG YLPN)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPGYLPN.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.DeviceStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceStatus.Add(SpiralLab.Sirius.IPGYLPN.DeviceStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceStatus.Remove(SpiralLab.Sirius.IPGYLPN.DeviceStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceStatus.Contains(SpiralLab.Sirius.IPGYLPN.DeviceStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.DeviceStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Status">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.OperationMode.Bit.EmissionModulationControlByDB25">
            <summary>
            RS-232 only
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.OperationMode.Bit.HighContrast">
            <summary>
            always 1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.OperationMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.OperationMode.Add(SpiralLab.Sirius.IPGYLPN.OperationMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.OperationMode.Remove(SpiralLab.Sirius.IPGYLPN.OperationMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.OperationMode.Contains(SpiralLab.Sirius.IPGYLPN.OperationMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.OperationMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.OperationMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.OpMode">
            <summary>
            OP 모드 (32비트)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Options.Bit.ParallelIOControlInterface">
            <summary>
            always 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Options.Bit.RS232ControlInterface">
            <summary>
            always 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Options.Bit.HC">
            <summary>
            always 1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Options.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.Options.Add(SpiralLab.Sirius.IPGYLPN.Options.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.Options.Remove(SpiralLab.Sirius.IPGYLPN.Options.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.Options.Contains(SpiralLab.Sirius.IPGYLPN.Options.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.Options.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Options.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.Option">
            <summary>
            옵션 (32비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Add(SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Remove(SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Contains(SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.DeviceExtendedStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.ExtendedStatus">
            <summary>
            디바이스 확장 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Add(SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Remove(SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Contains(SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.ToUInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.ParallelIOInterface.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.DigitalInterface">
            <summary>
             디지털 인터페이스 DB-25 핀의 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.PulseRepRateMin">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.PulseRepRateMax">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsTimedOut">
            <summary>
            현재 설정된 알람코드
            Status 속성을 통해 접근 !!!
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPN.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.DeviceStatus">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.DeviceTemperature">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.ParallelIOInterfaceStatus">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is float in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.NorminalPRR">
            <summary>
            float .1 KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Pulse_Repetition_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two floats separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.MainSupplyVoltage">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.HouseKeepingSupplyVoltage">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.PRR">
            <summary>
            float .1 KHz
            Read back operating pulse repetition rate in [kHz] set by command 28
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.OperatingWatt">
            <summary>
            float .1 W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.OperatingPower">
            <summary>
             float .1 %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.OperatingPulseEnergy">
            <summary>
            float .2 mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.PRRMonitor">
            <summary>
            float .1 KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.MinMaxPRR">
            <summary>
            Read back minimum and maximum operating PRRs in extended range, Extended PRR should be activated, otherwise answer is N
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.TemperatureRange">
            <summary>
            float .1 C
            Example response: 58;0.0;50.0
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Queries.AlarmCounters">
            <summary>
            Read counter for alarms
            The command parameter specifies the counter that will be read
            1 – alarm counter of the MAIN power supply alarm
            2 – alarm counter of the HK alarm
            3 – alarm counter of the System alarm
            4 – alarm counter of the Temperature alarm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.PRR">
            <summary>
            float .1 KHz
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Operating_Power">
            <summary>
            float .1 %
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.EE_On">
            <summary>
            Switch ON Emission Enable
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.EE_Off">
            <summary>
            Switch Off Emission Enable
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPN.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPN.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.InnguGraceXSeries">
            <summary>
            INNGU LASER / Grace X Series 레이저 소스
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.InnguGraceXSeries.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsShutterOpen">
            <summary>
            Shutter 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsGuideOn">
            <summary>
            가이드 빔(Guide) On/Off 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsDiodeOn">
            <summary>
            다이오드 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.DiodeCurrent">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.PulseRepRate">
            <summary>
            주파수 Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.IsQSwitchOn">
            <summary>
            QSWITCH 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.DiodeTemperature">
            <summary>
            다이오드 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.Temp1Temperature">
            <summary>
            TEMP1 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.Temp2Temperature">
            <summary>
            TEMP2 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.EnvTemperature">
            <summary>
            Env 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.LaserTemperature">
            <summary>
            레이저 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Add(SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Remove(SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Contains(SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.WarningByte.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.WarningByte.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.InnguGraceXSeries.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.#ctor(System.Int32,System.String,System.Single,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
            <param name="comPort">통신 포트</param>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius.InnguGraceXSeries.HoldingRegister.SetDiodeCurrent">
            <summary>
            0~15A
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.InnguGraceXSeries.HoldingRegister.SetPRF">
            <summary>
            10~100000
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.InnguGraceXSeries.HoldingRegister.SetPWM">
            <summary>
            20~380
            20 : 100 %
            380 : 10%
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경 (컨트롤 명령)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.InnguGraceXSeries.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
             <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPGYLPULPN">
            <summary>
            레이저 소스 (IPG YLP ULPN)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPGYLPULPN.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.EmissionOn">
            <summary>
            0 : Emission Off
            1 : Emission On
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.ExternalTrigger">
            <summary>
            0 : Internal Trigger 
            1 : External Trigger
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.WarningUp">
            <summary>
            0 : Laser is not warm up mode
            1 : Laser is in warm up mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.ModuleStartUpComplete">
            <summary>
            0 : Module is in startup mode
            1 : Module startup is complete
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.EnabledBoosterPowerSupply">
            <summary>
            0 : Booster power supply is disabled
            1 : Booster power supply is enabled
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.InternalModulation">
            <summary>
            0 : External modulation
            1 : Internal modulation
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.InternalAanalogControl">
            <summary>
            0 : External analog control is selected
            1 : Internal analog control is selected
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.PowerSupply24VOutOfRange">
            <summary>
            0: OK
            1 : 24V PS Out of range
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.LaserIsOverheated">
            <summary>
            0 : laser Temp ok
            1 : laser Overheated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.HighBackReflectionLevel">
            <summary>
            0 : backreflection level is OK
            1 : high backreflection level detected
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit.HeadIsOverheated">
            <summary>
            0 : head temperature is OK
            1 : head overheated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Add(SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Remove(SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Contains(SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.DeviceStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.Status">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.TriggerModes.External">
            <summary>
            외부 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.TriggerModes.Internal">
            <summary>
            내부 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.PulseRepRateInt">
            <summary>
            Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.PulseRepRateExt">
            <summary>
            Hz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.ModulationModes.External">
            <summary>
            외부 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.ModulationModes.Internal">
            <summary>
            내부 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.PowerControlModes.External">
            <summary>
            외부 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.PowerControlModes.Internal">
            <summary>
            내부 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.EmissionControlModes.External">
            <summary>
            외부 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPULPN.EmissionControlModes.Internal">
            <summary>
            내부 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.IsEmissionOn">
            <summary>
            Emission 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPULPN.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPULPN.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
             <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PhotonicsIndustryRGHAIO">
            <summary>
            레이저 소스 (Photonics Industry RGH AIO)    
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            Seed/Amp1 의 2중 셔터지원으로 이 속성은 false 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsSeedShutterOpen">
            <summary>
            Shutter 온오프 (Seed)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsAmp1ShutterOpen">
            <summary>
            Shutter 온오프 (Amp1)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsSeedLDDEnable">
            <summary>
            Seed LDD 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsAmp1LDDEnable">
            <summary>
            Amp1 LDD 온오프 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SetSeedCurrent">
            <summary>
            Seed 다이오드 커런트 (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SetAmp1Current">
            <summary>
            Amp1 다이오드 커런트 (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.MaxSeedCurrent">
            <summary>
            Seed 최대 다이오드 커런트 (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.MaxAmp1Current">
            <summary>
            AMp1 최대 다이오드 커런트 (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.ActualSeedCurrent">
            <summary>
            Seed 실제 다이오드 커런트 (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.ActualAmp1Current">
            <summary>
            Amp1 실제 다이오드 커런트 (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SeedDiodeVoltage">
            <summary>
            Seed 다이오드 전압 (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Amp1DiodeVoltage">
            <summary>
            Amp1 다이오드 전압 (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.PulseRepRate">
            <summary>
            Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.PECLevel">
            <summary>
            PEC Level (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SeedDiodeActualTemperature">
            <summary>
            Seed Diode TEC (degree)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.AmpDiodeActualTemperature">
            <summary>
            Amp Diode (degree)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SeedLDDHours">
            <summary>
            Seed LDD 사용 시간 (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Amp1LDDHours">
            <summary>
            Amp1 LDD 사용 시간 (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.PowerWatt">
            <summary>
            Power Monitoring (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Flow">
            <summary>
            Flow (L/min)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsSESAMMotorMoving">
            <summary>
            SESAM Motor Status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SESAMMotorIndexPosition">
            <summary>
            SESAM Motor Index Position
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.SESAMPositionHours">
            <summary>
            SESAM Position Hours
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsPRFSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsGateSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsPECSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.IsGuideOn">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryRGHAIO.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.SpectraPhysicsHippo">
            <summary>
            레이저 소스 (SpectraPhysics Hippo)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.SpectraPhysicsHippo.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.StatusCodes">
            <summary>
            8개의 시스템 상태 이력 (첫번째가 가장 최근 이력)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.IsTimedOut">
            <summary>
            현재 설정된 알람코드
            Status 속성을 통해 접근 !!!
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsHippo.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsHippo.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.SpectraPhysicsTalon">
            <summary>
            레이저 소스 (SpectraPhysics Talon)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.SpectraPhysicsTalon.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsShutterOpen">
            <summary>
            Shutter 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.TriggerEdge">
            <summary>
            트리거 형태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.EPRF">
            <summary>
            For example, if the energy at 100 kHz is 100 μJ per pulse and EPRF is chosen to be 100 kHz, 
            then at any triggering rate below EPRF the energy per pulse is fixed at 100 μJ.
            As an example, if EPRF is set to 100 kHz and Q is set to 50 kHz, 
            the pulses emitted by the laser have a repetition rate of 50 kHz, but a pulse width, energy, 
            and stability equivalent to the 100 kHz operation of the laser.
            
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Add(SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Remove(SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Contains(SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.TalonStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.StatusByte">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SpectraPhysicsTalon.AlarmCodes">
            <summary>
            알람 코드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsTimedOut">
            <summary>
            현재 설정된 알람코드
            Status 속성을 통해 접근 !!!
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SpectraPhysicsTalon.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SpectraPhysicsTalon.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorFastechPlusEArg">
            <summary>
            Motor Fastech Plus E Arg 인자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorFastechPlusE">
            <summary>
            Fastech Plus E 
            단축용
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorFastechPlusE.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.TargetPosition">
            <summary>
            위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsHomeSearching">
            <summary>
            원점 검색중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsInPos">
            <summary>
            명령 지점 도착 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsServoOn">
            <summary>
            서보 온 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsCwSenOn">
            <summary>
            CW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsCCwSenOn">
            <summary>
            CCW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.IsOrgSenOn">
            <summary>
            ORG 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.PulsePerMm">
            <summary>
            모터 스케일 설정 : Pulses/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.MaxVelocity">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.ConvertMmToPulse(System.Single)">
            <summary>
            mm -> pulse
            </summary>
            <param name="mm"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.ConvertPulseToMm(System.Single)">
            <summary>
            pulse -> mm
            </summary>
            <param name="pulse"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.MotorFastechPlusE.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.#ctor(System.Int32,System.String,System.Int32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
            <param name="boardId">보드 번호 (0, ... )</param>
            <param name="ipAddress">IP 주소</param>
            <param name="pulsePerMm">펄스와 사용자 단위(mm)간 비율값</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlResetCount(System.Single)">
            <summary>
            엔코더 카운터 리셋
            </summary>
            <param name="position">오프셋 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlServo(System.Boolean)">
            <summary>
            서보 온 오프
            </summary>
            <param name="onOff"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치로 이동
            </summary>
            <param name="position">위치 (units)</param>
            <param name="vel">속도(units/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            </summary>
            <param name="distance">거리값(units)</param>
            <param name="vel">속도(units/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (units/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorFastechPlusE.Update">
            <summary>
            update motor status 
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IMotorArg.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IJogControl">
            <summary>
            레이저 소스 IShutter 인터페이스 (셔터 제어를 지원하는 레이저 소스의 경우 상속 구현)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IJogControl.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (mm/s)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPowerMapArg">
            <summary>
            파워맵 구동 인자 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.Categories">
            <summary>
            목표 카테고리 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.Steps">
            <summary>
            단계
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.PowerMeter">
            <summary>
            IPowerMeter 인터페이스 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.Rtc">
            <summary>
            IRtc 인터페이스 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.Laser">
            <summary>
            ILaser 인터페이스 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.Location">
            <summary>
            스캐너 출사 위치 (기본값 : 0,0 원점)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.HoldTimeMsec">
            <summary>
            측정을 위한 레이저 출사 시간 (msec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.ThresholdWatt">
            <summary>
            해당 출력 차이(W) 보다 클 경우 에러 처리 (0 일 경우 비교 처리 없음)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMapArg.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMapStartDefaultArg">
            <summary>
            파워맵 구동 인자 (기본 버전)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.Categories">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.Steps">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.PowerMeter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.Rtc">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.Laser">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.Location">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.HoldTimeMsec">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.ThresholdWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapStartDefaultArg.Tag">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.IPowerVerifyArg">
            <summary>
            파워맵 검증 구동 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.CategoryAndTargetWatts">
            <summary>
            목표 카테고리, 출력 파워(W), 측정 파워(W) 튜플(Typle) 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.PowerMeter">
            <summary>
            IPowerMeter 인터페이스 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.Rtc">
            <summary>
            IRtc 인터페이스 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.Laser">
            <summary>
            ILaser 인터페이스 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.Location">
            <summary>
            스캐너 출사시 이동 위치 (기본값: 0,0 원점)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.HoldTimeMsec">
            <summary>
            출사 유지시간 (msec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.ThresholdWatt">
            <summary>
            오차로 처리할 출력값 범위 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerVerifyArg.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMapVerifyDefaultArg">
            <summary>
            파워맵 검증 구동 (기본버전)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.CategoryAndTargetWatts">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.PowerMeter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.Rtc">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.Laser">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.Location">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.HoldTimeMsec">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.ThresholdWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapVerifyDefaultArg.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapVerifyDefaultArg.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMapSerializer">
            <summary>
            파워맵 시리얼라이저
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapSerializer.Open(SpiralLab.Sirius.IPowerMap,System.String)">
            <summary>
            파워맵 파일 열기
            </summary>
            <param name="powerMap">IPowerMap 인스턴스</param>
            <param name="mapFileName">파일이름</param>
            <returns>IPowerMap 인스턴스</returns>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapSerializer.Save(SpiralLab.Sirius.IPowerMap,System.String)">
            <summary>
            파워맵 파일 저장
            </summary>
            <param name="powerMap">저장할 IPowerMap 인스턴스</param>
            <param name="mapFileName">파일이름 (powermap\*.map)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg">
            <summary>
            파워 계측 전달 인자
            Thorlab PM100D, PM100A, PM100USB, PM200, PM400 전용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.XName">
            <summary>
            파라메터 X 이름
            watt(W), frequency(Hz),  current(A), pulse width(um), voltage(V), duty width(%) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.XValue">
            <summary>
            파라메터 X 값 
            watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.StartTime">
            <summary>
            측정 시작 시간
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.EndTime">
            <summary>
            측정 완료 시간
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.DateTime">
            <summary>
            측정 현재 시간
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.PowerCategory">
            <summary>
            카테고리/시리즈 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.PowerWatt">
            <summary>
            측정된 파워값 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.Empty">
            <summary>
            생성 초기값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMaxArg.#ctor(System.String,System.Single,System.String)">
            <summary>
            생성자
            </summary>
            <param name="xName">파라메터 X 이름</param>
            <param name="xValue">파러메터 X 값 / watt(W), current(A), pulse width(um), voltage(V), duty width(%)</param>
            <param name="powerCategory">파워 카테고리 (Series 이름)</param>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterCoherentPowerMax">
            <summary>
            Coherent 파워메터 PowerMax USB/RS 시리즈
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterCoherentPowerMax.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterCoherentPowerMax.OnStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterCoherentPowerMax.OnMeasured">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterCoherentPowerMax.OnStopped">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterCoherentPowerMax.OnFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterCoherentPowerMax.OnCleared">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.SamplingRateHz">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.PowerMeasureArg">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.PowerScaler">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Data">
            <summary>
            버퍼 큐
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterCoherentPowerMax.MaxBufferCounts">
            <summary>
            측정 데이타 큐의 버퍼 최대 크기(개수)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.#ctor(System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="maxBufferCounts">버퍼의 최대 크기</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.#ctor(System.Int32,System.String,System.Int32,System.Single,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">통신 포트 번호</param>
            <param name="samplingRateHz">측정 주기</param>
            <param name="maxBufferCounts">최대 버퍼 크기(측정 데이타 저장용 버퍼 크기)</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Dispose">
            <summary>
            자원해제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.CtlStart">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.NotifyMeasure(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.NotifyStarted(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.NotifyStopped(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.NotifyFinished(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterCoherentPowerMax.NotifyCleared(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.PowerScaler">
            <summary>
            파워값에 대한 스케일러
            출력값 = ( PrevFactor * 이전값 + 0.2 * 현재값 ) * 비율
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerScaler.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerScaler.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerScaler.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerScaler.PreviousFactor">
            <summary>
            이전값 비율
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerScaler.InputFactor">
            <summary>
            입력값 비율
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerScaler.CurrentFactor">
            <summary>
            현재값 비율
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerScaler.prevOutput">
            <summary>
            이전 출력값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerScaler.#ctor(System.Int32,System.String,System.Single,System.Single,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="previousFactor">이전값 스케일 비율</param>
            <param name="currentFactor">현재값 스케일 비율</param>
            <param name="inputFactor">입력 스케일 비율</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerScaler.Interpolate(System.Single,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerScaler.Reset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.IPowerMeterArg">
            <summary>
            파워 계측에 필요한 설정값및 계측결과 전달용 인자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeterArg.XName">
            <summary>
            파라메터 X 이름
            watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeterArg.XValue">
            <summary>
            파라메터 X 값 
            watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeterArg.PowerCategory">
            <summary>
            카테고리/시리즈 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeterArg.PowerWatt">
            <summary>
            측정된 파워값 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeterArg.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorACSArg">
            <summary>
            Motor ACS Arg 인자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorACS">
            <summary>
            Motor ACS
            ACS 모션 단축용
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorACS.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.TargetPosition">
            <summary>
            절대 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsServoAlarm">
            <summary>
            서보 알람 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsHomeSearching">
            <summary>
            원점 검색중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsInPos">
            <summary>
            명령 지점 도착 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsServoOn">
            <summary>
            서보 온오프 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsCwSenOn">
            <summary>
            CW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsCCwSenOn">
            <summary>
            CCW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.IsOrgSenOn">
            <summary>
            ORG 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.MaxVelocity">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorACS.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.#ctor(System.Int32,System.String,ACS.SPiiPlusNET.Api)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
            <param name="api"> ACS.SPiiPlusNET.Api 인스턴스</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlServo(System.Boolean)">
            <summary>
            서보 온오프
            </summary>
            <param name="onOff"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlResetCount(System.Single)">
            <summary>
            엔코더 카운터 리셋
            </summary>
            <param name="position">오프셋 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치로 이동
            </summary>
            <param name="position">위치 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            </summary>
            <param name="distance">거리값(mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorACS.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorESP301Arg">
            <summary>
            Motor ESP301 Arg 인자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorESP301">
            <summary>
            모터 / ESP301 단축
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorESP301.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.TargetPosition">
            <summary>
            위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.DeltaPosition">
            <summary>
            상대 이동량 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.TargetPositionVelocity">
            <summary>
            속도 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.Jog">
            <summary>
            조그 방향
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsStop">
            <summary>
            모션 정지
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsServoAlarm">
            <summary>
            모터 서보 알람
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsInPos">
            <summary>
            명령 지점 도착 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsServoOn">
            <summary>
            서보 온 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsCwSenOn">
            <summary>
            CW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsCCwSenOn">
            <summary>
            CCW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsAmpFault">
            <summary>
            앰프 에러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.IsOrgSenOn">
            <summary>
            ORG 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.MaxVelocity">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.TerminalCommand">
            <summary>
            터미널 명령
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.TerminalResponse">
            <summary>
            터미널 응답
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorESP301.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.#ctor(System.Int32,System.String,CommandInterfaceESP301.ESP301)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
            <param name="esp">ESP 제어 인스턴스</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlResetCount(System.Single)">
            <summary>
            엔코더 카운터 리셋
            (미지원. Define Home 기능 사용 추천)
            </summary>
            <param name="position">오프셋 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlServo(System.Boolean)">
            <summary>
            서보 온오프
            </summary>
            <param name="onOff">온오프</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            move absolutely
            절대 위치 구동
            </summary>
            <param name="position">위치</param>
            <param name="vel">속도</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlMoveRel(System.Single,System.Single)">
            <summary>
            move relatively
            상대 위치 구동
            </summary>
            <param name="distance">거리</param>
            <param name="vel">속도</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorESP301.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorsDefault">
            <summary>
            모터 Default 버전
            다축용
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorsDefault.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.No">
            <summary>
            스테이지 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorsDefault.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.#ctor(System.Int32,System.String,SpiralLab.Sirius.IMotor[])">
            <summary>
            생성자
            </summary>
            <param name="no">스테이지 번호</param>
            <param name="name">축 이름</param>
            <param name="motors">축 목록 </param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.CtlMoveAbs(SpiralLab.Sirius.PosVel[])">
            <summary>
            절대 위치 이동 (다축)
            </summary>
            <param name="posVel">위치값 (mm), 속도 (mm/s) 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.CtlMoveAbs(System.Int32,SpiralLab.Sirius.PosVel)">
            <summary>
            절대 위치 이동 (단축)
            </summary>
            <param name="index">모터 배열 인덱스 번호</param>
            <param name="posVel">위치값 (mm), 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.CtlMoveRel(SpiralLab.Sirius.PosVel)">
            <summary>
            상대 위치 이동 (다축)
            </summary>
            <param name="distVel">위치값 (mm), 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.CtlMoveRel(System.Int32,SpiralLab.Sirius.PosVel)">
            <summary>
            상대 위치 이동 (단축)
            </summary>
            <param name="index">모터 배열 인덱스 번호</param>
            <param name="distVel">위치값 (mm), 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorsDefault.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorHelper">
            <summary>
            3rd Party 모터/IO 제품에 대한 헬퍼 클래스
            <para>아래 제품군을 사용시에는 프로그램 초기화 시작시점에 생성(Create)하고, 종료시점에 자원해제(Dispose)를 실시한다</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ESP301Create(System.Int32,System.Int32)">
            <summary>
            NewPort/MKS ESP301 모션 제어기 생성
            </summary>
            <param name="comPort"></param>
            <param name="baduRate"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ESP301Write(CommandInterfaceESP301.ESP301,System.String,System.String@)">
            <summary>
            NewPort/MKS ESP301에 터미널 메시지 송수신 하기
            </summary>
            <param name="esp">ESP301 인스턴스</param>
            <param name="command">명령</param>
            <param name="response">응답</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ESP301RunProgram(CommandInterfaceESP301.ESP301,System.Int32,System.Int32)">
            <summary>
            프로그램 실행
            </summary>
            <param name="esp">ESP301 인스턴스</param>
            <param name="program">프로그램</param>
            <param name="number">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ESP301Dispose(CommandInterfaceESP301.ESP301@)">
            <summary>
            NewPort/MKS ESP301 모션 제어기 자원해재
            </summary>
            <param name="esp"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ACSCreateTCP(System.String,System.UInt16)">
            <summary>
            ACS SPiiPlus 인스턴스 객체 생성
            </summary>
            <param name="ipAddress">IP주소</param>
            <param name="port">포트번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ACSTransaction(ACS.SPiiPlusNET.Api,System.String,System.String@)">
            <summary>
            ACS Transaction 송수신
            </summary>
            <param name="api"></param>
            <param name="cmd"></param>
            <param name="recv"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ACSDispose(ACS.SPiiPlusNET.Api@)">
            <summary>
             ACS SPiiPlus 인스턴스 객체 자원 해제
            </summary>
            <param name="api"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.AJINEXTEKCreate">
            <summary>
            아진엑스텍 AXL 라이브러리 초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.AJINEXTEKLoadParameterFile(System.String)">
            <summary>
            아진엑스텍 설정파일 로드
            <para>전체 축의 서보 오프상태 확인 후 사용</para>
            </summary>
            <param name="motorParameterFileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.AJINEXTEKAxisCounts">
            <summary>
            연결된 모터축 총 개수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.AJINTXTEKModuleCounts">
            <summary>
            연결된 채널(모듈)의 총 개수 얻기
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.AJINEXTEKDispose">
            <summary>
            아진엑스텍 AXL 라이브러리 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ADLINKDASKCreate(System.UInt16,System.UInt16)">
            <summary>
            ADLINK DASK 객체 생성
            </summary>
            <param name="cardType"></param>
            <param name="cardNumber"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ADLINKDASKErrorMsg(System.Int32)">
            <summary>
            ADLINK DASK 에러 메시지
            </summary>
            <param name="errCode"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.ADLINKDASKDispose(System.UInt16@)">
            <summary>
            ADLINK DASK 자원 해제
            </summary>
            <param name="cardNumber"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.FastechPluseEConnect(System.Int32,System.String)">
            <summary>
            Fastech Pluse E 이더넷(TCP) 통신 연결 시도
            </summary>
            <param name="boradID">보드 번호 (0, ... )</param>
            <param name="ipAddress">IP 주소 (192.168.0.2 와 같은)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.FastechPluseEInfo(System.Int32,System.Byte@,System.String@)">
            <summary>
             Fastech Pluse E 드라이버 정보 출력
            </summary>
            <param name="boradID">보드 번호 (0, ... )</param>
            <param name="type">타입</param>
            <param name="version">버전</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorHelper.FastechPluseEDisconnect(System.Int32)">
            <summary>
            Fastech Pluse E 이더넷(TCP) 통신 연결 해제
            </summary>
            <param name="boradID">보드 번호 (0, ... )</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IMotors">
            <summary>
            모터 집합용 인터페이스
            <para>여러개의 모터들을 모아 관리하는 일종의 모턴 그룹 객체</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.SyncRoot">
            <summary>
            동기화 객체
            <para>데이타 처리시 크로스 쓰레드 방지용으로 사용</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.Motors">
            <summary>
            모터 목록
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.IsInPos">
            <summary>
            InPosition 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotors.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMotors.CtlMoveAbs(SpiralLab.Sirius.PosVel[])">
            <summary>
            절대 위치 이동 (다축)
            <para>비동기 함수 (이동 완료전에 리턴됨)</para>
            </summary>
            <param name="posVel">위치값 (mm), 속도 (mm/s) 배열</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotors.CtlMoveAbs(System.Int32,SpiralLab.Sirius.PosVel)">
            <summary>
            절대 위치 이동 (단축)
            <para>비동기 함수 (이동 완료전에 리턴됨)</para>
            </summary>
            <param name="index">모터 배열 인덱스 번호</param>
            <param name="posVel">위치값 (mm), 속도 (mm/s)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotors.CtlMoveRel(SpiralLab.Sirius.PosVel)">
            <summary>
            상대 위치 이동 (다축)
            <para>비동기 함수 (이동 완료전에 리턴됨)</para>
            </summary>
            <param name="distVel">위치값 (mm), 속도 (mm/s)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotors.CtlMoveRel(System.Int32,SpiralLab.Sirius.PosVel)">
            <summary>
            상대 위치 이동 (단축)
            <para>비동기 함수 (이동 완료전에 리턴됨)</para>
            </summary>
            <param name="index">모터 배열 인덱스 번호</param>
            <param name="distVel">위치값 (mm), 속도 (mm/s)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotors.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorPositionTable">
            <summary>
            모터 위치 테이블
            (모터 위치들의 집합)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorPositionTable.Items">
            <summary>
            위치 목록
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorPositionTable.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PosVel">
            <summary>
            모터의 개별 위치, 속도 저장용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PosVel.Position">
            <summary>
            Position (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PosVel.Velocity">
            <summary>
            Velocity (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PosVel.HasValue">
            <summary>
            값이 모두 설정되어 있는지 여부
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IMotorPosition">
            <summary>
            모터 위치 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotorPosition.Name">
            <summary>
            위치 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotorPosition.Items">
            <summary>
            위치 (mm), 속도 (mm/s) 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotorPosition.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMotorPosition.Clone">
            <summary>
            복제
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorPositionSerializer">
            <summary>
            모터 위치 집합 시리얼라이저
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorPositionSerializer.Save(SpiralLab.Sirius.MotorPositionTable,System.String)">
            <summary>
            저장
            </summary>
            <param name="motorPositionTable">모터 위치 집합</param>
            <param name="fileName">파일이름</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorPositionSerializer.Open(System.String)">
            <summary>
            열기
            </summary>
            <param name="fileName">파일이름</param>
            <returns>모터 위치 집합</returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorPositionDefault">
            <summary>
            모터 위치 (기본 버전)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorPositionDefault.Clone">
            <summary>
            복제
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionData3D">
            <summary>
            3차원 보정 데이타 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Reference">
            <summary>
            논리적인 좌표값 x,y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Measured">
            <summary>
            실제 측정된 좌표값 x,y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData3D.Delta">
            <summary>
            오차량 (실제 측정된 좌표값 - 이론상의 좌표값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            생성자
            </summary>
            <param name="reference">논리적인 좌표값</param>
            <param name="measured">실제 측정된 좌표값</param>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.ToReferenceString">
            <summary>
            논리 좌표 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData3D.ToMeasuredString">
            <summary>
            실측값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DResultEventHandler">
            <summary>
            스캐너 필드 보정에 대한 결과 이벤트 통지용 델리게이트
            </summary>
            <param name="correction3D">IRtcCorrection 인터페이스</param>
            <param name="success">변환 성공 여부</param>
            <param name="message">변환 로그 메시지</param>
        </member>
        <member name="T:SpiralLab.Sirius.Plane">
            <summary>
            3D 공간의 평면 지정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Plane.Upper">
            <summary>
            상부 평면
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Plane.Lower">
            <summary>
            하부 평면
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ICorrection3D">
            <summary>
            3D Correction (스캐너 보정) 인터페이스
            <para>
            실행파일\correction\stretchcorreXion5.exe (for 3D) 가 경로상에 존재해야 한다
            </para>
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ICorrection3D.OnResult">
            <summary>
            결과 통보용 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.KFactor">
            <summary>
            K 값 (bits/mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.SourceCorrectionFile">
            <summary>
            입력 보정 파일 (correction 폴더에서의 상대적 경로)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.TargetCorrectionFile">
            <summary>
            출력 보정 파일 (correction 폴더에서의 상대적 경로)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.ZLower">
            <summary>
            Z 보정 위치 최하단값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.ZUpper">
            <summary>
            Z 보정 위치 최상단값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.DataLower">
            <summary>
            Z 하부의 계측 데이타 :  "절대위치, 측정위치" (mm) 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.DataUpper">
            <summary>
            Z 상부의 계측 데이타 : "절대위치, 측정위치" (mm) 배열 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection3D.ResultMessage">
            <summary>
            변환 결과 로그 메시지
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            측정 데이타 입력 (절대 좌표 값)
            <code>
            예 :
            1 2 3
            4 5 6
            7 8 9
            </code>
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">기준 좌표(mm)</param>
            <param name="measured">측정 절대 좌표 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            측정 데이타 입력 (상대 좌표값) 
            <para>상대 좌표값 = 비전 오차량 만큼만 입력</para>
            <code>
            예 :
            1 2 3
            4 5 6
            7 8 9
            </code>
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">기준 좌표값 (mm)</param>
            <param name="error">측정 상대 좌표 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.Clear(SpiralLab.Sirius.Plane)">
            <summary>
            입력 데이타 삭제
            </summary>
            <param name="plane">삭제할 대상 평면</param>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection3D.Convert">
            <summary>
            변환 시작
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DRtc">
            <summary>
            스캐너 필드 보정 for 2D plane (Z=0)
            RTC4의 ctb 및 RTC5/6의 ct5 두가지 타입 모두 지원
            CorreXionPro 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction2DRtc.OnResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.RowInterval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.ColInterval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.IsAutoCenterOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.IsDeleteDatFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtc.Data">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DRtc.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="rowInterval">행 간격 (mm)</param>
            <param name="colInterval">열 간격 (mm)</param>
            <param name="srcCtbOrCt5File">입력 보정 파일</param>
            <param name="targetCtbOrCt5File">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.Clear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtc.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtc">
            <summary>
            scanner correction for 3D 
            ctb/ct5 포맷 겸용
            StretchCorreXion5.exe + CorrectionFileConverter.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction3DRtc.OnResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.Interval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.ZLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.ZUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.DataLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.DataUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.IsDeleteDatFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtc.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtc.kFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtc.interval">
            <summary>
            mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtc.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtc.converterExeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtc.ExitCode">
            process exit code ref : stretch correction.pdf by scanlab
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격</param>
            <param name="zUpper">최상단 위치 (mm)</param>
            <param name="zLower">최하단 위치 (mm)</param>
            <param name="srcCtFile">입력 보정 파일</param>
            <param name="targetCtFile">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.Clear(SpiralLab.Sirius.Plane)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.InternalConvert">
            <summary>
            ct5 기반의 3D 보정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtc.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.AdlinkDInput">
            <summary>
            디지털 입력 인터페이스    
            생성자에 DASK.PCI_7230 와 같은 카드 타입을 제공
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDInput.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.#ctor(System.Int32,System.String,System.Int16)">
            <summary>
            ADLINK 입력 생성자 
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="adlinkCardId">카드 식별자</param>
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsAOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsAOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsAOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsAOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsBOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsBOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsBOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.IsBOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDInput.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.AdlinkDOutput">
            <summary>
            디지털 출력 인터페이스    
            생성자에 DASK.PCI_7230 와 같은 카드 타입을 제공
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AdlinkDOutput.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.#ctor(System.Int32,System.String,System.Int16)">
            <summary>
            ADLINK 출력 생성자 
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="adlinkCardId">카드 식별자</param>
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.Update">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AdlinkDOutput.ReverseUpdate">
            <summary>
            출력 채널 상태를 내부 채널로 역반영
            하드웨어 출력 -> 채널 메모리 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AjinExtekDInput">
            <summary>
            디지털 입력 인터페이스    
            아진엑스텍 D.Input 제품군
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDInput.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsAOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsAOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsAOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsAOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsBOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsBOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsBOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.IsBOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDInput.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.AjinExtekDOutput">
            <summary>
            디지털 출력 인터페이스    
            아진엑스텍 D.Output 제품군
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.AjinExtekDOutput.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.Update">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.AjinExtekDOutput.ReverseUpdate">
            <summary>
            출력 채널 상태를 내부 채널로 역반영
            하드웨어 출력 -> 채널 메모리 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.InputType">
            <summary>
            입력 접점 타입
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.InputType.A">
            <summary>
            Active Hight
            Low -> High
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.InputType.B">
            <summary>
            Active Low
            High -> Low
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IDInputTrigger">
            <summary>
            디지털 입력 트리거 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTrigger.Type">
            <summary>
            입력 접점 타입 ( A/B)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInputTrigger.No">
            <summary>
            접점 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDInputTrigger.IsTriggered(System.Boolean,System.Int64)">
            <summary>
            트리거 동작 여부
            </summary>
            <param name="inputStatus">접점 입력값</param>
            <param name="msec">유지시간 (holding time: msec)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerA">
            <summary>
            디지털 입력 A 접점 트리거
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggerA.Type">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggerA.No">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggerA.Name">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerA.Status">
            <summary>
            접점 상태 열거형
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerA.Status.Off">
            <summary>
            꺼짐
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerA.Status.On">
            <summary>
            켜짐
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerA.Status.Uncertain">
            <summary>
            불확실
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerA.status">
            <summary>
            상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerA.sw">
            <summary>
            타이머
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerA.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="no">접점 번호</param>
            <param name="name">이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerA.IsTriggered(System.Boolean,System.Int64)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerB">
            <summary>
            디지털 입력 B 접점 트리거
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggerB.Type">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggerB.No">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputTriggerB.Name">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.DInputTriggerB.Status">
            <summary>
            접점 상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerB.Status.Off">
            <summary>
            꺼짐
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerB.Status.On">
            <summary>
            켜짐
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerB.Status.Uncertain">
            <summary>
            불확실
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerB.status">
            <summary>
            상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DInputTriggerB.sw">
            <summary>
            타이머
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerB.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="no">접점 번호</param>
            <param name="name">이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.DInputTriggerB.IsTriggered(System.Boolean,System.Int64)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.DInputVirtual">
            <summary>
            디지털 입력   
            가상 장치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DInputVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Dispose">
            <summary>
            자원해제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsAOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsAOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsAOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsAOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsBOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsBOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsBOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.IsBOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DInputVirtual.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.DOutputVirtual">
            <summary>
            디지털 출력     
            가상 장치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.DOutputVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.Dispose">
            <summary>
            자원해제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.DOutputVirtual.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.IDOutput">
            <summary>
            디지털 출력 인터페이스    
            하나의 채널은 16개의 접점으로 구성됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDOutput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOn``1(``0)">
            <summary>
            해당 접점 출력 On
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOn(System.Int32)">
            <summary>
            해당 접점 출력 Off
            </summary>
            <param name="no">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOff``1(``0)">
            <summary>
            해당 접점 출력 Off
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.OutOff(System.Int32)">
            <summary>
            해당 접점 출력 Off
            </summary>
            <param name="no">번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOn``1(``0)">
            <summary>
            해당 접점 출력 On 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOn(System.Int32)">
            <summary>
            해당 접점 출력 On 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOff``1(``0)">
            <summary>
            해당 접점 출력 Off 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.IsOutOff(System.Int32)">
            <summary>
            해당 접점 출력 Off 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            해당 채널 16비트 상태 가져오기
            </summary>
            <param name="ch">채널 (0,1,2,...)</param>
            <param name="d16bits">16비트값</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.SetChannel(System.Int32,System.UInt16)">
            <summary>
            해당 채널 16비트 상태 강제 Override
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDOutput.Update">
            <summary>
            출력 채널값을 모두 출력에 반영
            <para>채널 메모리 -> 하드웨어 출력 </para>
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.IDInput">
            <summary>
            디지털 입력 인터페이스    
            <para>하나의 채널은 16개의 접점으로 구성됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IDInput.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOn``1(``0)">
            <summary>
            해당 접점 입력 AOn 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOn(System.Int32)">
            <summary>
            해당 접점 입력 AOn 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOff``1(``0)">
            <summary>
            해당 접점 입력 AOff 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsAOff(System.Int32)">
            <summary>
            해당 접점 입력 AOff 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOn``1(``0)">
            <summary>
            해당 접점 입력 BOn 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOn(System.Int32)">
            <summary>
            해당 접점 입력 BOn 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOff``1(``0)">
            <summary>
            해당 접점 입력 BOff 상태 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.IsBOff(System.Int32)">
            <summary>
            해당 접점 입력 BOff 상태 여부
            </summary>
            <param name="no">번호</param>
            <returns>접점 상태</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            해당 채널 16비트 상태 얻기
            </summary>
            <param name="ch">채널 (0,1,2,...)</param>
            <param name="d16bits">16비트값</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IDInput.Update">
            <summary>
            입력 값들을 채널 메모리로 반영 (업데이트)
            <para>하드웨어 입력 상태 -> 메모리</para>
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDInputExt1">
            <summary>
            디지털 입력 인터페이스    
            RTC4/5/6 제품의 확장1(Extension1) 16/16 비트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInputExt1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInputExt1.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInputExt1.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInputExt1.ChannelCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDInputExt1.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.#ctor(SpiralLab.Sirius.IRtc,System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsAOn``1(``0)">
            <summary>
            A On 상태
            </summary>
            <typeparam name="T">열거형 타입</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsAOn(System.Int32)">
            <summary>
            A On 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsAOff``1(``0)">
            <summary>
            해당 접점 입력 AOff 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsAOff(System.Int32)">
            <summary>
            해당 접점 입력 AOff 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsBOff``1(``0)">
            <summary>
            해당 접점 입력 BOn 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">열거형 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsBOff(System.Int32)">
            <summary>
            해당 접점 입력 BOn 상태
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsBOn``1(``0)">
            <summary>
            B On 상태
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.IsBOn(System.Int32)">
            <summary>
            B On 상태
            </summary>
            <param name="no"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널값 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDInputExt1.Update">
            <summary>
            입력 값들을 채널 메모리로 반영 (업데이트)
            하드웨어 입력 상태 -> 메모리
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDOutputExt2">
            <summary>
            디지털 출력 인터페이스    
            RTC4/5/6 제품의 확장2(Extension2) 8 비트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt2.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.#ctor(SpiralLab.Sirius.IRtc,System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOn``1(``0)">
            <summary>
            출력 켜기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOn(System.Int32)">
            <summary>
            출력 켜기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOff``1(``0)">
            <summary>
            출력 끄기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.OutOff(System.Int32)">
            <summary>
            출력 끄기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOn``1(``0)">
            <summary>
            출력 켜짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOn(System.Int32)">
            <summary>
            출력 켜짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOff``1(``0)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.IsOutOff(System.Int32)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.SetChannel(System.Int32,System.UInt16)">
            <summary>
            16비트 채널 설정
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.Update">
            <summary>
            출력 채널값을 모두 출력에 반영
            채널 메모리 -> 하드웨어 출력 
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt2.ReverseUpdate">
            <summary>
            출력 채널 상태를 내부 채널로 역반영
            하드웨어 출력 -> 채널 메모리 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcDOutputExt1">
            <summary>
            디지털 출력 인터페이스    
            RTC4/5/6 제품의 확장1(Extension1) 16/16 비트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.ChannelCount">
            <summary>
            채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcDOutputExt1.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.#ctor(SpiralLab.Sirius.IRtc,System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="rtc"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOn``1(``0)">
            <summary>
            출력 켜기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOn(System.Int32)">
            <summary>
            출력 켜기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOff``1(``0)">
            <summary>
            출력 끄기
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.OutOff(System.Int32)">
            <summary>
            출력 끄기
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOn``1(``0)">
            <summary>
            출력 켜짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOn(System.Int32)">
            <summary>
            출력 켜짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOff``1(``0)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <typeparam name="T">열거형</typeparam>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.IsOutOff(System.Int32)">
            <summary>
            출력 꺼짐 여부
            </summary>
            <param name="no">번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            16비트 채널 얻기
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.SetChannel(System.Int32,System.UInt16)">
            <summary>
            16비트 채널 설정
            </summary>
            <param name="ch">채널</param>
            <param name="d16bits">16비트값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.Update">
            <summary>
            출력 채널값을 모두 출력에 반영
            채널 메모리 -> 하드웨어 출력 
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcDOutputExt1.ReverseUpdate">
            <summary>
            출력 채널 상태를 내부 채널로 역반영
            하드웨어 출력 -> 채널 메모리 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPGYLPTypeE">
            <summary>
            레이저 소스 (IPG YLP Type E)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPGYLPTypeE.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Add(SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Remove(SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Contains(SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Status">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.PowerControlD0D7ByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.AuxOOffControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.GuideLaserControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit.EmissionModulationControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Add(SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Remove(SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Contains(SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OperationMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OpMode">
            <summary>
            OP 모드 (32비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Options.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.Add(SpiralLab.Sirius.IPGYLPTypeE.Options.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.Remove(SpiralLab.Sirius.IPGYLPTypeE.Options.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.Contains(SpiralLab.Sirius.IPGYLPTypeE.Options.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Options.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Options.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.Option">
            <summary>
            옵션 (32비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Add(SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Remove(SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Contains(SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceExtendedStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.ExtendedStatus">
            <summary>
            디바이스 확장 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Add(SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Remove(SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Contains(SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.ToUInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DeviceDigitalInterface.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.DigitalInterface">
            <summary>
             디지털 인터페이스 DB-25 핀의 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PulseRepRateMin">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PulseRepRateMax">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsTimedOut">
            <summary>
            현재 설정된 알람코드
            Status 속성을 통해 접근 !!!
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeE.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Device_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Device_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Digital_Interface_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is float in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Pulse_Duration">
            <summary>
            read nominal pulse duration of the laser [ns]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Pulse_Repetion_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two floats separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Head_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Main_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.HouseKeeping_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Pulse_Repetion_Rate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Power_Watt">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Power_Percentage">
            <summary>
            %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Operating_Pulse_Energy">
            <summary>
            mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Queries.Pulse_Repetion_Rate_Monitor">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Pulse_Repetion_Rate">
            <summary>
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Operating_Power">
            <summary>
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeE.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeE.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
             <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PhotonicsIndustryDX">
            <summary>
            레이저 소스 (Photonics Industry DX)
            Guide On/Off 는 Thermal Gate On/Off 로 에뮬레이션 동작됨
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PhotonicsIndustryDX.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsShutterOpen">
            <summary>
            Shutter 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsLDDEnable">
            <summary>
            LDD 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.SetCurrentAmp">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.MaxCurrentAmp">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.ActualCurrentAmp">
            <summary>
            실제 다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.DiodeVoltage">
            <summary>
            다이오드 전압 (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PulseRepRate">
            <summary>
            Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PECLevel">
            <summary>
            PEC Level (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.ActualTemperature">
            <summary>
            degree
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.LDDHours">
            <summary>
            LDD 사용 시간 (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.PowerWatt">
            <summary>
            Power Monitoring (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsPRFSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsGateSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsPECSourceExt">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsGuideOn">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.IsTimedOut">
            <summary>
            PRF 소스 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PhotonicsIndustryDX.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PhotonicsIndustryDX.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.JPTTypeE">
            <summary>
            레이저 소스 (JPT TypeE)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.JPTTypeE.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Simmer">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGUIPAEnable">
            <summary>
            Guide Laser온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGUIMOEnable">
            <summary>
            Guide Laser온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.IsGuideOn">
            <summary>
            Guide Laser온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.Add(SpiralLab.Sirius.JPTTypeE.JPTStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.Remove(SpiralLab.Sirius.JPTTypeE.JPTStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.Contains(SpiralLab.Sirius.JPTTypeE.JPTStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Status">
            <summary>
            디바이스 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Add(SpiralLab.Sirius.JPTTypeE.JPTControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Remove(SpiralLab.Sirius.JPTTypeE.JPTControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Contains(SpiralLab.Sirius.JPTTypeE.JPTControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTControlMode.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.ControlMode">
            <summary>
            Control Mode 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.ControlModeBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Add(SpiralLab.Sirius.JPTTypeE.JPTAlarm.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Remove(SpiralLab.Sirius.JPTTypeE.JPTAlarm.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Contains(SpiralLab.Sirius.JPTTypeE.JPTAlarm.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.JPTAlarm.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.JPTAlarm.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.Alarm">
            <summary>
            디바이스 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.AlarmBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JPTTypeE.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.JPTTypeE.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IPGYLPTypeD">
            <summary>
            레이저 소스 (IPG YLP Type D)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPGYLPTypeD.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Add(SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Remove(SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Contains(SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.Status">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.StatusBit">
            <summary>
            디바이스 상태 (8비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Add(SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Remove(SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Contains(SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.ToInt">
            <summary>
            4바이트 int 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceExtendedStatus.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.ExtendedStatus">
            <summary>
            디바이스 확장 상태 (16비트)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Add(SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Remove(SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Contains(SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.ToUInt">
            <summary>
            4바이트 uint 으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DeviceDigitalInterface.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.DigitalInterface">
            <summary>
             디지털 인터페이스 DB-25 핀의 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PulseRepRateMin">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PulseRepRateMax">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.PulseRepRate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.OperatingPower">
            <summary>
            %
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPGYLPTypeD.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Device_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Device_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Digital_Interface_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is float in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Pulse_Duration">
            <summary>
            read nominal pulse duration of the laser [ns]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Pulse_Repetion_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two floats separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Head_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Main_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.HouseKeeping_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Pulse_Repetion_Rate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Power_Watt">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Power_Percentage">
            <summary>
            %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Operating_Pulse_Energy">
            <summary>
            mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Queries.Pulse_Repetion_Rate_Monitor">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Pulse_Repetion_Rate">
            <summary>
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Operating_Power">
            <summary>
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.IPGYLPTypeD.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPGYLPTypeD.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AdvancedOptoWaveFotia">
            <summary>
            레이저 소스 (OptoWave Fotia)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.AdvancedOptoWaveFotia.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsDiodeOn">
            <summary>
            다이오드 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsQSwitchOn">
            <summary>
            Q스위치 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsShutterOpen">
            <summary>
            셔터 온오프
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.TriggerModes.Internal">
            <summary>
            내부 트리거
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.TriggerModes.External">
            <summary>
            외부 트리거
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.TriggerMode">
            <summary>
            트리거 모드 (External 로 해야 Rtc 로 제어 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.PulseRepRate">
            <summary>
            주파수 Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.PowerFactor">
            <summary>
            파워 비율값 
            0~100 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.DiodeCurrentAmp">
            <summary>
            다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.DiodeActualCurrentAmp">
            <summary>
            실제 다이오드 커런트 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Diode1CurrentHightLimitAmp">
            <summary>
            다이오드1 커런트 상한값 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.Diode2CurrentHightLimitAmp">
            <summary>
            다이오드2 커런트 상한값 (Amp)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.LaserTime">
            <summary>
            레이저 사용 시간 (hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.FirmwareVersion">
            <summary>
            펌웨어 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.TargetCrystal1Temperature">
            <summary>
            크리스털1 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.TargetCrystal2Temperature">
            <summary>
            크리스털2 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualCrystal1Temperature">
            <summary>
            크리스털 1 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualCrystal2Temperature">
            <summary>
            크리스털 2 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualLaserHeadTemperature">
            <summary>
            레이저 헤드 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ActualDiodeTemperature">
            <summary>
            다이오드 실제 온도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.EnvironmentalTemperature">
            <summary>
            환경 온도 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes">
            <summary>
            알람 코드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.Normal">
            <summary>
            알람 없는 상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.Diode1TemperatureHigh">
            <summary>
            higher 35
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.Diode1TemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.LaserHeadTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.LaserHeadTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.EnvironmentalTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.EnvironmentalTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCodes.InterlockOpen">
            <summary>
            double check, lasting longer than 100ms
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.AlarmCode">
            <summary>
            현재 알람코드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.IsGuideOn">
            <summary>
            Guide Laser 온오프
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AdvancedOptoWaveFotia.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.AdvancedOptoWaveFotia.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CoherentAviaLX">
            <summary>
            레이저 소스 (코히런트 AVIA LX)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.CoherentAviaLX.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsReady">
            <summary>
            상태 (준비완료 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsBusy">
            <summary>
            상태 (출사중 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsError">
            <summary>
            상태 (에러 발생 여부)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CoherentAviaLX.ComPort">
            <summary>
            통신 포트 번호
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="comPort">COM 포트</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CtlReset">
            <summary>
            리셋
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CoherentAviaLX.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (시리얼 통신으로 처리됨)
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.PowerControlMethod">
            <summary>
            레이저 소스의 출력 파워를 제어하는 방식들
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Unknown">
            <summary>
            미 설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Rs232">
            <summary>
            외부 통신 (시리얼 통신)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.TcpIp">
            <summary>
            외부 통신  (소켓 통신)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Duty">
            <summary>
            펄스폭 비율을 통한 제어
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Analog">
            <summary>
            아나로그 전압을 이용한 제어
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.DigitalBits">
            <summary>
            16 비트(0~255) 와 같은 디지털 비트의 조합을 이용한 제어
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.PowerControlMethod.Custom">
            <summary>
            사용자 정의 제어
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IPowerControl">
            <summary>
            레이저 소스 IPowerControl 인터페이스 (파워 변경을 지원하는 레이저 소스)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerControl.PowerControlMethod">
            <summary>
            파워 변경 방식
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerControl.PowerMap">
            <summary>
            파워 매핑 테이블
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerControl.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경 (즉시 명령)
            <para>파워 맵 카테고리 <c>>powerMapCategory</c> 지정시 watt 에 해당하는 보정 값을 조회후 사용함</para>
            <example>
            
                               사용자가 지정한 출력 파워 (W)
            출력 비율(%) =   ---------------------------------------  X 100
                                    최대 출력 파워 (W)
                              
            </example>
            </summary>
            <param name="watt">출력 에너지(Watt)</param>
            <param name="powerMapCategory">파워맵 사용시 검색할 카테고리 이름</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerControl.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 
            <para>마커의 내부 작업 쓰레드에 의해 리스트 명령으로 호출되므로, RTC 카드의 리스트 버퍼를 통해 레이저 파워를 변경하는 방식으로 처리 필요</para>
            <para>만약 리스트 명령으로 처리가 불가능한 파워 변경 방식의 경우, 현재까지 다운로드된 모든 리스트 명령을 닫고(List End/List Execute) 실행을 완료시킨 이후</para>
            <para>파워 변경 을 수행 완료하고 신규로 리스트(List Begin)를 만들어 이후 리스트 명령들에 영향을 주는 안는 방식으로 구현 가능</para>
            <para>파워 맵 카테고리 <c>>powerMapCategory</c> 지정시 watt 에 해당하는 보정 값을 조회후 사용함</para>
            <example>
            
                               사용자가 지정한 출력 파워 (W)
            출력 비율(%) =   ---------------------------------------  X 100
                                    최대 출력 파워 (W)
                              
            </example>
            </summary>
            <param name="watt">출력 에너지(Watt)</param>
            <param name="powerMapCategory">파워맵 사용시 검색할 카테고리 이름</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IGuideControl">
            <summary>
            레이저 소스 IGuide 인터페이스 
            지시용(Guide/Pilot) 레이저 빔의 출력을 지원하는 레이저 소스의 경우 이 인터페이스를 상속 구현
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IGuideControl.IsGuideOn">
            <summary>
            지시용 레이저 빔(Guide/Pilot) On/Off 상태 제어
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IShutterControl">
            <summary>
            레이저 소스 IShutter 인터페이스 (셔터 제어를 지원하는 레이저 소스의 경우 상속 구현)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IShutterControl.IsShutterOpen">
            <summary>
            셔터(Shutter) 상태 (open/close) 제어
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ILaser">
            <summary>
            레이저 소스 인터페이스
            <para>INotifyPropertyChanged 인터페이스는 내부 속성의 값이 변경되는 시점을 통지해주기 위해 지원됨</para>
            <para>IDisposable 인터페이스는 레이저 소스의 자원해제 시점에 자원 반납을 위해 지원됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.SyncRoot">
            <summary>
            동기화 객체
            <para>데이타 처리시 크로스 쓰레드 방지용으로 사용</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.MaxPowerWatt">
            <summary>
            최대 출력 파워 (Watt)
            <example>
            
                               사용자가 지정한 출력 파워 (W)
            출력 비율(%) =   ---------------------------------------  X 100
                                    최대 출력 파워 (W)
                              
            사용자의 출력 파워값은 통상 IPen 의 Watt 항목에서 설정됨
            </example>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsReady">
            <summary>
            준비 상태
            <para>레이저 소스의 제어 상태가 가공 준비가 완료되었는지 여부를 나타내며 시스템에서 가공 준비가 완료되었는지 여부를 판단하는 여러 조건들중 하나로 사용됨</para>
            <para>CheckReady 상속 구현부에서 오버라이딩 가능</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsBusy">
            <summary>
            출사중 여부
            <para>레이저 소스의 제어 상태가 출사중인지 여부 나타내며 시스템에서 출사중인지 여부를 판단하는 여러 조건들중 하나로 사용됨</para>
            <para>CheckBusy 상속 구현부에서 오버라이딩 가능</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsError">
            <summary>
            알람 발생 여부
            <para>시스템에서 에러가 발생했는지 여부를 판단하는 여러 조건들중 하나로 사용됨</para>
            <para>CheckErrors 상속 구현부에서 오버라이딩 가능</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스 연결용
            <para>RTC 카드를 이용한 레이저 출력 제어를 위해 사용됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부 
            <para>레이저 소스의 출력 파워를 제어가능하면 true 로 설정하고 IPowerControl 인터페이스를 상속 구현함</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            <para>레이저 소스내에 셔터(Shutter) Open/Close 제어가능하면 true 로 설정하고 IShutterControl 인터페이스를 상속 구현함</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부 (IGuideControl 인터페이스로 접근)
            <para>레이저 소스에서 지시용 레이저 빔 출력을 제어가능하면 true 로 설정하고 IGuideControl 인터페이스를 상속 구현함</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsTimedOut">
            <summary>
            통신 타입아웃 여부
            <para>레이저 소스와의 통신중 다양한 이유로 통신 실패(타임아웃 등) 발생시 설정됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.IsProtocolError">
            <summary>
            레이저 소스와의 통신중 다양한 이유로 송수신 데이타의 부적합등 프로토콜 오류가 발생시 설정됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ILaser.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.Initialize">
            <summary>
            초기화 
            <para>통신 연결 및 내부 초기화</para>
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.CtlAbort">
            <summary>
            출사 중지
            긴급정지등의 용도
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.CtlReset">
            <summary>
            내부에 발생된 여러가지의 에러 상태의 해제를 시도하는 리셋 기능
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.ListBegin">
            <summary>
            리스트 시작 통지용
            <para>마커(IMarker) 에서 리스트 명령 처리를 위한 작업쓰레드가 생성되고 이때 RTC 내의 리스트 버퍼를 개방(begin) 한 후 각종 데이타가 다운로드되는데, 이 리스트 버퍼가 개방되는 시점을 통지하는 역할</para>
            <para>(가공 시작시 출력 파워를 초기값등으로 전환하는 용도로도 활용됨)</para>
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.ILaser.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            <para>마커(IMarker) 에서 리스트 명령 처리를 위한 작업쓰레드가 생성되고 이때 RTC 내의 리스트 버퍼에 모든 데이타가 다운로드된 이후 리스트가 닫히는 시점을 통지하는 역할</para>
            <para>(가공 마무리시 이를 통지하는 용도)</para>
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.LaserVirtual">
            <summary>
            레이저 소스 (가상)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.LaserVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.MaxPowerWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsTimedOut">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsProtocolError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Rtc">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsPowerControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.PowerControlMethod">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsShutterControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsGuideControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsShutterOpen">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.IsGuideOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.LaserVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.#ctor(System.Int32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="maxPowerWatt">최대 파워 (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.CtlPower(System.Single,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.LaserVirtual.ListPower(System.Single,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.SPIG4">
            <summary>
            SPI - G3/G3 IR 파이버 레이저 소스 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.SPIG4.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.Index">
            <summary>
            식별 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.MaxPowerWatt">
            <summary>
            최대 파워 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.Rtc">
            <summary>
            레이저 제어에 필요한 IRtc 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.IsPowerControl">
            <summary>
            파워 변경을 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.IsShutterControl">
            <summary>
            셔터 제어를 지원하는지 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.SPIG4.IsGuideControl">
            <summary>
            Guide 레이저 빔 지원하는지 여부
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SPIG4.SPIStatus">
            <summary>
            SPI 레이저 상태 정보
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.#ctor(System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="name"></param>
            <param name="comPort"></param>
            <param name="maxPowerWatt"></param>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.CheckErrors">
            <summary>
            에러(IsError) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.CheckReady">
            <summary>
            준비(IsReady) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.CheckBusy">
            <summary>
            출사중(IsBusy) 조건 설정
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.CtlAbort">
            <summary>
            강제 출사 정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.CtlReset">
            <summary>
            리셋 (에러 상태 해제 시도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.GetAlarms">
            <summary>
            알람 목록 배열 가져오기
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.GetAlarmText(System.Int32)">
            <summary>
            알람 코드에 해당하는 알람 메시지 가져오기
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.CtlPower(System.Single,System.String)">
            <summary>
            파워 변경
            </summary>
            <param name="watt">파워 (W)</param>
            <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.ListBegin">
            <summary>
            리스트 시작 통지용
            (가공 시작시 출력 파워를 초기값등으로 전환하는 용도)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.ListEnd">
            <summary>
            리스트 명령 끝 통지용
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.SPIG4.ListPower(System.Single,System.String)">
            <summary>
            파워 변경 (RTC의 리스트 명령으로 처리시)
            </summary>
            <param name="watt">파워 (W)</param>
             <param name="powerMapCategory">파워맵 룩업 대상 카테고리</param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.DegToRad">
            <summary>
            각도 -> 라디안 변환 상수
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.RadToDeg">
            <summary>
            라디안 -> 각도 변환 상수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsZero(System.Single,System.Single)">
            <summary>
            부동 소수점 동일성 비교
            </summary>
            <param name="number">부동소수점 값</param>
            <param name="threshold">마진값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsEqual(System.Single,System.Single)">
            <summary>
            부동 소수점 동일성 비교
            </summary>
            <param name="a">부동소수점 값</param>
            <param name="b">부동소수점 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsEqual(System.Single,System.Single,System.Single)">
            <summary>
            부동 소수점 동일성 비교
            </summary>
            <param name="a">부동소수점 값</param>
            <param name="b">부동소수점 값</param>
            <param name="threshold">마진값</param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.MathHelper.epsilon">
            <summary>
            마진값 상수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MathHelper.Epsilon">
            <summary>
            마진값 상수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MathHelper.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
            해당 값이 범위 안에 있는지 여부
            </summary>
            <param name="a"></param>
            <param name="lower">하한값</param>
            <param name="upper">상한값</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MatrixStack">
            <summary>
            3x3 matrix with stack 
            스택에 push/pop 및 스택내의 모든 행렬을 연산하는등의 유틸리티 클래스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MatrixStack.ToResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MatrixStack.Count">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.#ctor(SpiralLab.Sirius.MatrixStack)">
            <summary>
            복사 생성자
            </summary>
            <param name="matrixStack"></param>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Clone">
            <summary>
            복제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Equals(SpiralLab.Sirius.MatrixStack)">
            <summary>
            동일성 비교 (deep compare)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Clear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Numerics.Matrix3x2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Pop(System.Numerics.Matrix3x2@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Pop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MatrixStack.Push(System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.PowerMapEvent">
            <summary>
            파워 매핑 시작 통지용
            </summary>
            <param name="powerMap">파워맵</param>
            <param name="arg">인자</param>
        </member>
        <member name="T:SpiralLab.Sirius.PowerVerifyEvent">
            <summary>
            파워 검증 시작 통지용
            </summary>
            <param name="powerMap">파워맵</param>
            <param name="arg">인자</param>
        </member>
        <member name="T:SpiralLab.Sirius.IPowerMap">
            <summary>
            파워맵 인터페이스
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnMappingStarted">
            <summary>
            파워 매핑 시작
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnMappingProgress">
            <summary>
            카테고리 개수 * 매 Step 진행완료 개수만큼 발생
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnMappingFailed">
            <summary>
            파워 매핑 실패
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnMappingFinished">
            <summary>
            파워 매핑 종료
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnVerifyStarted">
            <summary>
            파워 검증 시작
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnVerifyProgress">
            <summary>
            파워 검증시 : 카테고리 + 목표 출력(W) 개수만큼 발생
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnVerifyFailed">
            <summary>
            파워 검증 실패
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnVerifyFinished">
            <summary>
            파워 검증 완료
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnOpen">
            <summary>
            파워맵 파일 열기
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMap.OnSave">
            <summary>
            파워맵 파일 저장
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.IsReady">
            <summary>
            파뭐 매핑/검증 진행 가능 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.IsBusy">
            <summary>
            파뭐 매핑/검증 진행중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.IsError">
            <summary>
            파워 매핑/검증 에러 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.Index">
            <summary>
            식별자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.Name">
            <summary>
            파워맵 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.FileName">
            <summary>
            파워맵 파일 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.XName">
            <summary>
            파라메터 X 이름
            <para>watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.XGap">
            <summary>
            파라메터 X 간격
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.Data">
            <summary>
            카테고리/시리즈, (X값, 측정값) 데이타
            <para>실제 파일에 저장되는 데이타 값들</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.IsInterpolateEnabled">
            <summary>
            매핑(룩업) 테이블 기반의 근사 연산을 할지 여부
            <para>기본값 true </para>
            <para>false 일 경우 입력값과 동일한 값이 출력됨 (1:1)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMap.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.Initialize">
            <summary>
            초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.Categories(System.String[]@)">
            <summary>
            카테고리/시리즈 목록 얻기
            </summary>
            <param name="categories">카테고리/시리즈 목록</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.Clear(System.String)">
            <summary>
            카테고리/시리즈/ 룩업테이블 삭제
            </summary>
            <param name="category">카테고리 이름 (미지정일 대상은 전체) </param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.Update(System.String,System.Single,System.Single)">
            <summary>
            룩업 테이블 업데이트 
            <para>설정값 : 시리즈 이름과 의존값(x)</para>
            <para>측정값 : 에너지 (Watt)</para>
            </summary>
            <param name="category">카테고리/시리즈 이름</param>
            <param name="x">watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) 가변인자</param>
            <param name="detectedWatt">측정된 실제 에너지(W)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.Query(System.String,System.Single,System.Single@)">
            <summary>
            룩업 테이블 실제값 조회
            </summary>
            <param name="category">카테고리/시리즈 이름</param>
            <param name="x">watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) 가변인자</param>
            <param name="watt">측정된 실제 에너지(W)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.MaxDetectedPower(System.String,System.Single@)">
            <summary>
            룩업 테이블내의 지정된 시리즈에서의 실제 최대 에너지(W)값
            </summary>
            <param name="category">카테고리/시리즈 이름</param>
            <param name="maxWatt">측정된 최대 에너지(W)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.MinMaxX(System.String,System.Single@,System.Single@)">
            <summary>
            룩업 테이블내의 지정된 시리즈에서의 X 의 최대, 최소값
            </summary>
            <param name="category">카테고리/시리즈 이름</param>
            <param name="minX">최소값(watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) )</param>
            <param name="maxX">최대값(watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) )</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.Interpolate(System.String,System.Single,System.Single@)">
            <summary>
            룩업 테이블을 이용해 지정된 시리즈에서 지정된 에너지(watt)가 출력되기 위한 x 값 추출 (선형방식)
            </summary>
            <param name="category">카테고리/시리즈 이름</param>
            <param name="targetWatt">출력을 원하는 에너지(W)</param>
            <param name="x">계산된 x값 (watt(W), frequency(Hz), current(A), pulse width(um), voltage(V), duty width(%) )</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.CtlStart(SpiralLab.Sirius.IPowerMapArg)">
            <summary>
            파워매핑 시작
            </summary>
            <param name="powerMapStartArg">IPowerMapStartArg 인자</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.CtlStop">
            <summary>
            파워 매핑 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.CtlReset">
            <summary>
            에러 초기화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.CtlVerify(SpiralLab.Sirius.IPowerVerifyArg)">
            <summary>
            보정된 출력 파워 검증 시작
            <para>파워 매핑 테이블을 참고해 지정된 레이저 목표 파워(Target Watt)로 출시를 시도하고 오차(threshold Watt)값 이내에서 측정이 되는지 여부를 시도한다</para>
            </summary>
            <param name="powerMapVerifyArg">IPowerMapVerifyArg 인자</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyMappingStarted(SpiralLab.Sirius.IPowerMapArg)">
            <summary>
            파워 매핑 시작
            </summary>
            <param name="arg">IPowerMapStartArg 인자</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyMappingProgress(SpiralLab.Sirius.IPowerMapArg)">
            <summary>
            파워 매핑 진행중
            매 Step 진행 완료시 발생
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyMappingFailed(SpiralLab.Sirius.IPowerMapArg)">
            <summary>
            파워 매핑 실패
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyMappingFinished(SpiralLab.Sirius.IPowerMapArg)">
            <summary>
            매핑 종료 이벤트 통지
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyVerifyStarted(SpiralLab.Sirius.IPowerVerifyArg)">
            <summary>
            파워 검증 완료 이벤트 통지
            </summary>
            <param name="arg">IPowerMapVerifyArg 인자</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyVerifyProgress(SpiralLab.Sirius.IPowerVerifyArg)">
            <summary>
            파워 검증 진행중
            매 (카테고리,목표파워) 진행 완료시 발생
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyVerifyFailed(SpiralLab.Sirius.IPowerVerifyArg)">
            <summary>
            파워 검증 실패
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyVerifyFinished(SpiralLab.Sirius.IPowerVerifyArg)">
            <summary>
            파워 검증 완료 이벤트 통지
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifyOpening">
            <summary>
            매핑 파일 열기 이벤트 통지
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMap.NotifySaving">
            <summary>
            매핑 파일 저장 이벤트 통지
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMapDefault">
            <summary>
            파워맵 (기본 버전)    
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnMappingStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnMappingProgress">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnMappingFailed">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnMappingFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnVerifyStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnVerifyProgress">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnVerifyFailed">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnVerifyFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnOpen">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMapDefault.OnSave">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.FileName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.XName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.XGap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.Data">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.IsInterpolateEnabled">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMapDefault.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.#ctor(System.Int32,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별 번호</param>
            <param name="name">이름</param>
            <param name="xName">X 항목 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.Categories(System.String[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.Clear(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.Update(System.String,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.Query(System.String,System.Single,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.MaxDetectedPower(System.String,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.MinMaxX(System.String,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.Interpolate(System.String,System.Single,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.CtlStart(SpiralLab.Sirius.IPowerMapArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.DoPowerMapping(SpiralLab.Sirius.IPowerMapArg)">
            <summary>
            실제 매핑 처리 루틴
            </summary>
            <param name="arg">IPowerMapArg 인자</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.CtlVerify(SpiralLab.Sirius.IPowerVerifyArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.DoPowerVerify(SpiralLab.Sirius.IPowerVerifyArg)">
             <summary>
             보정된 파워 출력 검증 테스트
             </summary>
            <param name="arg">IPowerVerifyArg 인자</param>
             <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyMappingStarted(SpiralLab.Sirius.IPowerMapArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyMappingProgress(SpiralLab.Sirius.IPowerMapArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyMappingFailed(SpiralLab.Sirius.IPowerMapArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyMappingFinished(SpiralLab.Sirius.IPowerMapArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyVerifyStarted(SpiralLab.Sirius.IPowerVerifyArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyVerifyProgress(SpiralLab.Sirius.IPowerVerifyArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyVerifyFailed(SpiralLab.Sirius.IPowerVerifyArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyVerifyFinished(SpiralLab.Sirius.IPowerVerifyArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifyOpening">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMapDefault.NotifySaving">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterOphirArg">
            <summary>
             파워 계측에 필요한 설정값및 계측결과 전달용 인자
            Ophir 전용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.XName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.XValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.PowerCategory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.StartTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.EndTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.DateTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.Channel">
            <summary>
            채널 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.XPos">
            <summary>
            계측된 X 위치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.YPos">
            <summary>
            계측된 Y 위치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.PowerWatt">
            <summary>
            계측된 파워값 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.PowerStatus">
            <summary>
            계측 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphirArg.Empty">
            <summary>
            생성 초기값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphirArg.#ctor(System.String,System.Single,System.String)">
            <summary>
            생성자
            </summary>
            <param name="xName">파라메터 X 이름</param>
            <param name="xValue">파러메터 X 값 / watt(W), current(A), pulse width(um), voltage(V), duty width(%)</param>
            <param name="powerCategory">파워 카테고리 (Series 이름)</param>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterOphir">
            <summary>
            파워메터 (Ophir 사의 StarLab 지원 모델)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterOphir.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterOphir.OnStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterOphir.OnMeasured">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterOphir.OnStopped">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterOphir.OnFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterOphir.OnCleared">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.Channel">
            <summary>
            활성화 채널 번호 (0,1,2,3)
            최대 4개의 채널(헤드) 지원되는 모델의 경우 (기본값 0)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.Data">
            <summary>
            버퍼 큐
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterOphir.MaxBufferCounts">
            <summary>
            측정 데이타 큐의 버퍼 최대 크기(개수)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.#ctor(System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="maxBufferCounts">버퍼의 최대 크기</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="serialNo">일렵번호</param>
            <param name="maxBufferCounts">최대 버퍼 크기(측정 데이타 저장용 버퍼 크기)</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.Dispose">
            <summary>
            자원해제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.CtlStart">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.NotifyMeasure(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.NotifyStarted(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.NotifyStopped(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.NotifyFinished(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterOphir.NotifyCleared(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeaterVirtualArg">
            <summary>
            파워 계측 전달 인자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.XName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.XValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.StartTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.EndTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.DateTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.PowerCategory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.PowerWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeaterVirtualArg.Empty">
            <summary>
            생성 초기값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeaterVirtualArg.#ctor(System.String,System.Single,System.String)">
            <summary>
            생성자
            </summary>
            <param name="xName">파라메터 X 이름</param>
            <param name="xValue">파러메터 X 값 / watt(W), current(A), pulse width(um), voltage(V), duty width(%)</param>
            <param name="powerCategory">파워 카테고리 (Series 이름)</param>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterVirtual">
            <summary>
            PowerMeterVirtual 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.OnStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.OnMeasured">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.OnStopped">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.OnFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterVirtual.OnCleared">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.SamplingRateHz">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.PowerMeasureArg">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.Data">
            <summary>
            버퍼 큐
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterVirtual.MaxBufferCounts">
            <summary>
            측정 데이타 큐의 버퍼 최대 크기(개수)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.#ctor(System.Single,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="maxWatt">가상 출력 최대 크기 (W)</param>
            <param name="maxBufferCounts">버퍼의 최대 크기</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.#ctor(System.Int32,System.String,System.Single,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="maxWatt">가상 출력 최대 크기 (W)</param>
            <param name="maxBufferCounts">버퍼의 최대 크기</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.CtlStart">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.NotifyMeasure(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.NotifyStarted(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.NotifyStopped(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.NotifyFinished(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterVirtual.NotifyCleared(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterEvent">
            <summary>
            파워메터 측정값 이벤트 통지용 
            </summary>
            <param name="powerMeter">IPowerMeter 인터페이스</param>
            <param name="arg">IPowerMeterArg 인자 (PowerMeterVirtualArg, PowerMeterOphirUSBIArg, PowerMeterThorlabArg 로 변환하여 사용) </param>
        </member>
        <member name="T:SpiralLab.Sirius.IPowerMeter">
            <summary>
            파워메터 인터페이스
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMeter.OnStarted">
            <summary>
            파워 측정 시작
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMeter.OnMeasured">
            <summary>
            파워 측정 데이타 전달
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMeter.OnStopped">
            <summary>
            파워 측정 중단
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMeter.OnFinished">
            <summary>
            파워 측정 완료
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IPowerMeter.OnCleared">
            <summary>
            데이타 모두 삭제
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Index">
            <summary>
            파워메터 식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.SamplingRateHz">
            <summary>
            측정 주기 (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.IsReady">
            <summary>
            준비 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.IsBusy">
            <summary>
            동작중 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.IsError">
            <summary>
            에러 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Data">
            <summary>
            측정 데이타 큐
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.MaxBufferCounts">
            <summary>
            측정 데이타 큐의 버퍼 최대 크기(개수)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.PowerMeasureArg">
            <summary>
            파워 계측에 필요한 설정값및 계측결과 전달용 인자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.PowerScaler">
            <summary>
            측정 파워를 스케일(배율처리)하는 알고리즘
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IPowerMeter.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.Initialize">
            <summary>
            장치및 통신 초기화
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.CtlStart">
            <summary>
            데이타 수집 시작
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.CtlStop">
            <summary>
            데이타 수집 종료
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.CtlClear">
            <summary>
            데이타 모두 삭제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.CtlReset">
            <summary>
            에러 등 상태 리셋
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.NotifyStarted(SpiralLab.Sirius.IPowerMeterArg)">
            <summary>
            측정 시작
            </summary>
            <param name="arg">IPowerMeterArg 인자</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.NotifyMeasure(SpiralLab.Sirius.IPowerMeterArg)">
            <summary>
            측정 값 전달
            </summary>
            <param name="arg">IPowerMeterArg 인자</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.NotifyStopped(SpiralLab.Sirius.IPowerMeterArg)">
            <summary>
            측정 중단
            </summary>
            <param name="arg">IPowerMeterArg 인자</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.NotifyFinished(SpiralLab.Sirius.IPowerMeterArg)">
            <summary>
            측정 종료
            </summary>
            <param name="arg">IPowerMeterArg 인자</param>
        </member>
        <member name="M:SpiralLab.Sirius.IPowerMeter.NotifyCleared(SpiralLab.Sirius.IPowerMeterArg)">
            <summary>
            측정 데이타 삭제
            </summary>
            <param name="arg">IPowerMeterArg 인자</param>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterThorlabArg">
            <summary>
            파워 계측 전달 인자
            Thorlab PM100D, PM100A, PM100USB, PM200, PM400 전용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.XName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.XValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.StartTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.EndTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.DateTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.PowerCategory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.ThorlabPowerDensity">
            <summary>
            파워 밀도 / Thorlab PM100USB 용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.ThorlabEnergy">
            <summary>
            에너지 (J) / Thorlab PM100USB 용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.ThorlabCurrent">
            <summary>
            커런트 (A) / Thorlab PM100USB 용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.ThorlabFrequency">
            <summary>
            측정 주기 (Hz) / Thorlab PM100USB 용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.PowerWatt">
            <summary>
            측정된 파워값 (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorlabArg.Empty">
            <summary>
            생성 초기값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorlabArg.#ctor(System.String,System.Single,System.String)">
            <summary>
            생성자
            </summary>
            <param name="xName">파라메터 X 이름</param>
            <param name="xValue">파러메터 X 값 / watt(W), current(A), pulse width(um), voltage(V), duty width(%)</param>
            <param name="powerCategory">파워 카테고리 (Series 이름)</param>
        </member>
        <member name="T:SpiralLab.Sirius.PowerMeterThorLabsPMSeries">
            <summary>
            Thorlabs 파워메터 PM 시리즈
            PM100D, PM100A, PM100USB, PM200, PM400
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.OnStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.OnMeasured">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.OnStopped">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.OnFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.OnCleared">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.SamplingRateHz">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.PowerMeasureArg">
            <summary>
            파워 계측시 사용되는 인자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Tag">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Data">
            <summary>
            버퍼 큐
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.MaxBufferCounts">
            <summary>
            측정 데이타 큐의 버퍼 최대 크기(개수)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.#ctor(System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="maxBufferCounts">버퍼의 최대 크기</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.#ctor(System.Int32,System.String,System.String,System.Single,System.Int32)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호</param>
            <param name="name">이름</param>
            <param name="serialNo">시리얼 번호</param>
            <param name="samplingRateHz">측정 주기</param>
            <param name="maxBufferCounts">최대 버퍼 크기(측정 데이타 저장용 버퍼 크기)</param>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Dispose">
            <summary>
            자원해제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.CtlStart">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.NotifyMeasure(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.NotifyStarted(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.NotifyStopped(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.NotifyFinished(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.PowerMeterThorLabsPMSeries.NotifyCleared(SpiralLab.Sirius.IPowerMeterArg)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.MotorEvent">
            <summary>
            모터 이벤트 통지 핸들러
            </summary>
            <param name="motor">모터</param>
            <param name="arg">인자</param>
        </member>
        <member name="T:SpiralLab.Sirius.IMotor">
            <summary>
            모터 인터페이스
            단축용
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IMotor.MotorHomed">
            <summary>
            원점 탐색(홈 초기화) 완료시 이벤트 통지용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.SyncRoot">
            <summary>
            동기화 객체
            데이타 처리시 크로스 쓰레드 방지용으로 사용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.TargetPosition">
            <summary>
            절대 위치 (mm)
            <para>설정시 이동됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.ActualPosition">
            <summary>
            실제 위치값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.DeltaPosition">
            <summary>
            상대 위치 (mm)
            <para>설정시 이동됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.TargetPositionVelocity">
            <summary>
            위치 이동 속도 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsReady">
            <summary>
            준비 상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsBusy">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsServoAlarm">
            <summary>
            서보 알람 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsInPos">
            <summary>
            명령 지점 도착 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsServoOn">
            <summary>
            서보 온오프 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsCwSenOn">
            <summary>
            Cw 리미트 센서 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsCCwSenOn">
            <summary>
            CCw 리미트 센서 
             </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.IsOrgSenOn">
            <summary>
            Origin(Home) 센서 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.MaxVelocity">
            <summary>
            최대 속도 제한값 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMotor.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.Initialize">
            <summary>
            초기화
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlServo(System.Boolean)">
            <summary>
            서보 온오프
            </summary>
            <param name="onOff">온오프</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            <para>비동기 함수 (완료전에 리턴됨)</para>
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlResetCount(System.Single)">
            <summary>
            엔코더 카운터 리셋
            </summary>
            <param name="position">오프셋 값</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치 이동
            <para>비동기 함수 (이동 완료전에 리턴됨)</para>
            </summary>
            <param name="position">위치값 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            <para>비동기 함수 (이동 완료전에 리턴됨)</para>
            </summary>
            <param name="distance">거리값 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlMoveStop">
            <summary>
            정지
            <para>비동기 함수 (완료전에 리턴됨)</para>
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.Update">
            <summary>
            모터 상태 업데이트
            <para>하드웨어 상태 -> 내부 상태 메모리</para>
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IMotor.NotifyHomed(SpiralLab.Sirius.IMotorArg)">
            <summary>
            원점 초기화(홈) 이벤트 통지 (상속 구현시 외부에서 호출 지원)
            </summary>
            <param name="arg">IMotorArg 인자</param>
        </member>
        <member name="T:SpiralLab.Sirius.MotorAjinExtekArg">
            <summary>
            Motor AjinExtek AXL Arg 인자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorAjinExtek">
            <summary>
            Motor AjinExtek AXL
            아진엑스텍 AXL 단축용
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorAjinExtek.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.SyncRoot">
            <summary>
            동기화 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.No">
            <summary>
            모터 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.Name">
            <summary>
            모터 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.TargetPosition">
            <summary>
            지령 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.ActualPosition">
            <summary>
            실제 위치 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsReady">
            <summary>
            준비상태 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsBusy">
             <summary>
             구동중 여부
             </summary>
            [RefreshProperties(RefreshProperties.All)]
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsError">
            <summary>
            알람 발생 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsServoAlarm">
            <summary>
            서보 알람 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsHomeSearching">
            <summary>
            원점 검색중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsInPos">
            <summary>
            명령 지점 도착 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsHomeSearched">
            <summary>
            원점 검색 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsServoOn">
            <summary>
            서보 온오프 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsDriving">
            <summary>
            구동중 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsCwSenOn">
            <summary>
            CW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsCCwSenOn">
            <summary>
            CCW 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.IsOrgSenOn">
            <summary>
            ORG 센서 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.PulsePerMm">
            <summary>
            모터 스케일 설정 : Pulses/mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.MaxVelocity">
            <summary>
            최대 속도를 제한값 (mm/s)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.ConvertMmToPulse(System.Single)">
            <summary>
            mm -> pulse
            </summary>
            <param name="mm"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.ConvertPulseToMm(System.Single)">
            <summary>
            pulse -> mm
            </summary>
            <param name="pulse"></param>
            <returns></returns>
        </member>
        <member name="P:SpiralLab.Sirius.MotorAjinExtek.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.#ctor(System.Int32,System.String,System.Single)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
            <param name="pulsePerMm">펄스와 사용자 단위(mm)간 비율값</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlServo(System.Boolean)">
            <summary>
            서보 온오프
            </summary>
            <param name="onOff"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlHomeSearch">
            <summary>
            홈(원점) 검색 시작
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlResetCount(System.Single)">
            <summary>
            엔코더 카운터 리셋
            </summary>
            <param name="position">오프셋 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveAbs(System.Single,System.Single)">
            <summary>
            절대 위치로 이동
            </summary>
            <param name="position">위치 (mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveRel(System.Single,System.Single)">
            <summary>
            상대 위치 이동
            </summary>
            <param name="distance">거리값(mm)</param>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveJog(System.Single)">
            <summary>
            조그 속도 이동
            </summary>
            <param name="vel">속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlMoveStop">
            <summary>
            정지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.CtlReset">
            <summary>
            알람 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.MotorAjinExtek.Update">
            <summary>
            상태 업데이트
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotorVirtualArg">
            <summary>
            Motor Virtual Arg 인자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtualArg.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtualArg.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotorVirtual">
            <summary>
            Motor Virtual
            단축용
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.MotorVirtual.PropertyChanged">
            <summary>
            속성 변경 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.No">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.TargetPosition">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.ActualPosition">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.DeltaPosition">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.TargetPositionVelocity">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsInPos">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsHomeSearched">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsServoOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsDriving">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsCwSenOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsCCwSenOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.IsOrgSenOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.MaxVelocity">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.MotorVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="no">축 번호</param>
            <param name="name">축 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlHomeSearch">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlResetCount(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlServo(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveAbs(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveRel(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveJog(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlMoveStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.MotorVirtual.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.RtcHelper">
            <summary>
            RTC 헬퍼 클래스
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcHelper.DetectRtcCardCount(System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            장치관리자에 등록된 RTC 카드의 개수 정보 
            </summary>
            <param name="rtc4Count">설치된 RTC 4 카드 개수</param>
            <param name="rtc5Count">설치된 RTC 5 카드 개수</param>
            <param name="rtc6Count">설치된 RTC 6 카드 개수</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.DoubleDot12TypeConverter">
            <summary>
            부동소수점 변환기
            소수점 이하 12 자리표기용
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Vector2Converter">
            <summary>
            Numerics.Vector2 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Vector3Converter">
            <summary>
            Vector2 타입 변환기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.XmlFileBrowser">
            <summary>
            시스템에서 지원하는 이미지 코덱 목록
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionFileBrowser">
            <summary>
            보정 파일 목록
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.UiHelper">
            <summary>
            UI 유틸리티 기능들
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.UiHelper.PropertyBrowsable(System.Type,System.String,System.Boolean)">
            <summary>
            PropertyGrid 의 속성창에서 지정된 타입의 속성 필드 출력 여부
            </summary>
            <param name="type">객체 타입</param>
            <param name="name">속성 이름</param>
            <param name="visible">표시 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.ScanMasterController">
            <summary>
            ScanMaster Controller 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Count">
            <summary>
            인스턴스 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.KFactor">
            <summary>
            bits/mm 값 (2^16)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.IsActivateFastBuffer">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.FastBufferStartSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.BufferMax">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.IsMOTF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 2개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~2)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScanMasterController.Now">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb)을 RTC 내부 메모리로 로딩 / ctismc의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ctb 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            <para>
            ctismc의 경우 2개의 버퍼 테이블만 사용 가능
            </para>
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlMove(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlMove(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlStandBy(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListWait(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListLaserOn(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListJump(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListJump(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListMark(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListMark(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.ScanMasterController.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.GCodeCommand">
            <summary>
            G코드 명령 
            </summary>
            <param name="rtc">RtcGCode 인스턴스</param>
            <param name="gCode">Gzhem</param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcGCode">
            <summary>
            RTC GCode 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Count">
            <summary>
            인스턴스 개수
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.RtcGCode.OnCommanded">
            <summary>
            G 코드 명령 발생 이벤트
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.NotifyCommanded(System.String)">
            <summary>
            명령 발생 통지
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Index">
            <summary>
            RTC 제어기 식별 번호 (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.MatrixStack">
            <summary>
            행렬 스택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.KFactor">
            <summary>
            bits/mm 값 (2^16)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.FieldSizeLimit">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            내부 필드 영역을 벋어날 경우 에러 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.LaserMode">
            <summary>
            레이저 모드(CO2, Yag1,2,3,4, ...)
            Laser1,2 출력핀의 타이밍 종류 선택
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Frequency">
            <summary>
            마지막 설정된 주파수 값(Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.PulseWidth">
            <summary>
            마지막 설정된 펄스폭 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.IsMOTF">
            <summary>
            MOTF 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Is2ndHead">
            <summary>
            2nd 헤드 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Is3D">
            <summary>
            3D 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부 (RTC6만 유효)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부 (RTC6만 유효)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부 (RTC6만 유효)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 2개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~2)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~2)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.IsDateTimeOffset">
            <summary>
            DateTime 오프셋 사용여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.DateTimeOffsetDays">
            <summary>
            0 일 경우 현재 일자로 처리됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.DateTimeOffsetHours">
            <summary>
            오프셋 시간
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.DateTimeOffsetMinutes">
            <summary>
            오프셋 분
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.DateTimeOffsetSeconds">
            <summary>
            오프셋 초
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcGCode.Now">
            <summary>
            가공을 시작할때의 기준 시간
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC 카드 초기화
            </summary>
            <summary>
            RTC 카드 초기화
            </summary>
            <param name="kFactor">k factor = bits/mm</param>
            <param name="laserMode">LaserMode 열거형</param>
            <param name="ctbFileName">주 스캐너의 보정 테이블(Table1)에 Load/Select 하려는 .ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb)을 RTC 내부 메모리로 로딩
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ctb 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlLaserOn">
            <summary>
            현재 설정된 주파수, 펄스폭 으로 레이저 변조 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlLaserOff">
            <summary>
            레이저 변호 신호 (LASER1,2,ON) 중단
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlLaserSignal(System.Boolean)">
            <summary>
            레이저 시그날 활성화 여부
            </summary>
            <param name="onOff"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlMove(System.Numerics.Vector2)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlMove(System.Single,System.Single)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlStandBy(System.Single,System.Single)">
            <summary>
            스탠바이 주파수와 펄스폭
            (Co2 레이저 모드 사용시 유용)
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : double)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 레이저 출사 시간
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">회전량 (+ : CCW, - : CW)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도</param>
            <param name="sweepAngle">각도 회전량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <param name="angleDelta">각도 미분량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(uint), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 입력 조건에 맞으면, 확장1 포트의 16비트 지정된 비트 위치로 출력
            </summary>
            <param name="inputHighBitMask">조건1 : 확장1포트 입력이 High(1) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="inputLowBitMask">조건2 : 확장1포트 입력이 Low(0) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="outputBitMask">위 조건1,2 가 맞을때 출력을 변경할 확장1 포트의 출력 비트 마스크</param>
            <param name="onOff">확장1 포트의 출력 비트를 set(1) 할지 아니면 clear(0) 할지 여부</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <summary>
            확장1 포트의 16비트 디지털 입력이 조건에 맞을때까지 리스트 명령 수행을 대기
            </summary>
            <param name="inputHighBitMask">조건1 : 확장1포트 입력이 High(1) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="inputLowBitMask">조건2 : 확장1포트 입력이 Low(0) 인 비트 마스크 (0 = Don't Care)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.RtcGCode.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령의 실행이 완료될때까지 대기</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc4ExternalControlMode">
            <summary>
            RTC4 외부 트리거 모드 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4ExternalControlMode.Bit.ExternalStart">
            <summary>
            /START 핀 사용
            = 1 The external start input is enabled. The externals tart signal corresponds to the command execute_list_1 or execute_list_1. The external stop signal corresponds to the command stop_execution.
            = 0 no external start signal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4ExternalControlMode.Bit.ExternalStartDelayOff">
            <summary>
            = 1 The external start delay (encoder delay) is turned off.
            = 0 No effect
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            = 1 The external start input is not disabled by an external stop request
            = 0 The external start input is disabled by an external stop request
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4ExternalControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.Add(SpiralLab.Sirius.Rtc4ExternalControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.Remove(SpiralLab.Sirius.Rtc4ExternalControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.Contains(SpiralLab.Sirius.Rtc4ExternalControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4ExternalControlMode.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4ExternalControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc4">
            <summary>
            RTC4 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Count">
            <summary>
            인스턴스 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.KFactor">
            <summary>
            bits/mm 값 (2^16)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsActivateFastBuffer">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.FastBufferStartSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.BufferMax">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsMOTF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 (최대 2개 로드 가능)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PrimaryHeadTable">
            <summary>
            첫번째 스캐너 헤드 보정 테이블 번호 (1~2)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.SecondaryHeadTable">
            <summary>
            두번째 스캐너 헤드 보정 테이블 번호 (1~4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.BaseDistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.CoefA">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.CoefB">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.CoefC">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.FLength">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.KZFactorScale">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc4.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncoderType">
            <summary>
            실행중인 리스트 명령의 MOTF 엔코더 타입
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.MotfAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc4.Now">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb)을 RTC 내부 메모리로 로딩 / RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctbFileName">.ctb 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 파일을 설정
            <para>
            RTC4의 경우 2개의 버퍼 테이블만 사용 가능
            </para>
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMove(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMove(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlStandBy(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWait(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListLaserOn(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListJump(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListJump(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMark(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMark(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlHomePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlHomePosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlQSwitchDelay(System.Single)">
            <summary>
            Q 스위치 지연 시간값 설정
            RTC4 는 미지원
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정 (RTC4는 미지원. 보드상의 접점을 납땜하시오)
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlExternalStartCounts(System.UInt32@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 튜닝 모드 
            RTC5/6 + intelli~ 스캐너 제품군 전용
            RTC4는 미지원
            </summary>
            <param name="jumpMode"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            RTC내부 마킹 정보
            RTC4는 미지원
            </summary>
            <param name="markingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            RTC4 미지원
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListQSwitchDelay(System.Single)">
            <summary>
            리스트 명령 - Q 스위치 지연 시간값 설정
            RTC4 는 미지원
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListSkyWritingBegin(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - Sky Writing 시작
            RTC4 카드는 미지원
            </summary>
            <param name="mode">1,2,3</param>
            <param name="laserOnShift">usec</param>
            <param name="timeLag">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (모드3 전용)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListSkyWritingEnd">
            <summary>
            리스트 명령 - Sky Writing 끝
            RTC4 카드는 미지원
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListWobbel(System.Single,System.Single,System.Single,SpiralLab.Sirius.WobbelShape)">
            <summary>
            리스트 명령 - 와블 (Wobbel Operation)
            RTC4 카드는 Ellipse 형상만 지원됨
            </summary>
            <param name="longitudinal">Longitudinal (세로 : parallel movement) (mm)</param>
            <param name="transverse">transverse (가로 : perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (Hz)</param>
            <param name="wobbelShape"> 형상 (타원 모양, 8자 모양)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlConvertMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMove(System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlZOffset(System.Single)">
            <summary>
            Z 오프셋 
            해당 기능을 제공하는 RTC4 함수가 없다
            (2nd헤드 사용시 혼용 불가)
            </summary>
            <param name="offset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlLoadZTable(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlZDistance(System.Numerics.Vector3,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListZOffset(System.Single)">
            <summary>
            리스트 명령 - Z 오프셋 
            해당 기능을 제공하는 RTC4 함수가 없다
            (2nd헤드 오프셋과 함께 사용불가)
            </summary>
            <param name="offset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListJump3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListJump3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMark3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMark3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListArc3D(System.Numerics.Vector3,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListArc3D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListPixelLine3D(System.Single,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            RTC4 미지원
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy, dz) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfEncoderReset(System.Single,System.Single)">
            <summary>
            RTC4 카드는 미지원
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfEncoderSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfGetAngularEncoder(System.Int32@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfEncoderAngularSpeed(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfTrackingError(System.UInt32,System.UInt32)">
            <summary>
            Motf 사용시 스캐너의 트래킹 에러 보상
            RTC4 카드는 미지원
            </summary>
            <param name="xUsec">X 축 보상 시간(usec)</param>
            <param name="yUsec">Y 축 보상 시간(usec)</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfCompensateTable(System.String,System.UInt32)">
            <summary>
            RTC4 카드는 미지원
            </summary>
            <param name="fileName">보정 파일 이름 (경로포함), null 지정시 보정 리셋됨</param>
            <param name="tableNo">테이블 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.CtlMotfOverflowClear">
            <summary>
            MOTF 영역 벋어남 오류 리셋
            오류 여부는 RtcMarkingInfo 에서 제공됨 
            RTC4 미지원
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfBegin(System.Boolean)">
            <summary>
            리스트 명령 - MOTF 리스트 명령 시작
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </summary>
            <param name="encoderReset">엔코더 X,Y 초기화 여부 (RTC4는 무조건 초기화됨) (</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfOverflowClear">
            <summary>
            MOTF XY / MOTF Angular 영역 벋어남 오류 리셋
            오류 여부는 RtcMarkingInfo 에서 제공됨 
            RTC4 미지원
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfLimitIf(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위 조건에 맞으면 다음 리스트 명령 실행. 맞지 않으면 건너뜀
            RTC4 미지원
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위를 설정
            RTC4 는 미지원
            </summary>
            <param name="xRange">X 영역 크기</param>
            <param name="yRange">Y 영역 크기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            리스트 명령 - 외부 트리거 시작 (External Start) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            RTC4는 미지원
            (단축 동기화 용)
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfAngularWait(System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            RTC4는 미지원
            </summary>
            <param name="angle">각도</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfWaitRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            RTC4는 미지원
            </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfEnd(System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF 로 동작하는 리스트 명령 끝
            MOTF 종료시 스캐너를 지정된 위치로 점프 가능
            </summary>
            <param name="vPosition">점프 위치 (x,y) (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc4.ListMotfCall(System.UInt32,System.UInt32)">
            <summary>
            특정 리스트 주소(위치)로 점프하여 연속 가공
            </summary>
            <param name="listPosition">리스트 위치 (0 ~ 2^16-1)</param>
            <param name="repeats">무제한 회수로 강제됨</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5LaserControlSignal">
            <summary>
            RTC5 용 레이저 제어 신호 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.PulseSwitchSetting">
            <summary>
            Pulse Switch Setting (does not apply neither to laser mode 4 nor to laser mode 6):
            <para>
            The setting only affects those laser control signals (more precisely: those LASER1 or LASER2 “laser active” modulation pulses in CO2 mode or LASER1 Q-Switch pulses in the YAG modes) that are not yet fully processed at completion of the LASERON signal.
            = 0: The signals are cut off at the end of the LASERON signal.
            = 1: The final pulse fully executes despite completion of the LASERON signal.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.PhaseShift">
            <summary>
            Phase shift of the laser control signals (does not apply neither to laser mode 4 nor to laser mode 6).
            <para>
            = 0: No phase shift.
            = 1: CO2 mode: The LASER1 signal is exchanged with the LASER2 signal.
            YAG modes: The LASER1 is shifted back 180° (half a signal period)
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.DisableLaserActiveSignal">
            <summary>
             Enabling or disabling of laser control signals for “Laser active” operation
             <para>
            = 0: The “Laser active” laser control signals are enabled.
            = 1: The “Laser active” laser control signals are disabled (then the laser output ports are in the high impedance tristate mode).
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.LaserOnSignalLevelLow">
            <summary>
            LASERON signal level.
            <para>
            = 0: The signal at the LASERON port is set to active-high.
            = 1: The signal at the LASERON port is set to active-low.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.Laser12SignalLevelLow">
            <summary>
            LASER1/LASER2 signal level.
            <para>
            = 0: The signals at the LASER1 and LASER2 output ports are set to active-high.
            = 1: The signals at the LASER1 and LASER2 output ports are set to active-low.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.ExtPulseSignalRisingEdge">
            <summary>
             Determines for laser_on_pulses_freq whether external signal pulses (at the LASER connector’s DIGITAL IN1 digital input) are to be counted at rising or falling edges:
             <para>
            = 0: At the falling edge.
            = 1: At the rising edge
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.OutputSynchronization">
            <summary>
            출력 주파수(주기) 동기화
            <para>
            = 0: Output synchronization is switched off (default setting).
            = 1: Output synchronization is switched on
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.ConstantLaserPulseLength">
            <summary>
            
            <para>
            = 0: The constant pulse length mode is switched off (default setting).
            = 1: The constant pulse length mode is switched on
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5LaserControlSignal.Bit.AutomaticMonitoringToStop">
            <summary>
            = 1: In case of error, automatic monitoring (laser-signal auto-suppression) automatically generates a /STOP signal (list stops, laser control signals get permanently switched off).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5LaserControlSignal.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.Add(SpiralLab.Sirius.Rtc5LaserControlSignal.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.Remove(SpiralLab.Sirius.Rtc5LaserControlSignal.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.Contains(SpiralLab.Sirius.Rtc5LaserControlSignal.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5LaserControlSignal.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5LaserControlSignal.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5ExternalControlMode">
            <summary>
            RTC5 외부 트리거 모드 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.ExternalStart">
            <summary>
            /START 트리거 사용여부
            <para>
            = 1: The external start input (by /START, /START2 or /Slave-START) is enabled.
            = 0: The external start input is disabled.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.ExternalStop">
            <summary>
            /STOP 트리거 사용여부
            <para>
            = 1: An external list stop (/STOP, /STOP2, /Slave-STOP or simulate_ext_stop) causes explicit cancellation of the external start queue’s entries (/START, /START2, /Slave-START or simulate_ext_start).
            = 0: No effect.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.TrackDelay">
            <summary>
            시작 지연 시간 사용여부
            <para>
            = 1: The track delay (defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list) that postpones execution of the list start relative to the triggering input signal or simulate_ext_start or simulate_ext_start_ctrl command (see ”External List Start”, page 240) is deactivated.
            = 0: No effect.To define and activate the track delay (e.g. for Processing-on-the-fly applications), use the command simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            /START 트리거 재사용 여부
            <para>
            = 1: The external start input is not disabled by an external stop request.
            = 0: The external start input is disabled by an external stop request
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.DisableSimulateExtCtrl">
            <summary>
             Disables simulate_ext_start_ctrl. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.EncoderReset">
            <summary>
            엔코더 리셋 (초기화) 여부
            <para>
            = 1: Encoder resets of the two internal encoder counters (initiated by the Processing-on-the-fly commands set_fly_x, set_fly_y or set_fly_rot) occur after the subsequent start trigger(i.e.the subsequent external start signal or simulate_ext_start or simulate_ext_start_ctrl command, possibly postponed by a track delay defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list, see also bit #2).
            = 0: Encoder resets occur immediately with each initiating Processing-on-the-fly command.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5ExternalControlMode.Bit.TrackDelayConfig">
            <summary>
            TrackDelayConfig
            <para>
            = 1: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the most recent externally (but not with execute_list_pos etc.) triggered or simulated external list start.The interval between subsequent external list starts (in encoder pulses) is thus constant(see also page 242). For stop_execution or an external stop signal, bit #10 gets reset to “0”. This bit has no effect if the firmware version is 506 or lower(see get_rtc_version).
            = 0: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the time point an external list start was requested(i.e.with the corresponding simulate_ext_start or simulate_ext_start_ctrl command or external start signal). The interval between subsequent external list starts (in encoder pulses) can thus vary.This is standard for firmware version 506 or lower(see get_rtc_version).
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5ExternalControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.Add(SpiralLab.Sirius.Rtc5ExternalControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.Remove(SpiralLab.Sirius.Rtc5ExternalControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.Contains(SpiralLab.Sirius.Rtc5ExternalControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5ExternalControlMode.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5ExternalControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5JumpMode">
            <summary>
            RTC5 점프 모드 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.Flag">
            <summary>
            점프 모드 플래그
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.LimitLength">
            <summary>
            mm 값 입력 (자동으로 bits 로 내부 계산됨)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.VectorTuningPrimaryX">
            <summary>
            VA1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.VectorTuningPrimaryY">
            <summary>
            VA2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.VectorTuningSecondaryX">
            <summary>
            VB1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.VectorTuningSecondaryY">
            <summary>
            VB2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.JumpTuningPrimaryX">
            <summary>
            JA1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.JumpTuningPrimaryY">
            <summary>
            JA2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.JumpTuningSecondaryX">
            <summary>
            JB1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.JumpTuningSecondaryY">
            <summary>
            JB2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5JumpMode.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5JumpMode.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5JumpMode.#ctor(SpiralLab.Sirius.Rtc5)">
            <summary>
            생성자
            </summary>
            <param name="owner">대상 RTC5 객체</param>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5MarkingInfo">
            <summary>
            Marking Info 객체
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInXDirection">
            <summary>
            X &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInXDirection">
            <summary>
            X &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInYDirection">
            <summary>
            Y &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInYDirection">
            <summary>
            Y &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInXUserDirection">
            <summary>
            X &lt; Xmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInXUserDirection">
            <summary>
            X &gt; Xmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInYUserDirection">
            <summary>
            Y &lt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInYUserDirection">
            <summary>
            Y &gt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.TriggerError">
            <summary>
            TriggerError: an enabled external trigger or simulated trigger occurred during execution of a list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.ActivateFlyError">
            <summary>
            ActivateFlyError: an error has occurred during activation of Processing-on-the-fly correction by activate_fly_2d or activate_fly_xy 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInZDirection">
            <summary>
            Z &lt; –32.768
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInZDirection">
            <summary>
            Z &gt; +32.767
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfUnderflowInZUserDirection">
            <summary>
            Z &lt; Zmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5MarkingInfo.Bit.MotfOverflowInZUserDirection">
            <summary>
            Z &gt; Zmax
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5MarkingInfo.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.Add(SpiralLab.Sirius.Rtc5MarkingInfo.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.Remove(SpiralLab.Sirius.Rtc5MarkingInfo.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.Contains(SpiralLab.Sirius.Rtc5MarkingInfo.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5MarkingInfo.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5MarkingInfo.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc5">
            <summary>
            RTC5 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Count">
            <summary>
            인스턴스 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.KFactor">
            <summary>
            bits/mm 값 (2^20)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsActivateFastBuffer">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.FastBufferStartSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.BufferMax">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.RTC5_LIST3_BUFFER_SIZE">
            <summary>
            색인 문자용 버퍼 크기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DllVersion">
            <summary>
            RTC DLL 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.HexVersion">
            <summary>
            RTC HEX 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.RtcVersion">
            <summary>
            RTC 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.RtcSerial">
            <summary>
            RTC 일련번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.InitLaser12SignalLevel">
            <summary>
            RTC5 카드의 15핀 레이저 커넥터 설정
            <para>
            Laser1(Pin1), Laser2(Pin9) 출력 신호 레벨
            초기화(Initialize) 시 적용됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.InitLaserOnSignalLevel">
            <summary>
            RTC5 카드의 15핀 레이저 커넥터 설정
            <para>
            LaserOn(Pin2) 출력 신호 레벨
            초기화(Initialize) 시 적용됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.InternalRtcLaserControlSignalBits">
            <summary>
            RTC 제어 신호 레벨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.InternalRtcExternalControlMode">
            <summary>
            RTC 외부 제어 모드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.RtcExternalControlMaxCounts">
            <summary>
            /START 트리거 최대 회수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.InternalRtcMarkingInfo">
            <summary>
            RTC Marking Info
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.RtcMarkingInfo">
            <summary>
            get_marking_info 상태 구조체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.RtcJumpMode">
            <summary>
            점프 튜닝 모드 
            <para>
            RTC5/6 + intelli~ 스캐너 제품군 전용
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsMOTF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.CorrectionFiles">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PrimaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SecondaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.BaseDistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.CoefA">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.CoefB">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.CoefC">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.FLength">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.KZFactorScale">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc5.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.AutoLaserControlByPositionFileName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.AutoLaserControlByPositionTableNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.AutoLaserControlSignal">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncoderType">
            <summary>
            실행중인 리스트 명령의 MOTF 엔코더 타입
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.MotfAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SerialStartNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SerialIncrementStep">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.SerialExternalNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc5.Now">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <inheritdoc/>     
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ct5)을 RTC 내부 메모리로 로딩
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ct5FileName">.ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMove(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMove(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlStandBy(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetErrMsg(System.UInt32)">
            <summary>
            RTC5 내부 에러코드에 해당하는 메시지
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWait(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListLaserOn(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            데이타 중복 여부
            </summary>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.IsListReady(System.UInt32)">
            <summary>
            내부 버퍼 메모리 상태 처리
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlHomePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlHomePosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlQSwitchDelay(System.Single)">
            <summary>
            Q 스위치 지연 시간값 설정
            <para>
            레이저 모드에 따라 다르게 적용됨
            Yag1 : 0
            Yag2 : FPK 로 설정
            Yag3 : 10usec 고정
            Yag5 : 이 함수로 설정된 값
            </para>
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlExternalStartCounts(System.UInt32@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 튜닝 모드 
            <para>
            RTC5/6 + intelli~ 스캐너 제품군 전용
            </para>
            </summary>
            <param name="jumpMode">Rtc5JumpMode</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <summary>
            로드된 보정 파일의 헤더 정보 조회
            </summary>
            <param name="tableIndex">테이블 번호 (Table1)</param>
            <param name="parameter">CorrectionFileHeader 열거 항목</param>
            <param name="data">조회된 데이타</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            3D 보정 파일에서 계수 A,B,C 읽기
            </summary>
            <param name="fileName"></param>
            <param name="coefA"></param>
            <param name="coefB"></param>
            <param name="coefC"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <summary>
            3D 보정 파일에 계수 A,B,C 쓰기
            </summary>
            <param name="fileName"></param>
            <param name="coefA"></param>
            <param name="coefB"></param>
            <param name="coefC"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            마킹 정보 얻기
            </summary>
            <param name="info">Rtc5MarkingInfo</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            <para>
            RTC5 미지원
            </para>
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListQSwitchDelay(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSkyWritingBegin(System.UInt32,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSkyWritingEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListWobbel(System.Single,System.Single,System.Single,SpiralLab.Sirius.WobbelShape)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpHard(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="vPosition">x,y 위치</param>
            <param name="laserOn">usec</param>
            <param name="laserOff">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpHard(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="x">x,y 위치</param>
            <param name="y">x,y 위치</param>
            <param name="laserOn">usec</param>
            <param name="laserOff">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpMode(SpiralLab.Sirius.JumpModeFlag)">
            <summary>
            리스트 명령 - 점프 모드 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="flag">-1 : Disabled, 0 : Enabled but Diactived, 1: Enabled and Activated</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            <para>
            intelli~ 제품군
            </para>
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJumpDrill(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            <para>
            intelli~ 제품군
            </para>
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlConvertMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,SpiralLab.Sirius.AutoLaserControlMode,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListAutoLaserControl``1(``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListAlcByVectorBegin``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListAlcByVectorEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMove(System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlZOffset(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlLoadZTable(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlZDistance(System.Numerics.Vector3,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListZOffset(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListJump3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMark3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc3D(System.Numerics.Vector3,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListArc3D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListPixelLine3D(System.Single,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfEncoderReset(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfEncoderSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfTrackingError(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfCompensateTable(System.String,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfGetAngularEncoder(System.Int32@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfEncoderAngularSpeed(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlMotfOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfBegin(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfLimitIf(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfAngularWait(System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfWaitRange(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListMotfCall(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterBegin(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlCharacterSetClear(SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSerialReset(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListText(System.String,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListDate(SpiralLab.Sirius.DateFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListTime(SpiralLab.Sirius.TimeFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSerial(System.UInt32,SpiralLab.Sirius.SerialFormat,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSerialConfig(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.CtlSerialRead(System.Byte[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc5.ListSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6LaserControlSignal">
            <summary>
            RTC6 용 레이저 제어 신호 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.PulseSwitchSetting">
            <summary>
            Pulse Switch Setting (does not concern Laser Mode 4 or Laser Mode 6).
            <para>
            The setting only affects those laser control signals (more precisely: those LASER1 or LASER2 “laser active” modulation pulses in CO2 Mode or LASER1 Q-Switch pulses in the YAG modes) that are not yet fully processed at completion of the LASERON signal.
            = 0: The signals are cut off at the end of the LASERON signal.
            = 1: The final pulse fully executes despite completion of the LASERON signal.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.PhaseShift">
            <summary>
            Phase shift of the laser control signals (does not concern Laser Mode 4 or Laser Mode 6).
            <para>
            = 0: No phase shift.
            = 1: CO2 Mode: The LASER1 signal is exchanged with the LASER2 signal. YAG modes: The LASER1 is shifted back 180° (half a signal period).
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.DisableLaserActiveSignal">
            <summary>
            Enabling or disabling of laser control signals for “Laser active” operation.
            <para>
            = 0: The “Laser active” laser control signals are enabled.
            = 1: The “Laser active” laser control signals are disabled (then the laser output ports are in the high impedance tristate mode).
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.LaserOnSignalLevelLow">
            <summary>
             LASERON signal level.
             <para>
            = 0: The signal at the LASERON port is set to active-HIGH.
            = 1: The signal at the LASERON port is set to active-LOW.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.Laser12SignalLevelLow">
            <summary>
             LASER1/LASER2 signal level.
             <para>
            = 0: The signals at the LASER1 and LASER2 output ports are set to active-HIGH.
            = 1: The signals at the LASER1 and LASER2 output ports are set to active-LOW
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.ExtPulseSignalRisingEdge">
            <summary>
            Determines for laser_on_pulses_list whether external signal pulses (at the LASER connector’s DIGITAL IN1 digital input) are to be counted at rising or falling edges:
            <para>
            = 0: At the falling edge.
            = 1: At the rising edge.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.OutputSynchronization">
            <summary>
            출력 주파수 동기화
            <para>
            = 0: Output synchronization is switched off (default setting).
            = 1: Output synchronization is switched on.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.ConstantLaserPulseLength">
            <summary>
            
            <para>
            = 0: The “constant pulse length” mode is switched off (default setting).
            = 1: The “constant pulse length” mode is switched on.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.AutomaticMonitoringToStop">
            <summary>
            = 1: In case of error, automatic monitoring (automatic suppression of laser control signals) automatically generates a /STOP signal (list stops, laser control signals get permanently switched off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6LaserControlSignal.Bit.StopToAllMasterSlave">
            <summary>
            = 1: In case of error according to Bit #28, the stop_execution is forwarded as /Master-STOP 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6LaserControlSignal.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.Add(SpiralLab.Sirius.Rtc6LaserControlSignal.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.Remove(SpiralLab.Sirius.Rtc6LaserControlSignal.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.Contains(SpiralLab.Sirius.Rtc6LaserControlSignal.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6LaserControlSignal.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6LaserControlSignal.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6ExternalControlMode">
            <summary>
            RTC6 외부 트리거 모드 비트 플래그용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.ExternalStart">
            <summary>
            /START 트리거 사용여부
            <para>
            = 1: The external start input (by /START, /START2 or /Slave-START) is enabled.
            = 0: The external start input is disabled
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.ExternalStop">
            <summary>
            /STOP 트리거 사용여부
            <para>
            = 1: An external stop (/STOP, /STOP2, /Slave-STOP or simulate_ext_stop) causes explicit cancellation of the external start queue’s entries (/START, /START2, /Slave-START             or simulate_ext_start).
            = 0: No effect
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.TrackDelay">
            <summary>
            트리거 지연 사용 여부
            <para>
            = 1: The track delay (defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list) that postpones execution of the start relative to the triggering input signal or simulate_ext_start or simulate_ext_start_ctrl command (see Section ”External Start”, page 268) is deactivated.
            = 0: No effect.To define and activate the track delay (for example, for Processing-on-the-fly applications), use simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            /START 트리거 재사용 여부
            <para>
            = 1: The external start input is not disabled by an external stop request. 
            = 0: The external start input is disabled by an external stop request.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.EncoderReset">
            <summary>
            엔코더 리셋(초기화) 여부
            <para>
            = 1: Encoder resets of the two internal encoder counters occur with an external start signal or simulate_ext_start or simulate_ext_start_ctrl, postponed by a track delay defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list, see also Bit #2).
            = 0: Encoder resets occur immediately with each initiating Processing-on-the-fly command.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6ExternalControlMode.Bit.TrackDelayConfig">
            <summary>
            TrackDelayConfig
            <para>
            = 1: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the most recent externally (but not with execute_list_pos etc.) triggered or simulated external list start.The interval between subsequent external list starts (in encoder pulses) is thus constant(see also page 242). For stop_execution or an external stop signal, bit #10 gets reset to “0”. This bit has no effect if the firmware version is 506 or lower(see get_rtc_version).
            = 0: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the time point an external list start was requested(i.e.with the corresponding simulate_ext_start or simulate_ext_start_ctrl command or external start signal). The interval between subsequent external list starts (in encoder pulses) can thus vary.This is standard for firmware version 506 or lower(see get_rtc_version).
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6ExternalControlMode.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.Add(SpiralLab.Sirius.Rtc6ExternalControlMode.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.Remove(SpiralLab.Sirius.Rtc6ExternalControlMode.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.Contains(SpiralLab.Sirius.Rtc6ExternalControlMode.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6ExternalControlMode.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6ExternalControlMode.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6JumpMode">
            <summary>
            RTC6 점프 모드 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.Flag">
            <summary>
            점프 모드 플래그
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.LimitLength">
            <summary>
            mm 값 입력 (자동으로 bits 로 내부 계산됨)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.VectorTuningPrimaryX">
            <summary>
            VA1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.VectorTuningPrimaryY">
            <summary>
            VA2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.VectorTuningSecondaryX">
            <summary>
            VB1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.VectorTuningSecondaryY">
            <summary>
            VB2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.JumpTuningPrimaryX">
            <summary>
            JA1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.JumpTuningPrimaryY">
            <summary>
            JA2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.JumpTuningSecondaryX">
            <summary>
            JB1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.JumpTuningSecondaryY">
            <summary>
            JB2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6JumpMode.Tag">
            <summary>
            사용자 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6JumpMode.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6JumpMode.#ctor(SpiralLab.Sirius.Rtc6)">
            <summary>
            생성자
            </summary>
            <param name="owner">대상 RTC6 객체</param>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6MarkingInfo">
            <summary>
            Marking Info 객체
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInXDirection">
            <summary>
            X &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInXDirection">
            <summary>
            X &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInYDirection">
            <summary>
            Y &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInYDirection">
            <summary>
            Y &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInXUserDirection">
            <summary>
            X &lt; Xmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInXUserDirection">
            <summary>
            X &gt; Xmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInYUserDirection">
            <summary>
            Y &lt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInYUserDirection">
            <summary>
            Y &gt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.TriggerError">
            <summary>
            TriggerError: an enabled external trigger or simulated trigger occurred during execution of a list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.ActivateFlyError">
            <summary>
            ActivateFlyError: an error has occurred during activation of Processing-on-the-fly correction by activate_fly_2d or activate_fly_xy 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInZDirection">
            <summary>
            Z &lt; –32.768
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInZDirection">
            <summary>
            Z &gt; +32.767
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfUnderflowInZUserDirection">
            <summary>
            Z &lt; Zmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6MarkingInfo.Bit.MotfOverflowInZUserDirection">
            <summary>
            Z &gt; Zmax
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6MarkingInfo.Value">
            <summary>
            4바이트 값
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.Add(SpiralLab.Sirius.Rtc6MarkingInfo.Bit)">
            <summary>
            비트 설정
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.Remove(SpiralLab.Sirius.Rtc6MarkingInfo.Bit)">
            <summary>
            비트 해제
            </summary>
            <param name="flag">비트</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.Contains(SpiralLab.Sirius.Rtc6MarkingInfo.Bit)">
            <summary>
            비트값 설정 여부
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6MarkingInfo.ToUInt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6MarkingInfo.Empty">
            <summary>
            기본값(0) 객체 생성
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AutoDelayParamMode">
            <summary>
            자동 지연 파라메터 모드    
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoDelayParamMode.Deactivate">
            <summary>
            비활성화 , 2: 지정된 인자로 설정됨. 
            <para>개발 테스트용</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoDelayParamMode.Load">
            <summary>
            스캔헤드에 미리 설정된 값을 로드하여 적용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoDelayParamMode.Develop">
            <summary>
            개발용 
            <para>
            지정된 인자가 적용됨
            </para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6">
            <summary>
            RTC6 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Count">
            <summary>
            인스턴스 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.KFactor">
            <summary>
            bits/mm 값 (2^20)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsActivateFastBuffer">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.FastBufferStartSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.BufferMax">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.RTC6_LIST3_BUFFER_SIZE">
            <summary>
            색인 문자용 버퍼 크기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DllVersion">
            <summary>
            RTC DLL 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.HexVersion">
            <summary>
            RTC HEX 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.RtcVersion">
            <summary>
            RTC 버전
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.RtcSerial">
            <summary>
            RTC 일련번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.InitLaser12SignalLevel">
            <summary>
            RTC6 카드의 15핀 레이저 커넥터 설정
            <para>
            Laser1(Pin1), Laser2(Pin9) 출력 신호 레벨
            초기화(Initialize) 시 적용됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.InitLaserOnSignalLevel">
            <summary>
            RTC6 카드의 15핀 레이저 커넥터 설정
            <para>
            LaserOn(Pin2) 출력 신호 레벨
            초기화(Initialize) 시 적용됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.InternalRtcLaserControlSignalBits">
            <summary>
            RTC 제어 신호 레벨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.InternalRtcExternalControlMode">
            <summary>
            RTC 외부 제어 모드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.RtcExternalControlMaxCounts">
            <summary>
            /START 트리거 최대 회수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.InternalInternalRtcMarkingInfoㅑ">
            <summary>
            RTC Marking Info
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.RtcMarkingInfo">
            <summary>
            get_marking_info 상태 구조체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.RtcJumpMode">
            <summary>
            점프 튜닝 모드 
            <para>
            RTC5/6 + intelli~ 스캐너 제품군 전용
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsMOTF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsLDSA">
            <summary>
            LDSA 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsDCDCConverter">
            <summary>
            DC/DC 컨버터 옵션 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsActivateAutoDelays">
            <summary>
            SCANahead 옵션 (+excelliSCNA) 사용시 
            <para>
            자동 지연값 기능 활성화 여부
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ScanAheadLineParamsCornerScale">
            <summary>
            SCANa 사용시 선 가공(line param) / 모서리(corner) 품질 스케일 값 (0~100)
            <para>
            마크/마크 명령간 모서리의 뽀족함 정도
            CtlDelayScanAheadByAuto 우선 활성화 필요
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ScanAheadLineParamsEndScale">
            <summary>
            SCANa 사용시 선 가공(line param) / 끝(end) 품질 스케일 값 (0~100)
            <para>
            마크/점프, 점프/마크 전환간에 마킹의 정확도
            CtlDelayScanAheadByAuto 우선 활성화 필요
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ScanAheadLineParamsAccScale">
            <summary>
            SCANa 사용시 선 가공(line param) / 가속(acc) 품질 스케일 값 (0~100)
            <para>
            가속 시간의 비율
            CtlDelayScanAheadByAuto 우선 활성화 필요
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.CorrectionFiles">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PrimaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SecondaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.BaseDistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.CoefA">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.CoefB">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.CoefC">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.FLength">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.KZFactorScale">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Rtc6.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.AutoLaserControlByPositionFileName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.AutoLaserControlByPositionTableNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.AutoLaserControlSignal">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncoderType">
            <summary>
            실행중인 리스트 명령의 MOTF 엔코더 타입
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.MotfAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SerialStartNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SerialIncrementStep">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.SerialExternalNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6.Now">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">카드번호 (0,1,2,...)</param>
            <param name="outputFileName">리스트 명령 로그 출력 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.Dispose">
            <summary>
            자원 해제 - IDisposable 인터페이스 구현
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMove(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMove(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlStandBy(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlDelayScanAhead(System.Single,System.Single)">
            <summary>
            레이저 지연값 설정 (SCANa 옵션 + excelliSCAN 전용)
            <para>
            CtlDelayScanAheadByAuto 에서 활성화 후에 사용
            </para>
            </summary>
            <param name="laserOnShift">레이저 온 쉬프트 시간 (usec)</param>
            <param name="laserOffShift">레이저 오프 쉬프트 시간(usec)</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlDelayScanAheadByAuto(System.Boolean)">
            <summary>
            RTC6 SCANahead 기능을 활성화 (excelliSCAN 스캐너 전용)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlAutoDelayParams(SpiralLab.Sirius.AutoDelayParamMode,SpiralLab.Sirius.ScannerHead,SpiralLab.Sirius.CorrectionTableIndex,System.Single,System.Single,System.Single)">
            <summary>
            RTC6 SCANahead 설정값 (excelliSCAN 스캐너 전용)
            </summary>
            <param name="mode"> </param>
            <param name="headNo">스캔 헤드</param>
            <param name="tableNo">보정 테이블</param>
            <param name="previewTime">사전계산 소요 시간값 (usec)</param>
            <param name="vMax">속도 제한값 (mm/s)</param>
            <param name="aMax">가속도 제한값 (mm/s^2)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetErrMsg(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListDelayScanAhead(System.Single,System.Single)">
            <summary>
            레이저 지연값 설정 (SCANa 옵션 + excelliSCAN 전용)
            CtlDelayScanAheadByAuto 에서 활성화 후에 사용 
            </summary>
            <param name="laserOnShift">레이저 온 쉬프트 (usec)</param>
            <param name="laserOffShift">레이저 오프 쉬프트 (usec)</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWait(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListLaserOn(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            좌표 중복 여부
            </summary>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.IsListReady(System.UInt32)">
            <summary>
            내부 버퍼 메모리 상태 처리
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlHomePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlHomePosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlQSwitchDelay(System.Single)">
            <summary>
            Q 스위치 지연 시간값 설정
            <para>
            레이저 모드에 따라 다르게 적용됨
            Yag1 : 0
            Yag2 : FPK 로 설정
            Yag3 : 10usec 고정
            Yag5 : 이 함수로 설정된 값
            </para>
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC 15핀 입력으로 /START, /STOP 등의 트리거 사용여부 설정</param>
            <param name="maxStartCounts">/START 트리거 최대 허용 개수 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 튜닝 모드 
            <para>
            RTC5/6 + intelli~ 스캐너 제품군 전용
            </para>
            </summary>
            <param name="jumpMode">Rtc6JumpMode , Rtc6JumpMode 클래스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <summary>
            로드된 보정 파일의 헤더 정보 조회
            </summary>
            <param name="tableIndex"></param>
            <param name="parameter"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            3D 보정 파일에서 계수 A,B,C 읽기
            </summary>
            <param name="fileName"></param>
            <param name="coefA"></param>
            <param name="coefB"></param>
            <param name="coefC"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <summary>
            3D 보정 파일에 계수 A,B,C 쓰기
            </summary>
            <param name="fileName"></param>
            <param name="coefA"></param>
            <param name="coefB"></param>
            <param name="coefC"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            마킹 정보 얻기
            </summary>
            <param name="info">Rtc6MarkingInfo</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListQSwitchDelay(System.Single)">
            <summary>
            Q 스위치 지연 시간값 설정
            <para>
            레이저 모드에 따라 다르게 적용됨
            Yag1 : 0
            Yag2 : FPK 로 설정
            Yag3 : 10usec 고정
            Yag5 : 이 함수로 설정된 값
            </para>
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSkyWritingBegin(System.UInt32,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSkyWritingEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListWobbel(System.Single,System.Single,System.Single,SpiralLab.Sirius.WobbelShape)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpHard(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="vPosition">x,y 위치</param>
            <param name="laserOn">usec</param>
            <param name="laserOff">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpHard(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 하드 점프(Hard Jump)
            </summary>
            <param name="x">x,y 위치</param>
            <param name="y">x,y 위치</param>
            <param name="laserOnUSec">usec</param>
            <param name="laserOffUSec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpMode(SpiralLab.Sirius.JumpModeFlag)">
            <summary>
            리스트 명령 - 점프 모드 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="flag">-1 : Disabled, 0 : Enabled but Diactived, 1: Enabled and Activated</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJumpDrill(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프+드릴 (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlConvertMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,SpiralLab.Sirius.AutoLaserControlMode,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListAutoLaserControl``1(``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListAlcByVectorBegin``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListAlcByVectorEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMove(System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlZOffset(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlLoadZTable(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlZDistance(System.Numerics.Vector3,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListZOffset(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListJump3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMark3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc3D(System.Numerics.Vector3,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListArc3D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListPixelLine3D(System.Single,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy, dz) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfEncoderReset(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfEncoderSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfTrackingError(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfCompensateTable(System.String,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfGetAngularEncoder(System.Int32@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfEncoderAngularSpeed(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlMotfOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfBegin(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfLimitIf(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfAngularWait(System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfWaitRange(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListMotfCall(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterBegin(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlCharacterSetClear(SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSerialReset(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListText(System.String,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListDate(SpiralLab.Sirius.DateFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListTime(SpiralLab.Sirius.TimeFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSerial(System.UInt32,SpiralLab.Sirius.SerialFormat,SpiralLab.Sirius.CharacterSet)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSerialConfig(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlSerialRead(System.Byte[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.ListSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6.CtlPulseSynchronizationMode(System.Boolean,System.Single)">
            <summary>
            LASER1 펄스 출력이 D.IN1 핀 입력 신호와 동기 처리됨
            <para>
            D.IN 입력은 TTL 신호여야 하며, 최소 펄스 유지시간은 80nsec
            set_laser_control 비트 5를 통해 신호의 edge 형태 (rising/falling) 변경가능
            </para>
            </summary>
            <param name="enable">사용여부</param>
            <param name="delay">지연시간 (usec). 레이저 출력 주파수의 주기보다는 짧아야 한다.</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6Ethernet">
            <summary>
            RTC6 이더넷 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6Ethernet.IpAddress">
            <summary>
            IP 주소
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6Ethernet.SubNetMask">
            <summary>
            서브넷 마스크
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index"></param>
            <param name="ipAddress">IP 주소</param>
            <param name="subNetMask">서브넷 마스크</param>
            <param name="outputFileName">명령을 기록할 파일 이름</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC6Ethernet 카드 통신 초기화 
            </summary>
            <param name="kFactor"></param>
            <param name="laserMode"></param>
            <param name="ctbFileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlReset">
            <summary>
            에러상태를 해제
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlGetErrMsg(System.UInt32)">
            <summary>
            RTC6 내부 에러코드에 해당하는 메시지
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlBootControl(System.Boolean)">
            <summary>
            자동 부팅 활성화 
            </summary>
            <param name="activate"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlReadImage(System.String)">
            <summary>
            NAND 메모리로 부터 이미지를 읽어 저장
            (단독 모드용)
            </summary>
            <param name="fileName">바이너리를 저장할 파일 이름</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6Ethernet.CtlWriteImage(System.String)">
            <summary>
            이미지를 읽어 NAND 메모리에 기록
            </summary>
            <param name="fileName">바이너리가 저장되어 있는 파일 이름</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.SyncAxisError">
            <summary>
            SYNCAXIS 에러 플래그
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Rtc6SyncAxis">
            <summary>
            SCANLAB's XL(eXtra Large) SCAN 
            <para>RTC6 +  + excelliSCAN + ACS Motion contoller by syncAXIS</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Count">
            <summary>
            인스턴스 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.KFactor">
            <summary>
            bits/mm 값 (2^20)
            <para>
            (syncAXIS 에서는 미사용. xml 파일에서 설정할것)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.EffectiveFieldSize">
            <summary>
            유효 필드 크기 (Kfactor 에 의해 역산됨)
            <para>
            (syncAXIS 에서는 미사용. xml 파일에서 설정할것)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.FieldSizeLimit">
            <summary>
            가로 세로 가공 영역의 크기 (WxD) (mm)
            <para>
            내부 필드 영역을 벋어날 경우 에러 처리됨
            (syncAXIS 에서는 미사용. xml 파일에서 설정할것)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.LaserMode">
            <summary>
            레이저 모드(CO2, Yag1,2,3,4, ...)
            <para>
            Laser1,2 출력핀의 타이밍 종류 선택
            (syncAXIS 에서는 미사용. xml 파일에서 설정할것)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsActivateFastBuffer">
            <summary>
            버퍼 고속 처리 모드 활성화 여부 (Auto 리스트 모드에 사용)
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.FastBufferStartSize">
            <summary>
            버퍼 고속 처리 모드 사용시 크기
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.BufferMax">
            <summary>
            최대 버퍼 크기
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Fpk">
            <summary>
            First Pulse Killer 신호의 시간값 (usec)
            <para>
            (syncAXIS 에서는 미사용. xml 파일에서 설정할것)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.ListType">
            <summary>
            마지막 or 현재 설정된  리스트 타입 값 
            <para>
            (syncAXIS 에서는 미사용. MotionType 지정 필요)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsMOTF">
            <summary>
            MOTF 옵션 여부
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Is2ndHead">
            <summary>
            2nd 헤드 옵션 여부
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Is3D">
            <summary>
            3D 옵션 여부
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsScanAhead">
            <summary>
            Scan Ahead 옵션 여부 (RTC6만 유효)
            <para>
            (syncAXIS 는 무조건 true)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 여부 (RTC6만 유효)
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsSyncAxis">
            <summary>
            SyncAxis (XLScan) 옵션 여부 (RTC6만 유효)
            <para>
            (syncAXIS 는 무조건 true)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsJumpMode">
            <summary>
            intelli~ 스캐너 기반으로 점프 모드 설정이 성공할 경우 자동 활성화됨
            <para>
            (syncAXIS 는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.DuplicatedLength">
            <summary>
            정점간 중복 검사하여 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.CorrectionFiles">
            <summary>
            스캐너 보정 파일 목록 
            <para>
            (syncAXIS 는 미사용. xml 파일에서 설정할것)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.PrimaryHeadTable">
            <summary>
            주 스캐너 헤드 보정 테이블 번호 (1~4)
            <para>
            (xml 파일에서 미리 설정된 최대 4개의 보정 파일 선택용으로 사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.SecondaryHeadTable">
            <summary>
            부 스캐너 헤드 보정 테이블 번호 (1~4)
            <para>
            (syncAXIS 는 미사용)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Now">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.ConfigXMLFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Handle">
            <summary>
            syncAXIS 인스턴스 핸들
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Job">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius.Rtc6SyncAxis.OnJob">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.JobQueue">
            <summary>
            작업 완료 큐
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.JobHistory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Head1Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Head2Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Head3Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Head4Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Trajectory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.Dynamics">
            <summary>
            역학(Dynamics = Stage Dynamic + Scanner Dynamic) 설정값
            <para>
            get : 복사본 객체가 리턴됨
            set : 객체가 복사되어 설정됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.OpStatus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.MotionMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.MotionType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.TargetStage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.StageMoveSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.StageMoveTimeOut">
            <inheritdoc/>         
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.BandWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.IsSimulationMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.SimulationFileName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.HeuristicIndex">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.StageCounts">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.HeadCounts">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.ActiveChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Rtc6SyncAxis.ActiveChannels">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.#ctor(System.Int32,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별번호 (1,2,3, ...)</param>
            <param name="configXMLFile">SyncAxis 환경설정(xml) 파일</param>
            <param name="outputFileName">RTC 데이타 상세 로그 출력 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.Initialize(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            초기화 
            (미사용)
            </summary>
            <param name="unUsed_kFactor">사용되지 않음</param>
            <param name="unUsed_laserMode">사용되지 않음</param>
            <param name="unused_Ct5FileName">사용되지 않음</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ReInitialize">
            <summary>
            재 초기화 루틴 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일 변경 - syncAxis 에서는 미지원됨
            <para>
            (XML 에 미리 등록된 ct5 파일만이 사용됨)
            </para>
            </summary>
            <param name="tableIndex"></param>
            <param name="unusedCt5FileName"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            보정 파일 선택 - syncAxis 미지원
            <para>
            CtlSelectStage 함수로 대체 사용
            </para>
            </summary>
            <param name="primaryHeadTableIndex"></param>
            <param name="secondaryHeadTableIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <summary>
            syncAxis 에서는 미지원 (XML 에 미리 설정 필요)
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMove(System.Numerics.Vector2)">
            <summary>
            syncAxis 는 스테이지, 스캐너 각각 개별 이동명령 사용할것
            <para>
            (미사용)
            </para>
            </summary>
            <param name="vPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMove(System.Single,System.Single)">
            <summary>
            syncAxis 는 스테이지, 스캐너 각각 개별 이동명령 사용할것
            <para>
            (미사용)
            </para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlStandBy(System.Single,System.Single)">
            <summary>
            스탠바이 주파수와 펄스폭
            <para>
            (변경 미지원)
            </para>
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/ 레이저 지연값 설정
            <para>
            (미지원)
            syncAXIS 는 스캐너 지연값이 0 으로 설정 불필요
            syncAXIS 는 레이저 지연값 대신 MarkConfig 에서 LaserPreTriggerTime/LaserSwitchOffsetTime 을 변경 사용할것
            </para>
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSpeed(System.Single,System.Single)">
            <summary>
            가공 점프, 마크 속도 설정
            <para>
            스테이지, 스캐너, 스캐너 + 스테이지 모드 모두에 적용됨
            </para>
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            <para>
            syncAXIS v1.6 에서는 확장1 출력 포트, 아나로그 1/2 출력만 제공됨
            </para>
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기 
            <para>
            (syncAXIS 는 해당 기능을 지원하지 않음)
            </para>
            </summary>
            <typeparam name="T">값(16비트, 8비트, 2비트 (uint), 아나로그(float 10V)</typeparam>
            <param name="ch"></param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetErrMsg(System.UInt32)">
            <summary>
            SYNCAXIS 의 에러코드 조회
            </summary>
            <param name="errorCode">에러코드</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy 가 해제될때) 까지 대기하는 함수
            <para>
            함수 호출후 2초 이내에 실행시 시작되지 않으면 타임아웃됨 (호출시 최대 2초간 대기할수도 있음)
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlReset">
            <summary>
            에러상태를 해제
            <para>
            (Abort 상태를 해제할 경우 xml 설정 파일로 재 초기화 시도됨)
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlBandWidth(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSimulationMode(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSelectHeuristic(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMotionMode(SpiralLab.Sirius.MotionMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlMotionType(SpiralLab.Sirius.MotionType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSelectStage(SpiralLab.Sirius.Stage,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetScannerPosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetStagePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetScannerPosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetStagePosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetScannerPosition(SpiralLab.Sirius.ScanDevice,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetStagePosition(System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetStagePosition(System.Numerics.Vector2@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlContourDependentSpeed(SpiralLab.Sirius.ContourDependentSpeedDirection,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetDynamicsConfig(SpiralLab.Sirius.Dynamics@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetDynamicsConfig(SpiralLab.Sirius.Dynamics)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetTrajectory(SpiralLab.Sirius.Trajectory@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetTrajectory(SpiralLab.Sirius.Trajectory)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetJumpCalculationDynamics(System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetJumpCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetMarkCalculationDynamics(System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlSetMarkCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.CtlGetInternalErrMsg(System.Collections.Generic.List{System.ValueTuple{System.UInt64,System.String}}@)">
            <summary>
            syncAXIS 인스턴스에서 제공하는 에러 개수및 목록
            </summary>
            <param name="errors">(에러코드, 에러메시지) 튜플 리스트</param>
            <returns>에러 메시지를 모두 합쳐 제공</returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비 
            <para>
            (미사용) 만약 호출시 Scanner Only 방식으로 고정됨
            * 전용 ListBegin 함수를 대신 사용할것
            </para>
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (하나의 거대한 리스트 : single, 더블 버퍼링되는 두개의 리스트 : auto)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.MotionType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 지연
            <para>
            (미사용)
            </para>
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListSpeedMinMark(System.Single)">
            <summary>
            리스트 명령 - 최소 마크 속도
            </summary>
            <param name="mark">최소 마크 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListLaserOn(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListLaserOn">
            <summary>
            리스트 명령 - 레이저를 현재 위치에 출사 시작 
            <para>
            (SyncAxis 에서는 지원되지 않음)
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            <para>
            (SyncAxis 에서는 지원되지 않음)
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListJump(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListJump(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListMark(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListMark(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListApproxBlendLimit(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListContourDependentSpeed(SpiralLab.Sirius.ContourDependentSpeedDirection,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListSpotDistanceControl(System.Boolean,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            <para>
            (syncAXIS 에서는 ExtDO16, ExtAO1, ExtAO2 만 지원)
            </para>
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(16비트, 8비트, 2비트(uint), 아나로그(float 10V)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 입력 조건에 맞으면, 확장1 포트의 16비트 지정된 비트 위치로 출력
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
            <param name="inputHighBitMask">조건1 : 확장1포트 입력이 High(1) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="inputLowBitMask">조건2 : 확장1포트 입력이 Low(0) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="outputBitMask">위 조건1,2 가 맞을때 출력을 변경할 확장1 포트의 출력 비트 마스크</param>
            <param name="onOff">확장1 포트의 출력 비트를 set(1) 할지 아니면 clear(0) 할지 여부</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <summary>
            확장1 포트의 16비트 디지털 입력이 조건에 맞을때까지 리스트 명령 수행을 대기
            <para>
            (syncAXIS 에서는 미사용)
            </para>
            </summary>
            <param name="inputHighBitMask">조건1 : 확장1포트 입력이 High(1) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="inputLowBitMask">조건2 : 확장1포트 입력이 Low(0) 인 비트 마스크 (0 = Don't Care)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListAlcBegin(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListAlcEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListJumpCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListMarkCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Rtc6SyncAxis.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtcCtb">
            <summary>
            scanner correction for 3D 
            RTC4의 ctb 포맷용
            StretchCorreXion5.exe + CorrectionFileConverter.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction3DRtcCtb.OnResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.Interval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.ZLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.ZUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.DataLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.DataUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.IsDeleteDatFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCtb.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.kFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.interval">
            <summary>
            mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCtb.converterExeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtcCtb.ExitCode">
            process exit code ref : stretch correction.pdf by scanlab
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격</param>
            <param name="zUpper">최상단 위치 (mm)</param>
            <param name="zLower">최하단 위치 (mm)</param>
            <param name="srcCtbFile">입력 보정 파일</param>
            <param name="targetCtbFile">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.Clear(SpiralLab.Sirius.Plane)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCtb.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DRtcCtb">
            <summary>
            스캐너 필드 보정 for 2D plane (Z=0)
            RTC4의 ctb 포맷용
            CFMP.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction2DRtcCtb.OnResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Interval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.IsAutoCenterOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.IsDeleteDatFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCtb.Data">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DRtcCtb.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격 (mm)</param>
            <param name="srcCtbFile">입력 보정 파일</param>
            <param name="targetCtbFile">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">절대좌표</param>
            <param name="measured">측정좌표</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력 
            좌상단부터 우상단 방향으로 순서 
            예 :
            1 2 3
            4 5 6
            7 8 9
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">논리적인 좌표</param>
            <param name="error">에러량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.Clear">
            <summary>
            입력 데이타 모두 제거
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.Convert">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCtb.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DRtcCt5">
            <summary>
            스캐너 필드 보정 for 2D plane (Z=0)
            RTC5/6의 ct5 포맷용
            CorreXion5.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction2DRtcCt5.OnResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.RowInterval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.ColInterval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.IsAutoCenterOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.IsDeleteDatFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction2DRtcCt5.Data">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Correction2DRtcCt5.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="rowInterval">행 간격 (mm)</param>
            <param name="colInterval">열 간격 (mm)</param>
            <param name="srcCt5File">입력 보정 파일</param>
            <param name="targetCt5File">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.Clear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction2DRtcCt5.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.Correction3DRtcCt5">
            <summary>
            scanner correction for 3D 
            RTC5/6의 ct5 포맷용
            StretchCorreXion5.exe 기반
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.Correction3DRtcCt5.OnResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.Interval">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.ZLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.ZUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.DataLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.DataUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.IsDeleteDatFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.Correction3DRtcCt5.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCt5.kFactor">
            <summary>
            bits/mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCt5.interval">
            <summary>
            mm
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Correction3DRtcCt5.exeFileName">
            <summary>
            SCANLAB 의 보정 유틸리티 실행파일 경로
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.#ctor(System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            생성자
            </summary>
            <param name="kFactor">bits/mm</param>
            <param name="rows">행 개수</param>
            <param name="cols">열 개수</param>
            <param name="interval">간격</param>
            <param name="zUpper">최상단 위치 (mm)</param>
            <param name="zLower">최하단 위치 (mm)</param>
            <param name="srcCt5File">입력 보정 파일</param>
            <param name="targetCt5File">출력 보정 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.Clear(SpiralLab.Sirius.Plane)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.Correction3DRtcCt5.OnResultEvent(System.Boolean)">
            <summary>
            이벤트 핸들러 호출 (상속 확장 구현용)
            </summary>
            <param name="success">변환 성공 여부</param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcJumpTo">
            <summary>
            Jump delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcJump3DTo">
            <summary>
            Jump 3d delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcMarkTo">
            <summary>
            Mark delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcMark3DTo">
            <summary>
            Mark 3d delegate
            </summary>
            <param name="sender"></param>
            <param name="v"></param>
        </member>
        <member name="T:SpiralLab.Sirius.RtcVirtual">
            <summary>
            RTC 가상 객체
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.RtcVirtual.OnJumpTo">
            <summary>
            점프 위치 이벤트
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.RtcVirtual.OnMarkTo">
            <summary>
            마크 위치 이벤트
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsActivateFastBuffer">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.FastBufferStartSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.BufferMax">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsMOTF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsJumpMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.DuplicatedLength">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.SimulationStepDistance">
            <summary>
            시뮬레이션 동작시  Jump/Mark 구간 직선을 나누는 최소 길이 (mm)
            기본값: 0.2 mm
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.CorrectionFiles">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.PrimaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.SecondaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.BaseDistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.Now">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.KZFactorScale">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius.RtcVirtual.vPhysical3D">
            <summary>
            물리적인 마지막 위치값
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcVirtual.vLogical3D">
            <summary>
            논리적인 마지막 위치값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius.RtcVirtual.MotfAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.#ctor(System.Int32,System.String)">
            <summary>
            생성자
            </summary>
            <param name="index">식별 번호 (1,2,3,...)</param>
            <param name="outputFileName">RTC 데이타 상세 로그 출력 파일</param>
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.Initialize(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMove(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMove(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlQSwitchDelay(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlExternalStartCounts(System.UInt32@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlStandBy(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetErrMsg(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlBandWidth(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSimulationMode(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSelectHeuristic(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotionMode(SpiralLab.Sirius.MotionMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotionType(SpiralLab.Sirius.MotionType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSelectStage(SpiralLab.Sirius.Stage,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetScannerPosition(System.Numerics.Vector2)">
            <inheritdoc/>        
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetStagePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetScannerPosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetStagePosition(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetScannerPosition(SpiralLab.Sirius.ScanDevice,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetStagePosition(System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetStagePosition(System.Numerics.Vector2@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlContourDependentSpeed(SpiralLab.Sirius.ContourDependentSpeedDirection,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetDynamicsConfig(SpiralLab.Sirius.Dynamics@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetDynamicsConfig(SpiralLab.Sirius.Dynamics)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetTrajectory(SpiralLab.Sirius.Trajectory@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetTrajectory(SpiralLab.Sirius.Trajectory)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetJumpCalculationDynamics(System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetJumpCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetMarkCalculationDynamics(System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlSetMarkCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlGetInternalErrMsg(System.Collections.Generic.List{System.ValueTuple{System.UInt64,System.String}}@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListFrequency(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListFirstPulseKiller(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListQSwitchDelay(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListWait(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListLaserOn(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJump(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJump(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMark(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMark(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListSkyWritingBegin(System.UInt32,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListSkyWritingEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListWobbel(System.Single,System.Single,System.Single,SpiralLab.Sirius.WobbelShape)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJumpHard(System.Numerics.Vector2,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJumpHard(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJumpMode(SpiralLab.Sirius.JumpModeFlag)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJumpDrill(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMove(System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlZOffset(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlLoadZTable(System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlZDistance(System.Numerics.Vector3,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListZOffset(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListZDefocus(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJump3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJump3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMark3D(System.Numerics.Vector3,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMark3D(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListArc3D(System.Numerics.Vector3,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListArc3D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListPixelLine3D(System.Single,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.MotionType)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListSpeedMinMark(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListApproxBlendLimit(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListContourDependentSpeed(SpiralLab.Sirius.ContourDependentSpeedDirection,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListSpotDistanceControl(System.Boolean,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListAlcBegin(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListAlcEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListJumpCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMarkCalculationDynamics(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfEncoderReset(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfGetAngularEncoder(System.Int32@,System.Single@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfEncoderAngularSpeed(System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfEncoderSpeed(System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfTrackingError(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfCompensateTable(System.String,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.CtlMotfOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfBegin(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfLimitIf(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfAngularWait(System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfWaitRange(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius.RtcVirtual.ListMotfCall(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionData2D">
            <summary>
            2차원 보정 데이타 구조체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Reference">
            <summary>
            이론상의 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Measured">
            <summary>
            실제 측정된 좌표값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.CorrectionData2D.Delta">
            <summary>
            오차량 (실제 측정된 좌표값 - 이론상의 좌표값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            생성자
            </summary>
            <param name="reference">이론상의 좌표값</param>
            <param name="measured">실제 측정된 좌표값</param>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.ToReferenceString">
            <summary>
            이론값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.CorrectionData2D.ToMeasuredString">
            <summary>
            실측값 문자열 출력
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.Correction2DResultEventHandler">
            <summary>
            스캐너 필드 보정에 대한 결과 이벤트 통지용 델리게이트
            </summary>
            <param name="correction2D">IRtcCorrection 인터페이스</param>
            <param name="success">변환 성공 여부</param>
            <param name="message">변환 로그 메시지</param>
        </member>
        <member name="T:SpiralLab.Sirius.ICorrection2D">
            <summary>
            2D Correction (스캐너 보정) 인터페이스
            실행파일\correction\correXionPro.exe (for 2D)
            가 경로상에 존재해야 한다
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.ICorrection2D.OnResult">
            <summary>
            결과 통보용 이벤트 핸들러
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Rows">
            <summary>
            입력 데이타의 행 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Cols">
            <summary>
            입력 데이타의 열 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.KFactor">
            <summary>
            K 값 (bits/mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.SourceCorrectionFile">
            <summary>
            입력 보정 파일 (correction 폴더에서의 상대적 경로)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.TargetCorrectionFile">
            <summary>
            출력 보정 파일 (correction 폴더에서의 상대적 경로)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.Data">
            <summary>
            계측 데이타 2차원 배열
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ICorrection2D.ResultMessage">
            <summary>
            변환 결과 문자열
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력
            좌상단부터 우상단 방향으로 순서 
            <code>
            예 :
            1 2 3
            4 5 6
            7 8 9
            </code>
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">절대좌표</param>
            <param name="measured">측정좌표</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            측정 데이타 입력 
            좌상단부터 우상단 방향으로 순서 
            <code>
            예 :
            1 2 3
            4 5 6
            7 8 9
            </code>
            </summary>
            <param name="row">행</param>
            <param name="col">열</param>
            <param name="reference">논리적인 좌표</param>
            <param name="error">에러량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.Clear">
            <summary>
            입력 데이타 삭제
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ICorrection2D.Convert">
            <summary>
            변환 시작
            </summary>
            <returns>성공 여부</returns>
        </member>
        <member name="T:SpiralLab.Sirius.IMatrixStack">
            <summary>
            3x3 행렬 스택 인터페이스
            <para>
            스택 자료구조에 3*3 행렬구조체를 push/pop 하여 저장하고, 스택내의 모든 행렬을 곱셈 연산하는등의 유틸리티 클래스.
            스택내에 있는 행렬들은 변경점이 있을때만 자동 연산된다.
            가장 마지막, 가장 최신의, 가장 상단의 행렬값부터 변환이 적용됨.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMatrixStack.ToResult">
            <summary>
            스택에 있는 모든 변환 행렬 연산 결과 
            <para>변경점이 있을때만 자동 연산됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IMatrixStack.Count">
            <summary>
            스택에 있는 행렬의 개수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Clear">
            <summary>
            스택에 모든 행렬을 초기화 하고 단위행렬로 설정
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Numerics.Matrix3x2)">
            <summary>
            스택에 행렬 Push
            </summary>
            <param name="m">3x3 행렬</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Pop(System.Numerics.Matrix3x2@)">
            <summary>
            스택에서 행렬 Pop
            </summary>
            <param name="m">3x3 행렬</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Pop">
            <summary>
            스택에서 행렬 Pop
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Double)">
            <summary>
            스택에 행렬 Push : 회전 
            </summary>
            <param name="angle">회전 각도 (˚)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Double,System.Double)">
            <summary>
            스택에 행렬 Push : 이동
            </summary>
            <param name="dx">X 이동량 (mm)</param>
            <param name="dy">Y 이동량 (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Numerics.Vector2)">
            <summary>
            스택에 행렬 Push : 이동
            </summary>
            <param name="translate">x,y 이동량 (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius.IMatrixStack.Push(System.Double,System.Double,System.Double)">
            <summary>
            스택에 행렬 Push : 회전후 이동
            </summary>
            <param name="dx">이동량 dX (mm)</param>
            <param name="dy">이동량 dY (mm)</param>
            <param name="angle">회전 각도 (˚)</param>
        </member>
        <member name="T:SpiralLab.Sirius.ListType">
            <summary>
            리스트 타입
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ListType.Single">
            <summary>
            single buffered list
            <para>단일한 리스트 버퍼 사용, RTC 의 내부 버퍼를 최대로 사용</para>
            <para>RTC4 : 8000 개</para>
            <para>RTC5 : 2^20 개</para>
            <para>RTC6 : 2^23 개</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ListType.Auto">
            <summary>
            double buffered list (auto)
            <para>두개의 리스트 버퍼를 번갈아 가며 사용</para>
            <para>옵션: Fast Buffer 속성을 통해 초기 버퍼 크기 및 최대 버퍼 크기 설정 가능</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.LaserMode">
            <summary>
            LASER1, LASER2 출력신호의 역할 지정
            <para>Co2, YAG 1,2,3,4,...</para>
            <para>rf. 스캔랩 메뉴얼 문서 참고</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.None">
            <summary>
            미지정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Co2">
            <summary>
            CO2
            <para>LASERON : 켜짐</para>
            <para>LASER1: 스위치 주파수, 펄스폭 출력됨 (펄스 짤림 보완 사용 여부 설정 가능)</para>
            <para>LASER2: 대기(StandBy) 주파수, 펄스폭이 Phase shift 되어 출력됨</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Yag1">
            <summary>
            YAG1
            <para>LASERON : 켜짐</para>
            <para>LASER1: Q 스위치 주파수, 펄스폭 출력 + 대기 주파수 출력 (LASERON 과 중첩 않됨)</para>
            <para>LASER2: FPK 출력 (Q 스위치 출력과 중첩됨)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Yag2">
            <summary>
            YAG2
            <para>LASERON : 켜짐</para>
            <para>LASER1: Q 스위치 주파수, 펄스폭 출력 + 대기 주파수 출력 (LASERON 과 중첩 않됨)</para>
            <para>LASER2: FPK 출력 (Q 스위치 출력과 중첩 않됨)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Yag3">
            <summary>
            YAG3 LASER
            <para>LASERON : 켜짐</para>
            <para>LASER1: Q 스위치 주파수, 펄스폭 출력 (펄스 짤림 보완) + 대기 주파수 출력 (LASERON 과 중첩 않됨)</para>
            <para>LASER2: FPK 출력 (10 usec 지연후 스위치 출력과 중첩됨)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Mode4">
            <summary>
            MODE4
            <para>LASERON : 켜짐</para>
            <para>LASER1: 대기 주파수, 펄스폭 출력 </para>
            <para>LASER2: FPK 출력 (대기 주파수 출력과 중첩됨)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Yag5">
            <summary>
            YAG5 LASER
            <para>LASERON : 켜짐</para>
            <para>LASER1: 주파수, 펄스폭 출력 (Q 스위치 지연시간 설정가능, 펄스 짤림 보완됨) + 대기 주파수 출력 (LASERON 과 중첩 않됨)</para>
            <para>LASER2: FPK 출력 (주파수 출력과 중첩됨)</para>
            <para>RTC5 이상 지원 </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.LaserMode.Mode6">
            <summary>
            MODE6
            <para>LASERON : 켜짐 (대기 주파수과 시작, 끝 주기를 맞추기 위해 펄스 보완됨)</para>
            <para>LASER1: 대기 주파수, 펄스폭 출력 </para>
            <para>LASER2: FPK 출력 (대기 주파수 출력과 중첩됨)</para>
            <para>RTC5 이상 지원 </para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScannerHead">
            <summary>
            스캔 헤드 식별자
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScannerHead.Primary">
            <summary>
            주(Primary) 스캐너
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScannerHead.Secondary">
            <summary>
            부(Secondary) 스캐너
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionTableIndex">
            <summary>
            RTC 카드 내에는 4개의 스캐너 보정 테이블을 로드한후 선택하여 사용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionTableIndex.Table1">
            <summary>
            스캐너 보정 테이블 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionTableIndex.Table2">
            <summary>
            스캐너 보정 테이블 2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionTableIndex.Table3">
            <summary>
            스캐너 보정 테이블 3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionTableIndex.Table4">
            <summary>
            스캐너 보정 테이블 4
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ExtensionChannel">
            <summary>
            RTC 카드의 확장 포트 종류
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtDI2">
            <summary>
            RTC5/6 Pin2 디지털 입력
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtDO2">
            <summary>
            RTC5/6 Pin2 디지털 출력
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtDO8">
            <summary>
            RTC4/5/6 확장2(Extension2) 포트 8비트 출력
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtDO16">
            <summary>
            RTC4/5/6 확장1(Extension1) 포트 16비트 출력
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtDI16">
            <summary>
            RTC4/5/6 확장1(Extension1) 포트 16비트 입력
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtAO1">
            <summary>
            RTC4/5/6 의 아나로그 1 출력
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExtensionChannel.ExtAO2">
            <summary>
             RTC4/5/6 의 아나로그 2 출력
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.RtcStatus">
            <summary>
            RTC 카드의 내부 상태
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.Busy">
            <summary>
            가공중 (리스트 명령이 실행중)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.NotBusy">
            <summary>
            가공중이 아님 (리스트 명령이 미실행중)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.List1Busy">
            <summary>
            리스트 1번이 실행중 (리스트 모드가 auto 일 경우 더블 버퍼링 처리용으로 내부적 사용됨)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.List2Busy">
            <summary>
            리스트 2번이 시행중 (리스트 모드가 auto 일 경우 더블 버퍼링 처리용으로 내부적 사용됨)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.NoError">
            <summary>
            에러 발생 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.Aborted">
            <summary>
            가공중 강제 종료 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.PositionAckOK">
            <summary>
            스캐너의 위치 응답 오류 발생 여부
            <para>스캐너 오차량 (명령 위치 - 실제 위치) 이 설정된 범위를 벋어났을때 설정됨 (기본값 : 0.28%)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.PowerOK">
            <summary>
            스캔 헤드에 공급되는 전원 이상 여부
            <para>SCANLAB 이외의 스캔헤드 제품 사용시 주의</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.TempOK">
            <summary>
            스캔 헤드의 사용가능 온도 도달 여부
            <para>전원 투입 후 대기 시간 이후 OK 로 변경됨</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcStatus.MotfOutOfRange">
            <summary>
            Processing On The Fly 사용시 스캐너의 허용(Limit) 영역을 벋어났는지 여부 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ILaserControlSignal">
            <summary>
            레이저 제어 신호의 출력 레벨 설정 (Laser1/2, On 등의 신호 레벨을 Active Low 또는 High 로 설정)
            <para>RTC4 : 납땜 필요</para>
            <para>RTC5 : Rtc5LaserControlSignal</para>
            <para>RTC6 : Rtc6LaserControlSignal</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ILaserControlSignal.ToUInt">
            <summary>
            비트 구조체를 32비트 값으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcExternalControlMode">
            <summary>
            RTC 외부 제어 모드 값 
            <para>RTC4/5/6 각각 비트 플래그가 다르므로 각 버전별로 구현된 객체 사용</para>
            <para>RTC4 : Rtc4ExternalControlMode </para>
            <para>RTC5 : Rtc5ExternalControlMode </para>
            <para>RTC6 : Rtc6ExternalControlMode </para> 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExternalControlMode.ToUInt">
            <summary>
            비트 구조체를 32 비트값으로 변환
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcJumpMode">
            <summary>
            RTC 점프 모드 설정용 인터페이스
            <para>RTC4 : 미지원</para>
            <para>RTC5 : Rtc5JumpMode </para>
            <para>RTC6 : Rtc6JumpMode</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.JumpModeFlag">
            <summary>
            RTC 점프 모드 플래그
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JumpModeFlag.Disable">
            <summary>
            끄기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JumpModeFlag.EnabledButDeactivated">
            <summary>
            켜기 + 비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JumpModeFlag.EnabledAndActivated">
            <summary>
            켜기 + 활성화
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.RtcCorrectionFile">
            <summary>
            RTC 보정 파일 처리용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.RtcCorrectionFile.FileName">
            <summary>
            스캐너 보정 파일 이름
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc">
            <summary>
            RTC 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Index">
            <summary>
            RTC 카드 식별자 (0, 1, 2, ...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Name">
            <summary>
            이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.KFactor">
            <summary>
            스캐너의 bits/mm 비율값 (K-Factor)
            <para>RTC4 : 16 bits</para>
            <para>RTC5 : 20 bits</para>
            <para>RTC6 : 20 bits</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.EffectiveFieldSize">
            <summary>
            K-Factor 에 의해 계산된 스캐너의 유효 가공영역 크기
            <para>(ex) size (mm) = 2^20 / K-Factor</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.FieldSizeLimit">
            <summary>
            가로x세로 가공 영역의 크기 제한값 (WxD) (mm)
            <para>이 값을 지정시 모든 위치 명령에 대해 영역을 벋어났는지를 검사하고 벋어날 경우 가공이 중단되고 에러로 처리됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.LaserMode">
            <summary>
            레이저 모드 (Laser On, 1,2 출력핀의 역할 변경)
            <para>CO2, Yag 1,2, 3,4, ...</para>
            <para>모드 5,6 은 RTC5 이상만 지원</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.CorrectionFiles">
            <summary>
            보정 파일 테이블 목록 
            <para>RTC4 : 2개의 테이블 (0,1)</para>
            <para>RTC5 : 4개의 테이블을 (0,1,2,3)</para>
            <para>RTC6 : 4개의 테이블을 (0,1,2,3)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.PrimaryHeadTable">
            <summary>
            Primary 헤드의 보정 파일 테이블 번호 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.SecondaryHeadTable">
            <summary>
            Secondary 헤드의 보정 파일 테이블 번호 
            <para>2nd 헤드일 경우 테이블 번호 지정 가능</para>
            <para>3D 옵션 사용시 PrimaryHeadTable 과 동일한 테이블이 지정되어야 한다</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.MatrixStack">
            <summary>
            3x3 행렬 스택 
            <para>모든 가공 위치 정보(벡터들) 는 현재 설정된 변환 행렬과 연산되어 처리됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsMOTF">
            <summary>
            MOTF(Processing on the fly) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Is2ndHead">
            <summary>
            2nd 헤드 (2nd) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Is3D">
            <summary>
            3D 옵션 (VarioScan, Z-Shift) 옵션 지원 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsScanAhead">
            <summary>
            ScanAhead (ExcelliSCAN 스캐너 전용) 옵션 지원 여부
            RTC6 전용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsUFPM">
            <summary>
            UFPM(Ultra Fast Pulse Modulation) 옵션 지원 여부
            RTC5/6 전용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsSyncAxis">
            <summary>
            SyncAxis/XL-SCAN 옵션 지원 여부 (Rtc6SyncAxis 사용 필요)
            RTC6 전용
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.DuplicatedLength">
            <summary>
            연속되는 벡터간 거리를 검사하고 두개의 벡터를 하나로 합치기 위한 최소 거리값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Fpk">
            <summary>
            마지막 설정된 FPK(First Pulse Killer) 시간값 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.Frequency">
            <summary>
            마지막 설정된 주파수 (Hz) 값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.PulseWidth">
            <summary>
            마지막 설정된 펄스폭 (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.ListType">
            <summary>
            마지막 설정된 리스트 타입
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.IsActivateFastBuffer">
            <summary>
            고속 처리 버퍼 모드 활성화 여부 
            <para>Auto 리스트 모드에만 유효함</para>
            <para>비활성화시(기본값) : 최대 버퍼 크기(BufferMax)의 리스트 버퍼를 두개 만들어 이를 더블 버퍼 처리하며 가공</para>
            <para>활성화시 : 리스트 버퍼를 2개 만드는것은 동일하나, 시작 버퍼크기(FastBufferStartSize)에 데이타가 쌓이면 우선 빠른 실행이 시작되고 이후 최대 버퍼크기(BufferMax)에 도달하기 전까지 2배씩 버퍼 크기 점진적으로 증가시키며 더블 버퍼 처리하며 가공 / 빠른 가공 시작을 위한 기능</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.FastBufferStartSize">
            <summary>
            고속 처리 버퍼 모드 사용시 시작 버퍼 크기
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc.BufferMax">
            <summary>
            최대 버퍼 크기
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.Initialize(System.Single,SpiralLab.Sirius.LaserMode,System.String)">
            <summary>
            RTC 카드 초기화
            </summary>
            <param name="kFactor">K Scale Factor (bits/mm). RTC4= 16bits, RTC5/6= 20 bits</param>
            <param name="laserMode">LaserMode 열거형</param>
            <param name="ctFileName">주(Primary) 스캐너의 보정 테이블(Table1)에 Load/Select 하려는 ctb/ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLoadCorrectionFile(SpiralLab.Sirius.CorrectionTableIndex,System.String)">
            <summary>
            보정 파일(.ctb/.ct5)을 보정 테이블에 로딩
            </summary>
            <param name="tableIndex">CorrectionTableIndex 열거형 </param>
            <param name="ctFileName">ctb/ct5 스캐너 보정 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            지정된 스캐너 헤드에 보정 테이블을 선택
            </summary>
            <param name="primaryHeadTableIndex">CorrectionTableIndex 열거형 (Primary)</param>
            <param name="secondaryHeadTableIndex">CorrectionTableIndex 열거형 (Secondary)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserMode(SpiralLab.Sirius.LaserMode)">
            <summary>
            레이저 모드 (Yag1,2, ... Co2 등)
            <para>레이저 1,2 Pin/레이저 ON Pin의 출력 신호 타이밍 모드 변경</para>
            <para>상세 타이밍 차트는 RTC 메뉴얼에 명시됨</para>
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserOn">
            <summary>
            마지막으로 설정된 주파수, 펄스폭을 사용해 레이저 펄스 신호(LASER1,2,ON) 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserOff">
            <summary>
            레이저 펄스 신호 (LASER1,2,LASER ON) 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlLaserSignal(System.Boolean)">
            <summary>
            레이저 펄스신호 활성화 여부 
            <para>전역적으로 동작함 (레이저 펄스 신호를 enable/disable)</para>
            </summary>
            <param name="onOff"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlMove(System.Numerics.Vector2)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            <para>마지막으로 설정된 속도가 사용됨</para>
            </summary>
            <param name="vPosition">X,Y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlMove(System.Single,System.Single)">
            <summary>
            지정된 위치로 스캐너 수동 이동
            <para>마지막으로 설정된 속도가 사용됨</para>
            </summary>
            <param name="x">x mm</param>
            <param name="y">y mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlFrequency(System.Single,System.Single)">
            <summary>
            주파수와 펄스폭 설정
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlStandBy(System.Single,System.Single)">
            <summary>
            스탠바이 주파수와 펄스폭
            <para>(Co2 레이저 모드 사용시 유용)</para>
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            스캐너/레이저 지연값 설정
            <para>scanner 지연값 : 스캐너 갈바노메터(미러+모터)의 관성(Inertia)에 의한 응답 지연 (Tracking Error)시간을 보상하기 위한 시간</para>
            <para>laser 지연값 : 레이저 소스의 On/Off 반응 시간 지연을 보상하기 위한 시간</para>
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlSpeed(System.Single,System.Single)">
            <summary>
            스캐너 점프/마크 속도 설정
            </summary>
            <param name="jump">점프(jump) 속도 (mm/s)</param>
            <param name="mark">마크(mark) 및 아크(arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에 데이타 쓰기
            </summary>
            <typeparam name="T">값( 디지털 입출력 : uint, 아나로그 : float)</typeparam>
            <param name="ch">확장 커넥터 종류 </param>
            <param name="value">uint/float</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력에 대해 특정 비트값을 토글(toggle)
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlReadData``1(SpiralLab.Sirius.ExtensionChannel,``0@,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            확장 포트에서 데이타 읽기
            </summary>
            <typeparam name="T">값( 디지털 입출력 : uint, 아나로그 : float)</typeparam>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">uint/float</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlGetStatus(SpiralLab.Sirius.RtcStatus)">
            <summary>
            RTC 카드의 상태 확인
            </summary>
            <param name="status">RtcStatus 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlBusyWait">
            <summary>
            리스트 명령이 완료될 때(busy가 해제될때) 까지 대기하는 함수
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlAbort">
            <summary>
            실행중인 리스트 명령(busy 상태를)을 강제 종료
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.CtlReset">
            <summary>
            에러상태 해제 시도
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.ListType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            </summary>
            <param name="laser">레이저 소스</param>
            <param name="listType">리스트 타입 (Single: 하나의 거대한 리스트, Auto: 더블 버퍼링되는 두개의 리스트)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListFrequency(System.Single,System.Single)">
            <summary>
            리스트 명령 - 주파수, 펄스폭
            </summary>
            <param name="frequency">주파수 (Hz)</param>
            <param name="pulseWidth">펄스폭 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListDelay(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 레이저/스캐너 지연시간
            </summary>
            <param name="laserOn">레이저 온 지연 (usec)</param>
            <param name="laserOff">레이저 오프 지연 (usec)</param>
            <param name="scannerJump">스캐너 점프 지연 (usec)</param>
            <param name="scannerMark">스캐너 마크 지연 (usec)</param>
            <param name="scannerPolygon">스캐너 폴리곤(코너) 지연 (usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListSpeed(System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프/마크 속도
            </summary>
            <param name="jump">점프(jump 속도 (mm/s)</param>
            <param name="mark">마크(mark/arc) 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWait(System.Single)">
            <summary>
            리스트 명령 - 시간 대기
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOn(System.Single)">
            <summary>
            리스트 명령 - 지정된 시간동안 출사
            </summary>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOn">
            <summary>
            리스트 명령 - 레이저 출사 시작 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListLaserOff">
            <summary>
            리스트 명령 - 레이저 출사 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListJump(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListJump(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListMark(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListMark(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Mark : 선분)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListArc(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="vCenter">회전 중심 위치 (cx, cy)</param>
            <param name="sweepAngle">각도 이동량 (°) (+: CCW, -: CW)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListArc(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크 (Arc : 호)
            </summary>
            <param name="cx">회전 중심 위치 (cx)</param>
            <param name="cy">회전 중심 위치 (cy)</param>
            <param name="sweepAngle">각도 이동량 (°) (+: CCW, -: CW)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListEllipse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크 (Ellipse : 타원)
            </summary>
            <param name="vCenter">중심</param>
            <param name="majorHalf">A</param>
            <param name="minorHalf">B</param>
            <param name="startAngle">시작 각도 (°)</param>
            <param name="sweepAngle">각도 이동량 (+ : CCW, - : CW)</param>
            <param name="rotateAngle">타원 자체 회전량 (+ : CCW, - : CW)</param>
            <param name="angleDelta">각도 미분량</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListConicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Conic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl">제어점 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">최소 직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListCubicBezier(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Cubic 베지어 곡선
            </summary>
            <param name="vStart">시작 위치</param>
            <param name="vControl1">제어점1 위치</param>
            <param name="vControl2">제어점2 위치</param>
            <param name="vEnd">끝 위치</param>
            <param name="drawLength">최소 직선 보간 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWriteData``1(SpiralLab.Sirius.ExtensionChannel,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            리스트 명령 - 확장 포트에 데이타 쓰기 
            </summary>
            <param name="ch">확장 커넥터 종류</param>
            <param name="value">값(디지털: uint, 아나로그: float)</param>
            <param name="compensator">compensator 보정용 객체</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 출력의 특정 비트값을 변경
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">출력</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            확장1 포트의 16비트 디지털 입력이 조건에 맞으면, 확장1 포트의 16비트 디지털 출력의 지정된 비트에 출력
            </summary>
            <param name="inputHighBitMask">조건1 : 확장1포트 입력이 High(1) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="inputLowBitMask">조건2 : 확장1포트 입력이 Low(0) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="outputBitMask">위 조건1,2 가 맞을때 출력을 변경할 확장1 포트의 출력 비트 마스크</param>
            <param name="onOff">확장1 포트의 출력 비트를 set(1) 할지 아니면 clear(0) 할지 여부</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <summary>
            확장1 포트의 16비트 디지털 입력이 조건에 맞을때까지 리스트 명령 수행을 대기
            </summary>
            <param name="inputHighBitMask">조건1 : 확장1포트 입력이 High(1) 인 비트 마스크 (0 = Don't Care)</param>
            <param name="inputLowBitMask">조건2 : 확장1포트 입력이 Low(0) 인 비트 마스크 (0 = Don't Care)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListEnd">
            <summary>
            리스트 명령 끝 - 버퍼 닫기
            </summary>
            <returns></returns>s
        </member>
        <member name="M:SpiralLab.Sirius.IRtc.ListExecute(System.Boolean)">
            <summary>
            리스트 명령 실행
            </summary>
            <param name="busyWait">모든 리스트 명령이 실행 완료될때까지 대기 여부 (blocking 여부)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc2ndHead">
            <summary>
            IRtc2ndHead 2nd헤드 인터페이스
            <para>(여기에서 제공되는 Offset/Angle 은 행렬스택과 무관하게 적용됨. 즉 스캐너의 HW 적인 장착 방향에 대한 오프셋 처리용으로 사용 권장함)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc2ndHead.SecondaryHeadTable">
            <summary>
            Secondary 헤드의 보정 파일 테이블 번호 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc2ndHead.BaseDistanceToSecondaryHead">
            <summary>
            주(Primary)헤드에서 부(Secondary)헤드까지 물리적인 X, Y 거리값 (mm)
            <para>이 거리값은 2nd 헤드 시스템의 고정된 값으로, 이 거리값이 되도록 PrimaryHeadBaseOffset, SecondaryHeadBaseOffset를 조절한다</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc2ndHead.PrimaryHeadBaseOffset">
            <summary>
            주(Primary 헤드의 기구 Base 오프셋 (2nd 헤드 사용시)
            <para>dx, dy, angle (mm, mm, °)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc2ndHead.PrimaryHeadUserOffset">
            <summary>
            주(Primary 헤드의 사용자 오프셋 (2nd 헤드 사용시)
            <para>dx, dy, angle (mm, mm, °)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc2ndHead.SecondaryHeadBaseOffset">
            <summary>
            부(Secondary) 헤드의 기구 Base 오프셋 (2nd 헤드 사용시)
            <para>dx, dy, angle (mm, mm, °)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc2ndHead.SecondaryHeadUserOffset">
            <summary>
            부(Secondary) 헤드의 사용자 오프셋 (2nd 헤드 사용시)
            <para>dx, dy, angle (mm, mm, °)</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc2ndHead.CtlHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <summary>
            2nd 헤드 사용시 개별 헤드에 대한 오프셋 설정
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx, dy (mm), angle (회전 각도) (°)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc2ndHead.ListHeadOffset(SpiralLab.Sirius.ScannerHead,System.Numerics.Vector3)">
            <summary>
            리스트 명령 - 2nd 헤드 사용시 개별 헤드에 대한 오프셋 설정
            <para>(Z 오프셋과 함께 사용불가)</para>
            </summary>
            <param name="head">primary or secondary</param>
            <param name="offset">dx, dy (mm), angle (회전 각도) (°)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc2ndHead.ListSelectCorrection(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            리스트 명령 - 2nd 헤드 사용시 개별 헤드에 스캐너 보정 파일을 변경
            </summary>
            <param name="primaryHeadTableIndex">primary 헤드에 선택할 보정 테이블</param>
            <param name="secondaryHeadTableIndex">secondary 헤드에 선택할 보정 테이블</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcSerialComm">
            <summary>
            RTC 카드에 내장된 RS-232 통신 포트용 인터페이스
            <para>
            리스트 명령 실행중 시리얼 통신을 처리하는 제어 방식에 적합
            </para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialComm.CtlSerialConfig(System.UInt32)">
            <summary>
            시리얼 통신 환경 설정
            <code>
            Data bits: 8
            Start bits: 1
            Stop bits: 1
            Parity: none
            </code>
            </summary>
            <param name="baudRate">9600, ...</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialComm.CtlSerialWrite(System.Byte[])">
            <summary>
            시리얼 통신 쓰기
            </summary>
            <param name="bytes">바이트 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialComm.CtlSerialWrite(System.String)">
            <summary>
            시리얼 통신 쓰기
            </summary>
            <param name="text">문자열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialComm.CtlSerialRead(System.Byte[]@)">
            <summary>
            시리얼 통신 읽기
            </summary>
            <param name="bytes">읽은 바이트 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialComm.ListSerialWrite(System.Byte[])">
            <summary>
            리스트 명령 - 시리얼 통신 쓰기
            </summary>
            <param name="bytes">바이트 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialComm.ListSerialWrite(System.String)">
            <summary>
            리스트 명령 - 시리얼 통신 쓰기
            </summary>
            <param name="text">문자열</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcSerialNo">
            <summary>
            IRtcSerialNo 인터페이스
            <para>
            리스트 버퍼3 영역이 존재하는 RTC5/6 전용 기능
            문자 개체 (SiriusTextDate, SiriusTextTime 등...) 가공시 일련번호 리셋/증가량 처리 지원
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSerialNo.SerialStartNo">
            <summary>
            시작 시리얼 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSerialNo.SerialIncrementStep">
            <summary>
            증가 시리얼 번호값 (CtlSerialReset 함수에 의해 설정)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSerialNo.SerialExternalNo">
            <summary>
            현재 시리얼 번호값 (외부 /START 에 의해 증가된 값)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialNo.CtlSerialReset(System.UInt32,System.UInt32)">
            <summary>
            시리얼 번호 리셋
            </summary>
            <param name="serialNo">시작 번호</param>
            <param name="incrementStep">증가 값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSerialNo.ListSerial(System.UInt32,SpiralLab.Sirius.SerialFormat,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시리얼 번호 마킹
            </summary>
            <param name="numOfDigits">최대 자리수 (최대 15자)</param>
            <param name="serialFormat">SerialFormat 열거형</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcDateTimeOffset">
            <summary>
            IRtcCharacterSet 인터페이스
            <para>MOTF 기반에서 전용 문자 개체 (SiriusTextDate, SiriusTextTime 등...) 가공시 날짜/시간 오프셋 처리 지원</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDateTimeOffset.IsDateTimeOffset">
            <summary>
            DateTime 오프셋 사용여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDateTimeOffset.DateTimeOffsetDays">
            <summary>
            오프셋 날짜 (0 일 경우 현재일)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDateTimeOffset.DateTimeOffsetHours">
            <summary>
            오프셋 시간 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDateTimeOffset.DateTimeOffsetMinutes">
            <summary>
            오프셋 분 (0 일 경우 현재일)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDateTimeOffset.DateTimeOffsetSeconds">
            <summary>
            오프셋 초
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcDateTimeOffset.Now">
            <summary>
            가공을 시작할때의 기준 시간
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcRaster">
            <summary>
            IRtcRaster 인터페이스
            <para>RTC 의 Raster(Bitmap Pixel) Operation 을 지원하기 위해 </para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcRaster.ListPixelLine(System.Single,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">픽셀 출력 채널 : 아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcRaster.ListPixel(System.Single,System.Single,SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 개별 픽셀 명령
            <para>반드시 ListPixelLine 명령이 호출된후에 픽셀 개수만큼의 ListPixel 함수가 호출되어야 함</para>
            </summary>
            <param name="usec">현재 픽셀의 출력 주기(lower than usec in ListPixelLine ) </param>
            <param name="weight">ExtensionChannel 출력의 가중치 값(0~1)</param>
            <param name="compensator">아나로그 출력값 보정기 사용시 지정</param>
            <returns></returns>        
        </member>
        <member name="M:SpiralLab.Sirius.IRtcRaster.ListPixels(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single[],SpiralLab.Sirius.ExtensionChannel,System.Single[],SpiralLab.Sirius.ICompensator{System.Single},SpiralLab.Sirius.ICompensator{System.Single})">
            <summary>
            리스트 명령 - 위 ListPixelLine + ListPixel * n 을 통합한 편이용 함수
            <para>(현재는 지원되지 않는 기능입니다)</para>
            </summary>
            <param name="vStart">가공 시작점</param>
            <param name="vEnd">가공 끝점</param>
            <param name="period">픽셀 주기 (usec)</param>
            <param name="usecValues">매 픽셀 가공 시간 배열</param>
            <param name="ext">아나로그 확장 출력 1,2 지정</param>
            <param name="analogValues">아나로그 값(0~10) 배열</param>
            <param name="usecCompensator">픽셀 출력시간값 보정기 사용시</param>
            <param name="analogCompensator">아나로그 출력 보정기 사용시</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtc3D">
            <summary>
            RTC의 3D 기능 확장
            <para>VarioScan, excelliSHIFT 등의 추가 장치 사용시</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.ZOffset">
            <summary>
            Z 오프셋 (단위 : mm)
            <para>+ 값이 위 방향, - 값 아래 방향</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.ZDefocus">
            <summary>
            Z 디포커스 (defocus) (단위 : mm)
            <para>+ 값이 위 방향, - 값 아래 방향</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.CoefA">
            <summary>
            3D 보정 파일내의 포물선 계수 A
            <para>Zout = A + Bl + Cl²</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.CoefB">
            <summary>
            3D 보정 파일내의 포물선 계수 B
            <para>Zout = A + Bl + Cl²</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.CoefC">
            <summary>
            3D 보정 파일내의 포물선 계수 C
            <para>Zout = A + Bl + Cl²</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.FLength">
            <summary>
            3D 보정 파일내의 초점 혹은 작업 거리 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.KZFactor">
            <summary>
            Z 축의 K-factor 값 (bits/mm)
            <para>= KFactor / 16 in RTC5/6</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtc3D.KZFactorScale">
            <summary>
            Z 축의 KZ-Factor 음수(-)/양수(+) 영역에 대한 스케일값
            <para>(기본값 1 , 1)</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlMove(System.Numerics.Vector3)">
            <summary>
            스캐너 이동
            </summary>
            <param name="vPosition">x, y, z (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlZOffset(System.Single)">
            <summary>
            Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlZDefocus(System.Single)">
            <summary>
            Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            3D 보정 파일에서 A,B,C 계수 읽기
            </summary>
            <param name="fileName"></param>
            <param name="coefA"></param>
            <param name="coefB"></param>
            <param name="coefC"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <summary>
            3D 보정 파일에 A,B,C 계수 쓰기
            </summary>
            <param name="fileName"></param>
            <param name="coefA"></param>
            <param name="coefB"></param>
            <param name="coefC"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListZOffset(System.Single)">
            <summary>
            리스트 명령 - Z 오프셋 
            </summary>
            <param name="zOffset">포커스 Z 이동 오프셋 량 (mm))</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListZDefocus(System.Single)">
            <summary>
            리스트 명령 - Z 디포커스
            </summary>
            <param name="zDefocus">디포커스 Z 이동량 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListJump3D(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListJump3D(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 점프 
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListMark3D(System.Numerics.Vector3,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="vPosition">x,y,z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListMark3D(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 마크
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="z">z 위치 (mm)</param>
            <param name="rampFactor">자동 레이저 제어시의 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListArc3D(System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            Z 축과 평행가공
            </summary>
            <param name="vCenter">중심 위치 (cx, cy, cz) (mm)</param>
            <param name="sweepAngleZ">회전 각도 (°) (+ : 반시계방향)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListArc3D(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - 아크(호) 
            Z 축과 평행가공
            </summary>
            <param name="cx">중심 위치 (cx) (mm)</param>
            <param name="cy">중심 위치 (cy) (mm)</param>
            <param name="cz">중심 위치 (cz) (mm)</param>
            <param name="sweepAngleZ">회전 각도 (+ : 반시계방향)</param>
            <param name="rampFactor">ALC(Automatic Laser Control) Vector Defined 사용시 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtc3D.ListPixelLine3D(System.Single,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius.ExtensionChannel)">
            <summary>
            리스트 명령 - 레스터 처리 (Pixel Raster Operation)
            <para>(현재는 제공되지 않는 기능)</para>
            </summary>
            <param name="usec">매 픽셀의 주기 시간 (usec) : 가공 속도를 결정</param>
            <param name="vDelta">픽셀간 간격 (dx, dy, dz) (mm)</param>
            <param name="pixelCount">한줄을 구성하는 픽셀의 개수</param>
            <param name="ext">아나로그 1 or 2 반드시 선택</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.AutoLaserControlMode">
            <summary>
            자동 레이저 제어 모드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.Disabled">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.SetVelocity">
            <summary>
            스캐너 명령(지령) 속도
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.ActualVelocity">
            <summary>
            스캐너 실제 속도 
            <para>iDRIVE 옵션이 내장된 스캐너만 지원</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.EncoderSpeed">
            <summary>
            입력 엔코더 입력 속도
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.ActualVelocityAndEncoderSpeed">
            <summary>
            스캐너 실제 속도 (Actual Velocity) + 입력 엔코더 속도E (ncoderSpeed)가 복합된 벡터 속도
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlMode.ActualVelocityWithSCANAhead">
            <summary>
            ActualVelocity(ScanAhead 기능으로) + EncoderSpeed 복합 속도
            <para>RTC6 + ScanAhead 스캐너 전용</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AutoLaserControlSignal">
            <summary>
            자동 레이저 제어용 신호 종류
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Disabled">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Analog1">
            <summary>
            아나로그1 출력 (~10V)
            <para>T 타입은 float</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Analog2">
            <summary>
            아나로그2 출력 (~10V)
            <para>T 타입은 float</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.ExtDO8Bit">
            <summary>
            확장2포트 8비트 DO 출력 (0~255)
            <para>T 타입은 uint</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.PulseWidth">
            <summary>
            펄스폭 출력 (usec)
            <para>T 타입은 float</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.Frequency">
            <summary>
            주파수 출력 (Hz)
            <para>T 타입은 float</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.ExtDO16">
            <summary>
            확장1포트 16비트 DO 출력 (0~65535)
            <para>T 타입은 uint</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.AutoLaserControlSignal.SpotDistance">
            <summary>
            RTC6 + SCANahead 지원 스캐너 전용 (예: excelliSCAN)
            <para>T 타입은 float</para>
            <para>Mode 는 ActualVelocityWithSCANAhead 사용</para>
            <para>주파수 출력 방식과 동일하나 RTC6 + SCANahead 조합에서 지원하는 Spot Distance Control 전용</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcAutoLaserControl">
            <summary>
            RTC 의 ALC(Automatic Laser Control 기능의 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcAutoLaserControl.AutoLaserControlByPositionFileName">
            <summary>
            ALC(Automatic Laser Control 중 위치 의존적 방법으로 Scale 값이 외부 파일에서 제공됨
            <para>
            null (string.Empty) 지정후 CtlAutoLaserControl 호출하면 비활성화됨
            </para>
            <code>
            파일 포맷 (RTC 메뉴얼 참고)
            [PositionCtrlTable No]
            PositionNo = Value
            ScaleNo = Value
            ...
            ...
            N = 1-50
            Position : 스캐너 중심으로 부터 떨어진 거리 (반지름) 의 퍼센트값: 100 % =  2^19 bits (RTC5 경우) 
            Scale : 0- 4
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcAutoLaserControl.AutoLaserControlByPositionTableNo">
            <summary>
            ALC(Automatic Laser Control) 중 위치 의존적 방법으로 어떤 테이블을 사용할지 번호 지정
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcAutoLaserControl.AutoLaserControlSignal">
            <summary>
            현재 활성화된 ALC 제어 신호
            <para>CtlAutoLaserControl 호출에 의해 설정됨</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.CtlAutoLaserControl``1(SpiralLab.Sirius.AutoLaserControlSignal,SpiralLab.Sirius.AutoLaserControlMode,``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 전역 설정
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="mode">AutoLaserControlMode 열거형</param>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값 (RTC6 + SpotDistance 의 경우 거리값(mm) </param>
            <param name="max">최대 출력값</param>
            <param name="compensator">출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.ListAutoLaserControl``1(``0,``0,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능 변경
            <para>CtlAutoLaserControl 호출에 의해 지정된 AutoLaserControlSignal 신호가 처리됨</para>
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="percentage100">100% 일때의 출력값</param>
            <param name="min">최소 출력값</param>
            <param name="max">최대 출력값</param>
            <param name="compensator">보정기</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius.AutoLaserControlSignal,``0,SpiralLab.Sirius.ICompensator{``0})">
            <summary>
            ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 활성화
            </summary>
            <typeparam name="T">AutoLaserControlSignal 열거형중 ExtDO 는 uint, 그외는 float</typeparam>
            <param name="ctrl">AutoLaserControlSignal 열거형</param>
            <param name="startingValue">시작 출력값</param>
            <param name="compensator">출력값 보정기 사용시 지정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcAutoLaserControl.ListAlcByVectorEnd">
            <summary>
            ALC(Automatic Laser Control) 기능중 Vector Dependent 기능을 비활성화
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.CharacterSet">
            <summary>
            문자 집합 
            <para>최대 4개까지 지원</para>
            <para>RTC5/6 전용</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CharacterSet._3">
            <summary>
            3
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DateFormat">
            <summary>
            날짜 포맷
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.Year2Digits">
            <summary>
            마지막 2 자리 연도 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.Day">
            <summary>
            날짜
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.Year4Digits">
            <summary>
            4 자리 연도 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DateFormat.MonthDigit">
            <summary>
            월 표기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.TimeFormat">
            <summary>
            시간 포맷
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Hours24">
            <summary>
            24시간제 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Minutes">
            <summary>
            분 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Seconds">
            <summary>
            초 표기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TimeFormat.Hours12">
            <summary>
            12시간제 표기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SerialFormat">
            <summary>
            시리얼 포맷
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SerialFormat.LeadingWithZero">
            <summary>
            앞을 0 으로 채우기 + 오른쪽 정렬
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SerialFormat.NoLeadingAndLeftAligned">
            <summary>
            앞 채우기 없음 + 왼쪽 정렬
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SerialFormat.LeadingWithBlank">
            <summary>
            앞을 공백으로 채우기 + 오른쪽 정렬
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcCharacterSet">
            <summary>
            IRtcCharacterSet 인터페이스
            <para>리스트 버퍼3 영역이 존재하는 RTC5/6 전용 기능</para>
            <para>폰트 데이타를 RTC 내부 메모리에 다운로드 하는 방식</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterBegin(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            특정 색인 문자 좌표 정보 저장 시작 
            <para>이 명령 이후 해당 문자(character)에 대한 리스트 명령 (jump, mark, arc) 명령 호출 필요</para>
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterEnd">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인 문자 저장 완료
            <para>CtlCharacterSetBegin 함수와 짝이 되어 문자 리스트 명령 기록 완료시 호출</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자가 있는지 여부
            </summary>
            <param name="asciiCode">아스키 코드 (0~255)</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.CtlCharacterSetClear(SpiralLab.Sirius.CharacterSet)">
            <summary>
            지정된 색인 문자열 집합을 삭제합니다
            </summary>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListText(System.String,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 문자열 마킹
            </summary>
            <param name="text">문자열</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListDate(SpiralLab.Sirius.DateFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 날짜 마킹
            </summary>
            <param name="dateFormat">DateFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcCharacterSet.ListTime(SpiralLab.Sirius.TimeFormat,System.Boolean,SpiralLab.Sirius.CharacterSet)">
            <summary>
            보호된 리스트 버퍼(3) 영역에 색인된 문자를 이용해 시간 마킹
            호출 시점의 윈도우즈 시스템 시간을 사용함
            </summary>
            <param name="timeFormat">TimeFormat 열거형</param>
            <param name="leadingWithZero">앞선 공간을 0 으로 채우기</param>
            <param name="characterSet">CharacterSet 열거형</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcDualHead">
            <summary>
            IRtcDualHead 이름이 IRtc2ndHead 으로 변경됨. 구버전 하위호환을 위해 남겨짐.
            (Deprecated)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CorrectionFileHeaderParam">
            <summary>
            보정 파일 헤더 파라메터 조회 항목
            <para>RTC5/6 전용 (.ct5 보정 파일 전용)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CorrectionTable">
            <summary>
            2D/3D
            <para>0 = 2D</para>
            <para>1 = 3D</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.KFactor">
            <summary>
            Calibration factor Kxy [bit/mm]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.FocalLengthOrWorkingDistance">
            <summary>
            <code>
            For a configuration with a scan objective: the effective focal length of the objective [mm]. 
            For a configuration without a scan objective: the working distance A [mm]. 
            A = distance from the optical axis of the incident laser beam at the first deflection mirror to the image plane.
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.StretchFactorX">
            <summary>
            Stretch factor for the x direction. Compensates the pyramid-shaped image field change which exists in the z direction of 3D markings.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.StretchFactorY">
            <summary>
            Stretch factor for the y direction. Compensates the pyramid-shaped image field change which exists in the z direction of 3D markings.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CoefficientA">
            <summary>
            Bits ! 
            Coefficient A of the polynomial for z axis control, offset part, ±26 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CoefficientB">
            <summary>
            Bits ! 
            Coefficient B of the polynomial for z axis control, linear part, ±11 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.CoefficientC">
            <summary>
            Bits ! 
            Coefficient C of the polynomial for z axis control, square part, ±4 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.NumOfCorrectionFile">
            <summary>
            <para>
            Number of the correction file. With correction files supplied by SCANLAB, the parameter corresponds to the number in the file name (for example, 145 for D2_145.ct5 or D3_145.ct5)
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.DifferentiationFThetaObjective">
            <summary>
            Differentiation between correction with or without an F-Theta objective.
            <code>
            The following applies: 
            Parameter = 10 * PObj + PTyp with
            – PObj = 0: Correction without F-Theta objective
              PObj = 1: Correction with F-Theta objective
            – if correction with F-Theta objective:
              PTyp = 0.0: without distortion data
              PTyp = 1.0: with F-Theta’s F-stop progression condition
              PTyp = 2.0: with image height table
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.IndicatorFortheSourceOfTheCorrectionFile">
            <summary>
            Indicator for the source of the correction file.
            <code>
            The following applies: Parameter = 1000 * POrig + PVer with
            • POrig = 10000: Originally calculated file
              POrig = 20000: converted from ctb file
              POrig = 30000: reconstructed from txt file
              By manipulating a correction file using correction programs available from SCANLAB,
              POrig is increased by 1 in each case.
               – PVer = Version number of the program used to create the correction file
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.InverseTable">
            <summary>
            Information about the inverse table.
            <code>
            The following applies: Parameter = PExist + 2 × PCalc with
            • PExist = 1.0: valid inverse table is present
              PExist = 0.0: no valid inverse table present
            • If valid inverse table is present:
              PCalc = 0: inverse table calculated ab initio
              PCalc = 1: inverse table numerically calculated
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.AngleCalibration">
            <summary>
            Angle calibration of the scan system.
            <para>
            Mechanical angle deflection in [± °] at 96% of the maximum control.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.ScanHeadGeometry">
            <summary>
            Code for the scan head geometry used for the calculation (for internal use only), for example,
            <code>
            • = –1.0: unknown geometry (for example, for a table converted from a ctb file)
            • = 0.0: standard geometry
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.ProtectiveWindow">
            <summary>
            Indicator for whether an additional protective window has been taken into account.
            <code>
            The following applies: Parameter = 1,000,000 × PT + 1,000 × PI with
            • PT = Protective window thickness in mm (max. 2 decimal places)
            • PI = Refraction index(max. 3 decimal places)
            Example: The value 3,521,450.0 corresponds to a protective window thickness of 3.52 mm and a refraction index of 1.450.
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CorrectionFileHeaderParam.ImageFieldSizeLimited">
            <summary>
            Indicator for whether the image field size has been limited in the correction file.
            <code>
            • = 0.0: without field size limit
            • = 2.0: with field size limit
            </code>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.WobbelShape">
            <summary>
            와블 형상
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.WobbelShape.Ellipse">
            <summary>
            타원형
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.WobbelShape.Perpendicular8">
            <summary>
            8자형 (수직)
            <para>RTC5/6 전용</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.WobbelShape.Parallel8">
            <summary>
            8자형 (수평)
            <para>RTC5/6 전용</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.RtcSignalLevel">
            <summary>
            RTC 카드의 출력및 LASER1,2 및 ON 의 활성화시 신호 레벨
            (RTC5,6 설정 전용)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcSignalLevel.ActiveHigh">
            <summary>
            Active High
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcSignalLevel.ActiveLow">
            <summary>
            Active Low
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMarkingInfo">
            <summary>
            RTC 마킹 정보(marking info 비트 데이타)
            <para>RTC5/6 전용</para>
            <para>Rtc5MarkingInfo / Rtc6MarkingInfo 사용</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMarkingInfo.ToUInt">
            <summary>
            32 비트 값
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcExtension">
            <summary>
            RTC 확장 기능 인터페이스
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlQSwitchDelay(System.Single)">
            <summary>
            Q 스위치 지연 시간값 설정
            <code>
            레이저 모드에 따라 다르게 적용됨
            Yag1 : 0
            Yag2 : FPK 로 설정
            Yag3 : 10usec 고정
            Yag5 : 이 함수로 설정된 값
            </code>
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlLaserSignalLevel(SpiralLab.Sirius.ILaserControlSignal)">
            <summary>
            레이저 출력 신호 레벨 설정
            </summary>
            <param name="laserControlSignal">RTC 모델에 맞는 ILaserControlSignal 구현된 인스턴스 (Rtc5LaserControlSignal, Rtc6LaserControlSignal)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlExternalControl(SpiralLab.Sirius.IRtcExternalControlMode,System.UInt32)">
            <summary>
            외부 트리거 사용시 설정
            </summary>
            <param name="mode">RTC (RTC5,6 경우 15핀) /START, /STOP 등의 트리거 사용여부 설정</param>
            <param name="maxStartCounts">/START 트리거 최대 허용 개수 설정</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            외부 /START 실행된 회수 조회
            </summary>
            <param name="counts">회수값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlJumpMode(SpiralLab.Sirius.IRtcJumpMode)">
            <summary>
            점프 튜닝 모드 
            <para>RTC5/6 + intelli~ 스캐너 제품군 전용</para>
            </summary>
            <param name="jumpMode">Rtc5JumpMode , Rtc6JumpMode 클래스</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlLoadedCorrectionInfo(SpiralLab.Sirius.CorrectionTableIndex,SpiralLab.Sirius.CorrectionFileHeaderParam,System.Double@)">
            <summary>
            로드된 보정 파일의 헤더 정보 조회
            </summary>
            <param name="tableIndex">테이블 번호 (Table1)</param>
            <param name="parameter">CorrectionFileHeader 열거 항목</param>
            <param name="data">조회된 데이타</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlMarkingInfo(SpiralLab.Sirius.IRtcMarkingInfo@)">
            <summary>
            마킹 정보 32비트값 조회
            <para>
            RTC5 : Rtc5MarkingInfo
            RTC6 : Rtc6MarkingInfo
            </para>
            </summary>
            <param name="markingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.CtlTrackingError(SpiralLab.Sirius.ScannerHead,System.UInt32,System.UInt32)">
            <summary>
            트래킹 에러 보상
            <para>(추천 : 스캔 헤드의 메뉴얼에 명기된 Tracking Error 시간을 지정)</para>
            </summary>
            <param name="head">스캔 헤드 (ScannerHead 열거형)</param>
            <param name="xyUsec">XY 축 보상 시간(usec)</param>
            <param name="zUsec">Z 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListFirstPulseKiller(System.Single)">
            <summary>
            FPK(First Pulse Killer) 시간값 설정
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListQSwitchDelay(System.Single)">
            <summary>
            Q 스위치 지연 시간값 설정
            <code>
            레이저 모드에 따라 다르게 적용됨
            Yag1 : 0
            Yag2 : FPK 로 설정
            Yag3 : 10usec 고정
            Yag5 : 이 함수로 설정된 값
            </code>
            </summary>
            <param name="usec">usec</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListSkyWritingBegin(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - sky-writing 모드 시작
            <para>레이저 가감속 구간의 모션 지연으로 인한 레이저 펄스의 중첩을 예방하기 위한 기능</para>
            <para>모드 3이 강제로 사용됨</para>
            </summary>
            <param name="mode">1,2,3</param>
            <param name="laserOnShift">usec</param>
            <param name="timeLag">usec</param>
            <param name="angularLimit">활성화될 각도 설정 (모드3 전용)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListSkyWritingEnd">
            <summary>
            리스트 명령  - sky-writing 모드 중지
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListWobbel(System.Single,System.Single,System.Single,SpiralLab.Sirius.WobbelShape)">
            <summary>
            리스트 명령 - 와블 (Wobbel Operation)
            </summary>
            <param name="longitudinal">Longitudinal (세로 : parallel movement) (mm)</param>
            <param name="transverse">transverse (가로 : perpendicular movement) (mm)</param>
            <param name="frequencyHz">초당 반복회수 (Hz)</param>
            <param name="wobbelShape">WobbelShape 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListJumpMode(SpiralLab.Sirius.JumpModeFlag)">
            <summary>
            리스트 명령 - 점프 튜닝 모드 
            <para>RTC5/6 + intelli~ 스캐너 제품군 전용</para>
            </summary>
            <param name="flag">점프 모드 선택</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListJumpDrill(System.Numerics.Vector2,System.Single)">
            <summary>
            리스트 명령 - (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="vPosition">x,y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcExtension.ListJumpDrill(System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - (intelli~ 제품군 기반으로 Vector/Jump 튜닝 지원시)
            </summary>
            <param name="x">x 위치 (mm)</param>
            <param name="y">y 위치 (mm)</param>
            <param name="msec">시간 (msec)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MeasurementChannel">
            <summary>
            계측 (Measurement) 채널 목록
            <para>RTC4 는 최대 2개, RTC5/6 는 최대 4개의 채널을 동시에 계측 가능</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.LaserOn">
            <summary>
            LASERON signal (1 = laser signal on, 0 = laser signal off.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAX">
            <summary>
            StatusAX (X-axis status signal of the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAY">
            <summary>
            StatusAY (Y-axis status signal of the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBX">
            <summary>
            StatusBX (X-axis status signal of the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBY">
            <summary>
            StatusBY (Y-axis status signal of the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleX">
            <summary>
            SampleX (X-axis cartesian control value).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleY">
            <summary>
            SampleY (Y-axis cartesian control value).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleZ">
            <summary>
            SampleZ (Z-axis cartesian control value).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAX_Coor">
            <summary>
            SampleAX_Corr (corrected X-axis control value for the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAY_Coor">
            <summary>
            SampleAY_Corr (corrected Y-axis control value for the primary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAZ_Coor">
            <summary>
            SampleAZ_Corr (corrected Z-axis control value, if XY are connected to the primary scan head connector; identical to the effective output value for the Z axis).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBX_Coor">
            <summary>
            SampleBX_Corr (corrected X-axis control value for the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBY_Coor">
            <summary>
            SampleBY_Corr (corrected Y-axis control value for the secondary scan head connector).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBZ_Coor">
            <summary>
            SampleBZ_Corr (corrected Z-axis control value, if XY are connected to the secondary scan head connector; identical to the effective output value for the Z axis).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAX_LaserOn">
            <summary>
            StatusAX+LASERON (StatusAX for laser signal on, –524288 for laser signal off).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusAY_LaserOn">
            <summary>
            StatusAY+LASERON (StatusAY for laser signal on, –524288 for laser signal off).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBX_LaserOn">
            <summary>
            StatusBX+LASERON (StatusBX for laser signal on, –524288 for laser signal off).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.StatusBY_LaserOn">
            <summary>
            StatusBY+LASERON (StatusBY for laser signal on, –524288 for laser signal off).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAX_Out">
            <summary>
            SampleAX_Out (effective X-axis output value for the primary scan head connector; if applicable incl. any scanner offset and gain compensation, see comments; not usable for measuring Z-axis output values).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAY_Out">
            <summary>
            SampleAY_Out (effective Y-axis output value for the primary scan head connector; not usable for measuring Z-axis output values).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBX_Out">
            <summary>
            SampleBX_Out (effective X-axis output value for the secondary scan head connector; not usable for measuring Z-axis output values).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBY_Out">
            <summary>
            SampleBY_Out (effective Y-axis output value for the secondary scan head connector; not usable for measuring Z-axis output values).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.AutomaticLaserControlParam">
            <summary>
            Laser control parameter of automatic laser control (see set_auto_laser_control).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAX_Trans">
            <summary>
            SampleAX_Trans (transformed X-axis control value for the primary scan head connector).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAY_Trans">
            <summary>
            SampleAY_Trans (transformed Y-axis control value for the primary scan head connector).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleAZ_Trans">
            <summary>
            SampleAZ_Trans (transformed Z-axis control value, if XY are connected to the primary scan head connector).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBX_Trans">
            <summary>
            SampleBX_Trans (transformed X-axis control value for the secondary scan head connector).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBY_Trans">
            <summary>
            SampleBY_Trans (transformed Y-axis control value for the secondary scan head connector).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.SampleBZ_Trans">
            <summary>
            SampleBZ_Trans (transformed Z-axis control value, if XY are connected to the secondary scan head connector).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.AutomaticLaserControlByVectorParam">
            <summary>
            Laser control parameter of vector-defined laser control (see set_vector_control).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.FocusShift">
            <summary>
            Focus shift (see set_vector_control, set_defocus, set_defocus_list).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtAO1">
            <summary>
            12-bit output value at the ANALOG OUT1 output port (see set_auto_laser_control, set_vector_control and chapter 9.1.4 ”12- Bit Analog Output Ports”).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtAO2">
            <summary>
            12-bit output value at the ANALOG OUT2 output port (see set_auto_laser_control, set_vector_control and chapter 9.1.4 ”12- Bit Analog Output Ports”). /// </summary>
            RTC5 이상만 지원
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtDO16">
            <summary>
            Output value at the 16-bit digital output port (see set_auto_laser_control, set_vector_control and chapter 9.1.1 ”16- Bit Digital Output Port”) /// </summary>
            RTC5 이상만 지원
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtDO8">
            <summary>
            Output value at the 8-bit digital output port (see set_auto_laser_control, set_vector_control and chapter 9.1.2 ”8- Bit Digital Output Port”).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.PulseLength">
            <summary>
            Pulse length (PulseLength) of the LASER1 and LASER2 laser signals (see set_auto_laser_control, set_vector_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.OutputPeriod">
            <summary>
            Output period (HalfPeriod) of the LASER1 and LASER2 laser signals (see set_auto_laser_control, set_vector_control).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.Enc0Counter">
            <summary>
            Counter value of encoder counter Encoder0.
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.Enc1Counter">
            <summary>
            Counter value of encoder counter Encoder1.
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.MarkSpeed">
            <summary>
            Marking speed (from set_mark_speed, set_mark_speed_ctrl).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtDI16">
            <summary>
            16-bit digital input (EXTENSION 1).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ZoomValueForIntelliWeld">
            <summary>
            Zoom value (only for intelliWELD II).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.TimeStampCounter">
            <summary>
            Time stamp counter (see chapter 8.13 ”Time Measurements”, page 231).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.WobbelAmplitude">
            <summary>
            Wobbel amplitude (see set_wobbel, set_wobbel_mode and chapter 8.4 ”Wobbel Mode”, page 189).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ExtAI">
            <summary>
            ReadAnalogIn (see read_analog_in).
            RTC5 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ScaledEncoderX">
            <summary>
            Scaled encoder value for X. (RTC6 only)
            RTC6 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ScaledEncoderY">
            <summary>
            Scaled encoder value for Y. (RTC6 only)
            RTC6 이상만 지원
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementChannel.ScaledEncoderZ">
            <summary>
            Scaled encoder value for Z. (RTC6 only)
            RTC6 이상만 지원
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMeasurement">
            <summary>
            IRtcMeasurement 인터페이스
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.CtlGetMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32[]@)">
            <summary>
            측정된(샘플링된) 계측 데이타 가져오기
            </summary>
            <param name="channel">채널</param>
            <param name="data">데이타 배열</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.CtlConvertMeasurement(SpiralLab.Sirius.MeasurementChannel,System.Int32,System.Double@)">
            <summary>
            계측으로 취득된 Raw 데이타를 친숙한 사용자 단위계로 변환
            </summary>
            <param name="channel">MeasurementChannel 채널</param>
            <param name="data">입력 데이타</param>
            <param name="convertedValue">변환된 데이타</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.ListMeasurementBegin(System.Single,SpiralLab.Sirius.MeasurementChannel[])">
            <summary>
            리스트 명령 - 샘플링 측정 시작
            </summary>
            <param name="frequency">샘플링 주기 (Hz : ~ 100KHz)</param>
            <param name="channels">대상 채널 (RTC4: 2개, RTC5/6: 4개)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMeasurement.ListMeasurementEnd">
            <summary>
            리스트 명령 - 샘플링 측정 끝
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.RtcEncoder">
            <summary>
            RTC 입력 엔코더 종류
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcEncoder.EncX">
            <summary>
            X 엔코더 (0) or Angular 엔코더 (0)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.RtcEncoder.EncY">
            <summary>
            Y 엔코더 (1)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.EncoderWaitCondition">
            <summary>
            엔코더 대기 조건
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Under">
            <summary>
            입력 엔코더 값이 지정된 값보다 작아질 때까지 대기
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Auto">
            <summary>
            자동 = 실행될 당시의 입력 엔코더 값을 기준으로 자동 판단 (리스트 명령이 실행되는 시점에서의 입력 엔코더값이 사용됨)
            <code>
            예1) 입력된 엔코더값 1000 일 경우, 비교 위치 2000 -> Over 로 자동 판단
            예2) 입력된 엔코더값 1000 일 경우, 비교 위치 0 -> Under 로 자동 판단
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderWaitCondition.Over">
            <summary>
            입력 엔코더 값이 지정된 값 보다 커질 때까지 대기
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.EncoderRangeCondition">
            <summary>
            엔코더 사용범위 (제한 영역)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderRangeCondition.UnderFlow">
            <summary>
            입력 엔코더 + 위치값이 지정된 영역 내부일 때
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderRangeCondition.Boundary">
            <summary>
            영역을 넘나들때
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.EncoderRangeCondition.OverFlow">
            <summary>
            입력 엔코더 + 위치값이 지정된 영역 외부일 때
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotfEncoderType">
            <summary>
            MOTF 구동 타입
            현재 리스트 에서 실행중인 MOTF 종류 구분용
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotfEncoderType.None">
            <summary>
            미정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotfEncoderType.XY">
            <summary>
            XY 엔코더 리스트 명령 구동중
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotfEncoderType.Angular">
            <summary>
            Angular (회전) 엔코더 리스트 명령 구동중
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcMOTF">
            <summary>
            IRtcMOTF 인터페이스
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncXCountsPerMm">
            <summary>
            mm 당 엔코더 X 의 펄스 개수 
            <code>
            
                                  counts 
            EncXCountsPerMm =   -----------
                                    mm  
            * 주의 사항 (한축의 엔코더만 사용할 경우에도 양축 모두 값을 설정하는것을 추천)               
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncYCountsPerMm">
             <summary>
             mm 당 엔코더 Y 의 펄스 개수
            <code>
             
                                   counts 
             EncYCountsPerMm =   -----------
                                     mm  
             * 주의 사항 (한축의 엔코더만 사용할 경우에도 양축 모두 값을 설정하는것을 추천)
             </code>
             </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncXSimulatedSpeed">
            <summary>
            엔코더 X 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncYSimulatedSpeed">
            <summary>
            엔코더 Y 의 가상 속도 mm/s
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncCountsPerRevolution">
            <summary>
            MOTF Angular 사용시 단위 회전당 엔코더 개수 (enc/rev)
            <para>
            주의) 회전체가 시계방향으로 회전시 엔코더가 증가하는 방향임
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.EncSimulatedAngularSpeed">
            <summary>
            MOTF Angular 사용시 엔코더 가상 각속도 (˚/sec)
            <para>주의) 회전체가 시계방향으로 회전시 엔코더가 증가하는 방향임</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcMOTF.MotfAngularCenter">
            <summary>
            MOTF Angular 사용시 회전 중심 위치 상대 좌표 (스캐너 중심으로 부터 떨어진 거리값)
            <code>
            예를 들어 회전 중심위치가 -50, 0 일 경우
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                 |--------|--------|                    
                                           |                 |        |        |
                                           |                 |        |        |       
                                           |                 |        |        |    
            ------------------------ Rotate Center --------------- Scanner ----|
                                       -50 , 0               |     50 , 0      |    
                                           |                 |        |        |      
                                           |                 |        |        |
                                           |                 |--------|--------|                    
                                           |                          .          
                                           |                         .           
                                           |                        .            
                                           |                      .             
                                           |                    .                
                                           |                 .                   
                                           |   /          . 
                                           |   --  Clock Wise = Angle + = Enc + 
                                           |   \
            </code>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfEncoderReset(System.Single,System.Single)">
            <summary>
            MOTF XY 사용시 입력 엔코더의 초기화 (오프셋값 Dx, Dy를 설정 가능)
            </summary>
            <param name="offsetX">X 초기화 위치 (mm)</param>
            <param name="offsetY">Y 초기화 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfGetEncoder(System.Int32@,System.Int32@,System.Single@,System.Single@)">
            <summary>
            MOTF XY 사용시 현재 엔코더 값/X,Y 위치 얻기
            </summary>
            <param name="encX">X 엔코더 값 (counts)</param>
            <param name="encY">Y 엔코더 값 (counts)</param>
            <param name="encXmm">X 엔코더의 위치 (mm)</param>
            <param name="encYmm">Y 엔코더의 위치 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfEncoderSpeed(System.Single,System.Single)">
            <summary>
            MOTF XY 사용시 외부 엔코더 입력 대신 내부 가상 엔코더를 활성화 
            <para>
            가상 입력 엔코더 속도를 지정하면 내부 1MHz의 가상 엔코더가 활성화되어 외부 기구부가 이동하는 효과 발생
            X,Y 모두 0 입력시 가상 엔코더 비활성화됨
            </para>
            </summary>
            <param name="encXSimulatedSpeed">가상 엔코더X 속도 (mm/s)</param>
            <param name="encYSimulatedSpeed">가상 엔코더Y 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfTrackingError(System.UInt32,System.UInt32)">
            <summary>
            MOTF XY 사용시 스캐너의 트래킹 에러 보상
            <para>0, 0 으로 지정시 Disabled 됨</para>
            <code>
            스캐너 Spec 문서에 기재된 Tracking Error 시간값 설정
            EC = E + (E – EP ) * TrackingError,
            EC : 현재 사이클에서의 엔코더 보상값
            E : 현재 엔코더 값
            EP : 이전 사이클에서의 엔코더 보상값 
            </code>
            </summary>
            <param name="xUsec">X 축 보상 시간(usec)</param>
            <param name="yUsec">Y 축 보상 시간(usec)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfCompensateTable(System.String,System.UInt32)">
            <summary>
            MOTF XY 사용시 엔코더 테이블 보정 파일 로드
            <para>
            스테이지의 기구 왜곡을 해소하기 위해 통상 2D 매핑(Mapping) 을 진행하는데, 이 매핑값들을 RTC 에도 설정하여 사용한다. 
            이는 기구부에서 발생시키는 엔코더는 매핑전 신호(펄스)가 전달되어 위치 왜곡이 발생하는데 이를 보정해주는 기능
            </para>
            <code>
            자세한 포맷은 RTC 메뉴얼 참고
            보정 테이블0 번의 포맷 예 : 
            [Fly2DTable0]
            Encoder0 Encoder1 Encoder0_Delta Encoder1_Delta ;주석
            ...
            참고) 모든 위치값은 bits 이므로 mm * kFactor 하여 bits 값을 구할것. 
            참고) 모든 bits 값은 +-524288 을 초과하지 말것
            </code>
            </summary>
            <param name="fileName">보정 파일 이름 (경로포함), null 지정시 보정 리셋됨</param>
            <param name="tableNo">테이블 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            MOTFXY / MOTF Angular 사용시 외부 트리거 시작 (External /START) 사용시 지연 설정
            </summary>
            <param name="enc">x/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfGetAngularEncoder(System.Int32@,System.Single@)">
            <summary>
            MOTF Angular 사용시 현재 엔코더 값/각도 얻기 (회전축 전용, Enc0 엔코더 입력 사용됨)
            </summary>
            <param name="enc">엔코더 값 (counts)</param>
            <param name="angle">각도 (˚)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfAngularCenter(System.Numerics.Vector2)">
            <summary>
            MOTF Angular 사용시 회전 중심의 위치
            <code>
            스캐너에서의 상대적인 회전 중심 x,y (mm) 위치값
            예를 들어 회전 중심위치가 -50, 0 일 경우
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                 |--------|--------|                    
                                           |                 |        |        |
                                           |                 |        |        |       
                                           |                 |        |        |    
            ------------------------ Rotate Center --------------- Scanner ----|
                                       -50 , 0               |     50 , 0      |    
                                           |                 |        |        |      
                                           |                 |        |        |
                                           |                 |--------|--------|                    
                                           |                          .          
                                           |                         .           
                                           |                        .            
                                           |                      .             
                                           |                    .                
                                           |                 .                   
                                           |   /          . 
                                           |   --  Clock Wise = Angle + = Enc + 
                                           |   \
            </code>
            </summary>
            <param name="vCenter">스캐너 중심에서 회전 중심의 위치 x,y (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfEncoderAngularSpeed(System.Single)">
            <summary>
            MOTF Angular 사용시 가상 엔코더 각속도 설정
            </summary>
            <param name="encSimulatedSpeed">각속도 (˚/sec) (0: Disable, +: 물체가 시계(CW) 방향으로 회전, -: 물체가 반시계(CCW) 방향으로 회전)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.CtlMotfOverflowClear">
            <summary>
            MOTF XY / MOTF Angular 영역 벋어남 오류 리셋
            <para>오류 여부는 RtcMarkingInfo 에서 제공됨 </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfBegin(System.Boolean)">
            <summary>
            리스트 명령 - MOTF XY(직교) 리스트 명령 시작
            <para>
            엔코더 값 초기화시에는 CtlEncoderReset에서 설정한 오프셋 값으로 초기화되며,
            초기화를 하지 않더라도 ListBegin 시에는 외부 트리거 (/START)를 사용가능하도록 설정하기 때문에
            해당 트리거 신호가 활성화(Closed)되면 엔코더가 자동으로 리셋(초기화) 되도록 설정됨
            </para>
            </summary>
            <param name="encoderReset">엔코더 X,Y 초기화 여부(</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <summary>
            리스트 명령 - MOTF Angular(회전)  
            <code>
            기구 회전부의 엔코더가 Enc0 으로 입력되고, 이때 회전 중심부분은 스캐너에서의 상대적인 가상 위치값
            예를 들어 회전 중심위치가 -50, 0 일 경우
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                                    
                                           |                 |--------|--------|                    
                                           |                 |        |        |
                                           |                 |        |        |       
                                           |                 |        |        |    
            ------------------------ Rotate Center --------------- Scanner ----|
                                       -50 , 0               |     50 , 0      |    
                                           |                 |        |        |      
                                           |                 |        |        |
                                           |                 |--------|--------|                    
                                           |                          .          
                                           |                         .           
                                           |                        .            
                                           |                      .             
                                           |                    .                
                                           |                 .                   
                                           |   /          . 
                                           |   --  Clock Wise = Angle + = Enc + 
                                           |   \
            </code>
            </summary>
            <param name="vCenter">스캐너 중심에서 회전 중심의 위치 x,y (mm)</param>
            <param name="encoderReset">엔코더 초기화 여부</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfOverflowClear">
            <summary>
            MOTF XY / MOTF Angular 영역 벋어남 오류 리셋
            <para>오류 여부는 RtcMarkingInfo 에서 제공됨 </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfLimitIf(SpiralLab.Sirius.RtcEncoder,SpiralLab.Sirius.EncoderRangeCondition)">
            <summary>
            리스트 명령 - MOTF 사용시 해당 범위 조건에 맞으면 다음 리스트 명령 실행. 맞지 않으면 건너뜀
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListExternalControlDelay(SpiralLab.Sirius.RtcEncoder,System.Single)">
            <summary>
            리스트 명령 - 외부 트리거 시작 (External /START) 사용시 지연 설정
            </summary>
            <param name="enc">X/Y 엔코더 종류</param>
            <param name="distance">엔코더 지연 거리</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfWait(SpiralLab.Sirius.RtcEncoder,System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            리스트 명령 - MOTF XY 사용시 지정된 엔코더 단축(X/Y)의 위치가 특정 조건을 만족할때까지 리스트 명령 대기
            <para>(단축 동기화 용)</para>
            <para>스캐너는 고정(Stationary) 위치에서 대기함</para>
            </summary>
            <param name="enc">엔코더 축 지정</param>
            <param name="position">위치값 (mm)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfAngularWait(System.Single,SpiralLab.Sirius.EncoderWaitCondition)">
            <summary>
            리스트 명령 - MOTF Angular 사용시 지정된 엔코더 회전축(Enc0)의 각도가 특정 조건을 만족할때까지 리스트 명령 대기
            <para>기구 회전부가 시계 방향으로 회전시 엔코더 증가(각도 증가) 방향</para>
            <para>스캐너는 고정(Stationary) 위치에서 대기함</para>
            </summary>
            <param name="angle">각도 (°)</param>
            <param name="cond">대기 조건</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfWaitRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            리스트 명령 - MOTF XY 사용시 두개의 엔코더가 (X/Y)가 특정 조건이 될때 까지 대기 (다축 동기화 용)
            <para>스캐너는 고정(Stationary) 위치에서 대기함</para>
            </summary>
            <param name="positionX">X 축 위치 (mm)</param>
            <param name="rangeX">조건 범위 (mm)</param>
            <param name="positionY">Y 축 위치 (mm)</param>
            <param name="rangeY">조건 범위 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF XY / MOTF Angular 사용시 해당 범위를 설정
            <para>
            범위를 벋어나면 RtcMarkingInfo 내부에 에러 비트가 설정됨
            CtlMotfOverflowClear 사용해 RtcMarkingInfo 내부 에러 비트 리셋 지원
            </para>
            </summary>
            <param name="xRange">X 영역 크기 (mm)</param>
            <param name="yRange">Y 영역 크기 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfEnd(System.Numerics.Vector2)">
            <summary>
            리스트 명령 - MOTF XY / MOTF Angular 로 동작하는 리스트 명령 끝
            <para>XY MOTF / Angular MOTF 종료시 스캐너를 지정된 위치로 점프 가능</para>
            </summary>
            <param name="vPosition">점프 위치 (x,y) (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcMOTF.ListMotfCall(System.UInt32,System.UInt32)">
            <summary>
            리스트 명령 - 특정 리스트 주소(위치)로 점프하여 연속 가공
            <para>주의) 리스트 타입을 단일(Single)로 사용해야 특정 리스트 명령 위치가 유효함</para>
            </summary>
            <param name="listPosition">리스트 위치 (RTC4: ~8000, RTC5: ~2^20-1, RTC6: ~2^23-1). 단 리스트 타입을 Single 로 사용해야 한다</param>
            <param name="repeats">반복 회수(0 : 무제한, 1 이상 : 지정된 회수만큼 반복)</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius.MotionType">
            <summary>
            모션 타입
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.ScannerOnly">
            <summary>
            스캐너 단독 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.StageOnly">
            <summary>
            스태이지 단독 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionType.StageAndScanner">
            <summary>
            스캐너 + 스테이지 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MotionMode">
            <summary>
            ACS 모션 제어 모드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionMode.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionMode.Unfollow">
            <summary>
            외부 제어 모드 (syncAXIS 가 아닌 외부 프로그램)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MotionMode.Follow">
            <summary>
            자체 제어 모드 (syncAXIS 제어 모드)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScanDevice">
            <summary>
            스캔 헤드 번호 (멀티 헤드 사용시)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice1">
            <summary>
            스캔 헤드 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice2">
            <summary>
            스캔 헤드 2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice3">
            <summary>
            스캔 헤드 3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ScanDevice.ScanDevice4">
            <summary>
            스캔 헤드 4
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Stage">
            <summary>
            스테이지 번호 (멀티 스테이지 사용시)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Stage.Stage1">
            <summary>
            스테이지 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Stage.Stage2">
            <summary>
            스테이지 2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Stage.Stage3">
            <summary>
            스테이지 3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.Stage.Stage4">
            <summary>
            스테이지 4
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.OperationStatus">
            <summary>
            SyncAxis 내부 인스턴스의 오퍼레이션 상태 색상
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.OperationStatus.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.OperationStatus.Green">
            <summary>
            Green (정상 상태)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.OperationStatus.Yellow">
            <summary>
            Yellow (경고 상태)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.OperationStatus.Red">
            <summary>
            Red (에러 상태)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ContourDependentSpeedDirection">
            <summary>
            경로 의존 속도 제어시 방향
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ContourDependentSpeedDirection.Middle">
            <summary>
            속도 계산 기준 : 중점
            <para>
            (기본값)
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ContourDependentSpeedDirection.Right">
            <summary>
            속도 계산 기준 : 우
            <para>
            Speeds are determined right of the curve mid-line
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ContourDependentSpeedDirection.Left">
            <summary>
            속도 계산 기준 : 좌
            <para>
            Speeds are determined left of the curve mid-line.
            </para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DynamicViolationReaction">
            <summary>
            역학 침범시 처리 방법들
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicViolationReaction.WarningOnly">
            <summary>
            경고
            <para>
            Log a warning message.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicViolationReaction.AbortImmediately">
            <summary>
            즉시 정지
            <para>
            Immediately abort job execution.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicViolationReaction.StopAndReport">
            <summary>
            즉시 정지후 보고
            <para>
            End the job and do a controlled jump to home position.
            </para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.DynamicMonitoringLevel">
            <summary>
            역학 모니터링 신호
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicMonitoringLevel.Deactivated">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicMonitoringLevel.Position">
            <summary>
            위치 제한 영역 초과 모니터링
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicMonitoringLevel.Velocity">
            <summary>
            속도 제한 초과 모니터링
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicMonitoringLevel.Acceleration">
            <summary>
            가속도 제한 초과 모니터링
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.DynamicMonitoringLevel.Jerk">
            <summary>
            가가속도 제한 초과 모니터링
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MinMax">
            <summary>
            최소 최대값 처리용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MinMax.Min">
            <summary>
            최소값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MinMax.Max">
            <summary>
            최대값
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.AxisXY">
            <summary>
            XY 데이타 표현용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AxisXY.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.AxisXY.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScannerDynamic">
            <summary>
            스캐너 역학 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerAngularVelLimit">
            <summary>
            스캐너 역학 각속도 제한값 (rad/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerAngularAccLimit">
            <summary>
            스캐너 역학 각가속도 제한값 (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerAngularJerkLimit">
            <summary>
            스캐너 역학 각 가가속도 제한값 (rad/s³)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerFieldMinLimit">
            <summary>
            스캐너 작업 영역 최소 크기 X,Y 제한값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerFieldMaxLimit">
            <summary>
            스캐너 작업 영역 최대 크기 X,Y 제한값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerJumpAngularAcc">
            <summary>
            스캐너 계산 최대 역학 점프 각 가속도 (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerJumpAngularJerk">
            <summary>
            스캐너 계산 최대 역학 점프 각 가가속도 (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerMarkAngularAcc">
            <summary>
            스캐너 계산 최대 역학 마크 각 가속도 (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerDynamic.ScannerMarkAngularJerk">
            <summary>
            스캐너 계산 최대 역학 마크 각 가가속도 (rad/s²)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ScannerDynamic.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.StageDynamic">
            <summary>
            스테이지 역학 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageVelLimit">
            <summary>
            스테이지 역학 속도 제한 (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageAccLimit">
            <summary>
            스테이지 역학 가속도 제한 (mm/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageJerkLimit">
            <summary>
            스테이지 역학 가가속도 제한 (mm/s³)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageFieldMinLimit">
            <summary>
            스테이지 필드 최소 크기 X,Y 제한값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageFieldMaxLimit">
            <summary>
            스테이지 필드 최대 크기 X,Y 제한값 (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageVel">
            <summary>
            스테이지 계산 최대 역학 속도 (mm/s) 
            <para>StageOnly 에서 유효 </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageAcc">
            <summary>
            스테이지 계산 최대 역학 가속도 (mm/s²)
            <para>StageOnly 에서 유효 </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageDynamic.StageJerk">
            <summary>
            스테이지 계산 최대 역학 가가속도 (mm/s³)
            <para>StageOnly 에서 유효 </para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.StageDynamic.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Dynamics">
            <summary>
            Dynamics (스캐너및 스테이지 역학) 설정 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.Scanner">
            <summary>
            스캐너 역학 설정값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.ScannerMonitoringLevel">
            <summary>
            스캐너 모니터링 레벨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.Stage1">
            <summary>
            스테이지1 역학 설정값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.Stage2">
            <summary>
            스테이지2 역학 설정값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.Stage3">
            <summary>
            스테이지3 역학 설정값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.Stage4">
            <summary>
            스테이지4 역학 설정값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.StageMonitoringLevel">
            <summary>
            스테이지 역학 모니터링 레벨
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Dynamics.Reaction">
            <summary>
            역학 침범 발생시 처리 방법
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Dynamics.#ctor">
            <summary>
            기본 생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.MarkConfig">
            <summary>
            Mark Config 설정 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MarkConfig.LaserPreTriggerTime">
            <summary>
            레이저 사전 트리거 시간 (usec)
            <para>
            Time to trigger the laser signal in advance, if a Mark Segment is executed.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MarkConfig.LaserSwitchOffsetTime">
            <summary>
            레이저 신호 오프셋 시간 (usec) 
            <para>
            Time shift for the  laser signals output. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MarkConfig.LaserMinOffTime">
            <summary>
            레이저 신호 활성화 최소 시간 (usec)
            <para>
            Shortest “Laser Standby” Operation duration.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MarkConfig.JumpSpeed">
            <summary>
            복합 (스테이지 + 스캐너) 점프 속도 (mm/s)
            <para>
            Desired combined jump speed (that is,  combined scanner and positioning stage motion) during Job execution.
            In StageOnly mode, this speed is strictly adhered to as maximum speed, otherwise the value may be slightly exceeded temporarily.
            As of ≥ V1.5.0, the following applies: In operation mode “StageOnly”, this speed is strictly adhered to as the maximum speed.
            In the operation mode “ScannerOnly” and “ScannerAndStage”, the value can even be temporarily exceeded slightly.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MarkConfig.MarkSpeed">
            <summary>
            복합 (스테이지 + 스캐너) 마크 속도 (mm/s)
            <para>
            The highest desired combined  marking speed(that is, combined scanner and positioning stage motion) during Job execution.
            There may be cases with blending curves at corner points where the syncAXIS control instance must apply a lower speed.
            Then at least the value of MinimalMarkSpeed is used.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.MarkConfig.MinimalMarkSpeed">
            <summary>
            최소 마크 속도 (mm/s)
            <para>블렌딩된 모서리 구간의 최소 마크 속도 (mm/s). 이 속도에 못미칠 경우 Sky writing 삽입되어 실행됨</para>
            <para>
            The lowest desired spot velocity that shall be reached in corners of the contour.
            With blending curves at corner points – in order to make rounded edges possible 
            – the syncAXIS control instance is allowed to slow down to this speed.
            See MarkSpeed.  If a exact defined corner blending cannot be performed with the known scanner and positioning stage dynamics 
            with at least this minimal marking speed, a Sky Writing-like motion is executed.
            </para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MarkConfig.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.BlendModes">
            <summary>
            블렝딩 모드 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.BlendModes.Deactivated">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.BlendModes.VariableBlending">
            <summary>
            가변 블렌딩
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.BlendModes.MinimalBlending">
            <summary>
            최소 블렌딩
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.BlendModes.FixedBlending">
            <summary>
            고정 블렌딩
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.SplineModes">
            <summary>
            스플라인 모드
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SplineModes.Deactivated">
            <summary>
            비활성화
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SplineModes.Interpolating">
            <summary>
            보간
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.SplineModes.Approximating">
            <summary>
            근사
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.GeometryConfig">
            <summary>
            Geometry Config 설정 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.BlendMode">
            <summary>
            블랜딩 모드 
            <para>Blend Mode </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.MaxBlendRadius">
            <summary>
            블랜딩 활성화되는 모서리의 최대 거리값 : R (mm)
            <para>
            Radius of the circle around the corner point(between two vectors) in which the blending curve is to be positioned.
            In the marking result,  blending curves are also limited by the vector length: Ractual = min(R, l/2). 
            If the values specified with MaxBlendRadius and/or ApproxBlendLimit cannot be adhered to, 
            then the syncAXIS control instance executes a jump(similar but different as  with RTC-Sky Writing). 
            Important: For BlendMode = slsc_BlendModes_MinimalBlending, the MaxBlendRadius value is used as the limit for the blending curve start.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.ApproxBlendLimit">
            <summary>
            블랭딩이 활성화시 모서리와 경로간의 최대 거리값 : r (mm)
            <para>
            maximum  tolerable mathematical distance of the blending curve to the corner point. 
            If the values specified with MaxBlendRadius and/or ApproxBlendLimit cannot be adhered to, 
            then the syncAXIS control instance executes a jump (similar but different as  with RTC-Sky Writing).
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.VectorResolution">
            <summary>
            최소 벡터 거리값 (mm)
            <para>
            If the target points of two consecutive Mark functions (slsc_list_mark_abs, slsc_list_multi_para_mark_abs, slsc_list_para_mark_abs) have a smaller distance than the VectorResolution value, 
            then these target points are regarded by the syncAXIS control instance as identical.
            That is, with Mark vector → Mark vector sequences, target points are dismissed under certain circumstances.
            The intended use of VectorResolution is as  follows: users shall be able to specify target points with a certain input inaccuracy (for example, with floating points or, if data is automatically read-in). 
            Therefore, reasonable values are in the micrometer range, for example 0.02 mm.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.AutoCyclicGeometry">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.SplineConversionLengthLimit">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.GeometryConfig.SplineMode">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.GeometryConfig.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Trajectory">
            <summary>
            경로(Trajectory) 설정 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Trajectory.Mark">
            <summary>
            Mark Configuration 정보
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Trajectory.Geometry">
            <summary>
            Geometry Configuration 정보
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Trajectory.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.CalculationStatus">
            <summary>
            계산 상태 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CalculationStatus.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CalculationStatus.Start">
            <summary>
            시작됨
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CalculationStatus.InProgress">
            <summary>
            진행중
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CalculationStatus.Finished">
            <summary>
            완료
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.CalculationStatus.Failed">
            <summary>
            실패
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.TransferStatus">
            <summary>
            전송 상태 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TransferStatus.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.TransferStatus.LoadedEnough">
            <summary>
            버퍼에 충분히 채워짐
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ExecutionStatus">
            <summary>
            실행 상태 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExecutionStatus.Aborted">
            <summary>
            중지됨
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExecutionStatus.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExecutionStatus.Executing">
            <summary>
            실행중
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExecutionStatus.Finished">
            <summary>
            완료
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.ExecutionStatus.Failed">
            <summary>
            실패
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.ScannerJobCharacteristic">
            <summary>
            스캐너 작업결과 특성 분석용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScanPosMax">
            <summary>
            스캐너 X, Y 최대 구동 거리값 (mm)
            <para>
            Max. distance of the scan head to zero position (without offset)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScanVelMax">
            <summary>
            스캐너 X, Y 최대 절대 속도 (mm/s)
            <para>
            Absolute value of the max. scan head velocity. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScanAccMax">
            <summary>
            스캐너 X, Y 최대 절대 가속도 (mm/s²)
            <para>
            Absolute value of the max. scan head acceleration.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScanPosLaserOnMax">
            <summary>
            스캐너 X, Y 최대 절대 위치 + 레이저 신호 On (laser on/off + mm)
            <para>
            Absolute value of the max. scan head position. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScannerPosXMinMax">
            <summary>
            스캐너 X 최대/최소 위치 (mm)
            <para>
            Min. Max. scan head position. In x direction. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScannerPosYMinMax">
            <summary>
            스캐너 Y 최대/최소 위치 (mm)
            <para>
            Min. Max. scan head position. In y direction.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScannerPosXLaserOnMinMax">
            <summary>
            스캐너 X 최대/최소 위치 + Laser On (laser on/off + mm)
            <para>
            Min. Max. scan head position. In x direction.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.ScannerPosYLaserOnMinMax">
            <summary>
            스캐너 Y 최대/최소 위치 + Laser On (laser on/off + mm)
            <para>
            Min. Max. scan head position. In y direction.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.ScannerJobCharacteristic.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.ScannerJobCharacteristic.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.StageJobCharacteristic">
            <summary>
            스테이지 작업결과 특성 분석용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StagePosMax">
            <summary>
            스테이지 X, Y 최대 구동 거리값 (mm)
            <para>
            Max. distance of the positioning stage to zero position (without offset)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StageVelMax">
            <summary>
            스테이지 X, Y 최대 절대 속도 (mm/s)
            <para>
            Absolute value of the max. positioning stage velocity. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StageAccMax">
            <summary>
            스테이지 X, Y 최대 절대 가속도 (mm/s²)
            <para>
            Absolute value of the max. positioning stage acceleration. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StageJerkMax">
            <summary>
            스테이지 X, Y 최대 절대 가가속도 (mm/s³)
            <para>
            Absolute value of the max. positioning stage jerk. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StagePosLaserOnMax">
            <summary>
            스테이지 X, Y 최대 절대 위치 + 레이저 신호 On (laser on/off + mm)
            <para>
            Absolute value of the max. positioning stage position. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StagePosXMinMax">
            <summary>
            스테이지 X 최대/최소 위치 (mm)
            <para>
            Min. Max. scan head position. In x direction. In mm.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StagePosYMinMax">
            <summary>
            스테이지 Y 최대/최소 위치 (mm)
            <para>
            Min. Max. scan head position. In x direction.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StagePosXLaserOnMinMax">
            <summary>
            스테이지 X 최대/최소 위치 + Laser On (laser on/off + mm)
            <para>
            Min. Max. stage position. In x direction.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.StagePosYLaserOnMinMax">
            <summary>
            스테이지 Y 최대/최소 위치 + Laser On (laser on/off + mm)
            <para>
            Min. Max. stage position. In y direction. 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.StageJobCharacteristic.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.StageJobCharacteristic.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.JobCharacteristic">
            <summary>
            작업결과(스캐너/스테이지) 특성 분석용 객체
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JobCharacteristic.Scanner">
            <summary>
            스캐너 특성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JobCharacteristic.Stage">
            <summary>
            스테이지 특성
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JobCharacteristic.MotionMicroSteps">
            <summary>
            모션 마이크로 스텝 개수 
            <para>마이크로 스텝은 10usec 단위</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JobCharacteristic.MarkSpeedMinMax">
            <summary>
            최소/최대 마크 속도 (mm/s)
            <para>
            The minimum marking speed during the Job. 
            Only those parts are taken into account in which the laser is switched on (laser spot speed). 
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JobCharacteristic.InsertedSkywritings">
            <summary>
            삽입된 스카이 라이팅 모션 개수
            <para>
            Number of successions in which a Sky Writing-like motion has been inserted.
            (because a direct crossing would violate the dynamic limits and also a blending cannot be implemented).
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.JobCharacteristic.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.JobCharacteristic.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.UtilizedScanner">
            <summary>
            스캐너 활용률
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.UtilizedScanner.Position">
            <summary>
            스캐너 X, Y 영역 사용률 (%)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.UtilizedScanner.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.UtilizedStage">
            <summary>
            스테이지 활용률
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.UtilizedStage.Position">
            <summary>
            스테이지 X,Y 영역 사용률 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.UtilizedStage.Acc">
            <summary>
            스테이지 X,Y 가속도 사용률 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.UtilizedStage.Jerk">
            <summary>
            스테이지 X,Y 가가속도 사용률 (%)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.UtilizedStage.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.JobResult">
            <summary>
            작업 결과
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JobResult.Failed">
            <summary>
            실패
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JobResult.Aborted">
            <summary>
            중지
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JobResult.Unknown">
            <summary>
            미설정
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.JobResult.Success">
            <summary>
            성공
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius.Job">
            <summary>
            SyncAxis 작업 상태 
            <para>
            배열 0 = X, Min 의미함
            배열 1 = Y, Max 의미함
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ID">
            <summary>
            작업 식별자
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Name">
            <summary>
            작업 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Description">
            <summary>
            작업 설명
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.BandWidth">
            <summary>
            LPF 주파수 (Hz) 
            <para>스캐너 + 스테이지 모션 타입 사용시 적용됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.MotionType">
            <summary>
            모션 타입
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.XmlConfigFileName">
            <summary>
            XML 설정 파일 이름
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.CalcStatus">
            <summary>
            계산 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.TransStatus">
            <summary>
            전송 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ExecStatus">
            <summary>
            실행 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ResultStatus">
            <summary>
            작업 결과 상태
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ListTotalCounts">
            <summary>
            총 리스트 명령 개수 (Approx)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Characteristic">
            <summary>
            작업 특성 분석치
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.HeadCounts">
            <summary>
            스캔 헤드 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ActiveChannelCount">
            <summary>
            ALC(Automatic Laser Control) 에 사용하는 채널 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ActiveChannels">
            <summary>
            ALC(Automatic Laser Control) 에 사용하는 채널 목록
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Head1Offset">
            <summary>
            헤드1 X,Y 오프셋 및 회전각도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Head2Offset">
            <summary>
            헤드2 X,Y 오프셋 및 회전각도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Head3Offset">
            <summary>
            헤드3 X,Y 오프셋 및 회전각도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Head4Offset">
            <summary>
            헤드4 X,Y 오프셋 및 회전각도
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.UtilizedScanner">
            <summary>
            스캐너 사용률
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.StageCounts">
            <summary>
            스테이지 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.UtilizedStage1">
            <summary>
            스테이지1 사용률 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.UtilizedStage2">
            <summary>
            스테이지2 사용률 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.UtilizedStage3">
            <summary>
            스테이지3 사용률 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.UtilizedStage4">
            <summary>
            스테이지4 사용률 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.UtilizedStages">
            <summary>
            스테이지 사용율 배열
            <para>복수개의 스테이지 사용시</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.StartTime">
            <summary>
            가공 시작 시간
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.EndTime">
            <summary>
            가공 완료 시간
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.ExecutionTime">
            <summary>
            가공 총 소요 시간 (s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.Job.Tag">
            <summary>
            사용자 정의 데이타
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Job.ToString">
            <summary>
            상세 정보 출력
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.Job.#ctor">
            <summary>
            생성자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.Job.#ctor(System.UInt32)">
            <summary>
            생성자
            </summary>
            <param name="id">JOB id</param>
        </member>
        <member name="T:SpiralLab.Sirius.JobEventHandler">
            <summary>
            작업 상태 이벤트 통지용 
            </summary>
            <param name="rtcSyncAxis">IRtcSyncAxis 인터페이스</param>
            <param name="jobCharacteristic">JobStatus 정보 객체</param>
        </member>
        <member name="T:SpiralLab.Sirius.IRtcSyncAxis">
            <summary>
            IRtcSyncAxis 인터페이스
            <para>
            SyncAXIS 최신 버전 v1.6 기반
            RTC6 + ExcelliSCAN + ACS 특화 제품
            RTC6 : SCANahead 옵션 필요 / syncA 옵션 필요 / SyncAxis 동글키 필요
            ACS : SLEC 컨버터 필요 / ServoBoost 옵션 필요 / SyncAXIS 옵션 (모션 업데이트 주기 향상) 필요
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Handle">
            <summary>
            syncAXIS 인스턴스 핸들
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.ConfigXMLFile">
            <summary>
            syncAXIS XML 설정파일
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Job">
            <summary>
            현재 작업(Job) 상태 
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius.IRtcSyncAxis.OnJob">
            <summary>
            현재 작업 상태 업데이트 이벤트 핸들러
            <para>ExecStatus 상태가 ExecutionStatus.Finished 일떄 Characteristic 이 모두 계산되어 저장됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.JobHistory">
            <summary>
            작업 완료 큐
            <para>실행이 성공하여 특성(Characteristic)이 계산된 작업 이력 저장용</para>
            <para>최대 50개 임시 저장됨</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Head1Offset">
            <summary>
            스캔 헤드1 에 설정된 X,Y, Angle(°) 오프셋
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Head2Offset">
            <summary>
            스캔 헤드2 에 설정된 X,Y, Angle(°) 오프셋
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Head3Offset">
            <summary>
            스캔 헤드3 에 설정된 X,Y, Angle(°) 오프셋
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Head4Offset">
            <summary>
            스캔 헤드4 에 설정된 X,Y, Angle(°) 오프셋
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Trajectory">
            <summary>
            Mark/Geometry 정보
            <para>
            get : 복사본 객체가 리턴됨
            set : 객체가 복사되어 설정됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.Dynamics">
            <summary>
            Dynamics 정보
            <para>
            get : 복사본 객체가 리턴됨
            set : 객체가 복사되어 설정됨
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.OpStatus">
            <summary>
            SyncAxis 인스턴스의 내부 Operation Status 상태값
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.MotionMode">
            <summary>
            모션 제어 모드
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.MotionType">
            <summary>
            모션 오퍼레이션 타입
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.TargetStage">
            <summary>
            대상 스테이지
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.StageMoveSpeed">
            <summary>
            Stage 이동시 사용할 속도 (초기값 : 10mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.StageMoveTimeOut">
            <summary>
            Stage 이동시 적용될 시간 제한값 
            <para>초기값: 10sec</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.BandWidth">
            <summary>
            LPF (Low Pass Filter) 주파수 (Hz)
            <para>
            스캐너 + 스테이지 모션 타입 사용시 적용됨
            높은값 : 스테이지쪽에 작업 부하를 상승
            낮은값 : 스캐너 쪽에 작업 부하를 상승
            (초기값 : XML 설정 파일에 있는 값)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.IsSimulationMode">
            <summary>
            시뮬레이션 모드 활성화 여부
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.SimulationFileName">
            <summary>
            시뮬레이션 모드일때 현재 작업(Job Id) 결과가 저장되는 파일 이름
            <para>
            저장 경로는 xml 파일에서 설정
            <c>[BaseDirectoryPath]/Logs/</c>
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.HeuristicIndex">
            <summary>
            XML 설정파일에 설정된 DynamicReductionFunction 항목의 휴리스틱 사용 인덱스 번호
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.StageCounts">
            <summary>
            XML 에 설정되어 있는 스테이지의 개수
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius.IRtcSyncAxis.HeadCounts">
            <summary>
            XML 에 설정되어 있는 스캔 헤드 개수
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.Initialize(System.String)">
            <summary>
            syncAXIS 인스턴스 초기화
            </summary>
            <param name="configXMLFile">syncAxis 설정 XML 파일</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlBandWidth(System.Single)">
            <summary>
            LPF(Low Pass Filter) 주파수를 설정한다 (Hz)
            <para>
            스캐너 + 스테이지 모션 타입 사용시 적용됨
            높은값 : 스테이지쪽에 작업 부하를 상승
            낮은값 : 스캐너 쪽에 작업 부하를 상승
            (xml 설정 파일에 저장 되지 않음)
            </para>
            </summary>
            <param name="filterBandWidth">LPF값 (Hz)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSimulationMode(System.Boolean)">
            <summary>
            시뮬레이션 모드/하드웨어 모드 설정
            </summary>
            <param name="enable">시뮬레이션 모드 온/오프</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSelectHeuristic(System.UInt32)">
            <summary>
            휴리스틱 변경하기
            <para>
            XML 설정파일의 DynamicReductionFunction 항목 사용
            </para>
            </summary>
            <param name="heuristicIndex"> 휴리스틱 사용 인덱스 번호</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlMotionMode(SpiralLab.Sirius.MotionMode)">
            <summary>
            Follow/UnFollow 모드 전환
            </summary>
            <param name="motionMode"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlMotionType(SpiralLab.Sirius.MotionType)">
            <summary>
            모션 타입 (스캐너, 스테이지 혼용 여부)
            </summary>
            <param name="mt"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSelectStage(SpiralLab.Sirius.Stage,SpiralLab.Sirius.CorrectionTableIndex)">
            <summary>
            대상 스테이지 변경및 스캐너 보정 테이블 선택
            </summary>
            <param name="stage">스테이지 번호 (1,2,3,4)</param>
            <param name="tableIndex">보정 테이블 (1,2,3,4) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetScannerPosition(System.Numerics.Vector2)">
            <summary>
            스캐너 혹은 스테이지 이동
            <para>
            (스테이지 이동일 경우 StageMoveSpeed / StageMoveTimeOut 값이 사용됨)
            </para>
            </summary>
            <param name="vPosition">X,Y 위치 (mm)</param>        
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetStagePosition(System.Numerics.Vector2)">
            <summary>
            스캐너 혹은 스테이지 이동
            <para>
            (스테이지 이동일 경우 StageMoveSpeed / StageMoveTimeOut 값이 사용됨)
            </para>
            </summary>
            <param name="vPosition">X,Y 위치 (mm)</param>        
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetScannerPosition(System.Single,System.Single)">
            <summary>
            스캐너 혹은 스테이지 이동
            <para>
            (스테이지 이동일 경우 StageMoveSpeed / StageMoveTimeOut 값이 사용됨)
            </para>
            </summary>
            <param name="x">X 위치 (mm)</param>
            <param name="y">Y 위치 (mm) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetStagePosition(System.Single,System.Single)">
            <summary>
            스테이지 이동
            <para>
            멀티 스테이지 사용시 CtlSelectStage 를 사전에 호출할 것
            StageMoveSpeed / StageMoveTimeOut 값이 사용됨
            </para>
            </summary>
            <param name="x">X 위치 (mm)</param>   
            <param name="y">X 위치 (mm)</param>      
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlGetScannerPosition(SpiralLab.Sirius.ScanDevice,System.Single@,System.Single@)">
            <summary>
            스캐너의 실제 위치
            </summary>
            <param name="scanDevice">스캔헤드</param>
            <param name="x">mm</param>
            <param name="y">mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlGetStagePosition(System.Single@,System.Single@)">
            <summary>
            스테이지의 실제 위치
            </summary>
            <param name="x">mm</param>
            <param name="y">mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlGetStagePosition(System.Numerics.Vector2@)">
            <summary>
            스테이지의 실제 위치
            </summary>
            <param name="position">mm, mm</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Numerics.Vector2,System.Single)">
            <summary>
            멀티 헤드 사용시 개별 헤드에 대한 오프셋, 회전 처리
            </summary>
            <param name="scanDevice">ScanDevice 열거형</param>
            <param name="offset">dx, dy 이동량 (mm)</param>
            <param name="angle">회전량 각도 (°) (+: CCW, -: CW) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlHeadOffset(SpiralLab.Sirius.ScanDevice,System.Single,System.Single,System.Single)">
            <summary>
            멀티 헤드 오프셋 적용
            </summary>
            <param name="scanDevice">멀티헤드번호</param>
            <param name="dx">오프셋 X (mm)</param>
            <param name="dy">오프셋 Y (mm)</param>
            <param name="angle">회전량 각도 (°) (+: CCW, -: CW) </param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlContourDependentSpeed(SpiralLab.Sirius.ContourDependentSpeedDirection,System.Double)">
            <summary>
            Contour Dependent Speed Direction Control 사용 유무
            </summary>
            <param name="direction">방향</param>
            <param name="spotRadius">반지름 크기 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetDynamicsConfig(SpiralLab.Sirius.Dynamics)">
            <summary>
            Calculation Dynamics 정보 설정 하기
            </summary>
            <param name="dynamics"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetTrajectory(SpiralLab.Sirius.Trajectory)">
            <summary>
            Trajectory 설정 하기
            </summary>
            <param name="trajectory"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlGetJumpCalculationDynamics(System.Single@,System.Single@)">
            <summary>
            스캔 장치 점프시 각가속도, 각가가속도 계산 역학값 
            </summary>
            <param name="angularAcc">excelliSCAN14: 1.1314e5, excelliSCAN20: 5.6e4</param>
            <param name="angularJerk">excelliSCAN14: 4e9, excelliSCAN20: 1e9</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetJumpCalculationDynamics(System.Single,System.Single)">
            <summary>
            스캔 장치 점프시 각가속도, 각가가속도 계산 역학값 변경
            </summary>
            <param name="angularAcc">excelliSCAN14: 1.1314e5, excelliSCAN20: 5.6e4</param>
            <param name="angularJerk">excelliSCAN14: 4e9, excelliSCAN20: 1e9</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlGetMarkCalculationDynamics(System.Single@,System.Single@)">
            <summary>
            스캔 장치 마크시 각가속도, 각가가속도 계산 역학값
            </summary>
            <param name="angularAcc">excelliSCAN14: 1.1314e5, excelliSCAN20: 5.6e4</param>
            <param name="angularJerk">excelliSCAN14: 4e9, excelliSCAN20: 1e9</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlSetMarkCalculationDynamics(System.Single,System.Single)">
            <summary>
            스캔 장치 마크시 각가속도, 각가가속도 계산 역학값 변경
            </summary>
            <param name="angularAcc">excelliSCAN14: 1.1314e5, excelliSCAN20: 5.6e4</param>
            <param name="angularJerk">excelliSCAN14: 4e9, excelliSCAN20: 1e9</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.CtlGetInternalErrMsg(System.Collections.Generic.List{System.ValueTuple{System.UInt64,System.String}}@)">
            <summary>
            syncAXIS 인스턴스에서 제공하는 에러 개수및 목록
            </summary>
            <param name="errors">(에러코드, 에러메시지) 튜플 리스트</param>
            <returns>에러 메시지를 모두 합쳐 제공</returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListBegin(SpiralLab.Sirius.ILaser,SpiralLab.Sirius.MotionType)">
            <summary>
            리스트 명령 시작 - 버퍼 준비
            <para>
            syncAxis 는 버퍼 처리 방식이 다르므로 IRtc 인터페이스의 ListBegin 를 사용하지 않고, 전용의 ListBegin 을 지원한다
            <para>
            내부적으로는 slsc_ListHandlingMode_RepeatWhileBufferFull 방식으로 고정된다.
            주의사항 : 버퍼가 고갈되지 않도록 지속적으로 리스트 명령을 삽입해야 주어야 한다. 그렇지 않으면 버퍼 고갈(buffer underrun) 이 발생된다.
            때문에 리스트 데이타를 넣는 동안 디버깅(디버깅 중지로 인한 가공 공급 중단과 같이) 을 병행 할때는 매우 주의해야 한다
            </para>
            </para>
            </summary>
            <param name="laser">ILaser 인터페이스</param>
            <param name="motionType">MotionType 열거형</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListSpeedMinMark(System.Single)">
            <summary>
            리스트 명령 - 최소 마크 속도
            </summary>
            <param name="mark">최소 마크 속도 (mm/s)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListApproxBlendLimit(System.Single)">
            <summary>
            모션 블랜딩 반지름 근사값
            <para>
            Maximum tolerable mathematical distance of the blending curve to the corner point. 
            </para>
            </summary>
            <param name="approxBlendLimit">반지름 거리값 (mm)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListContourDependentSpeed(SpiralLab.Sirius.ContourDependentSpeedDirection,System.Single)">
            <summary>
            윤곽 의존 속도 계산 사용 
            <para>
            Contour-dependent speed calculation 사용유무
            </para>
            </summary>
            <param name="direction">방향</param>
            <param name="spotRadius">Radius of the laser spot in the working plane. (mm) specifies how far to the right or left of the curve mid-line the speeds are determined.</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListSpotDistanceControl(System.Boolean,System.Single)">
            <summary>
            Spot Distance Control 비활성화 유무
            </summary>
            <param name="supress">활성화 경우 (“Automatic Laser Control“ is active with SpotDistance as an “ActiveChannel”) </param>
            <param name="timeDelay"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListAlcBegin(System.Single)">
            <summary>
            리스트 명령 - ALC(Automatic Laser Control) Linear Ramp 활성화 
            </summary>
            <param name="startingRamp">Ramp 비율값</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListAlcEnd">
            <summary>
            리스트 명령 - ALC(Automatic Laser Control) Linear Ramp 비활성화
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListJumpCalculationDynamics(System.Single,System.Single)">
            <summary>
            현재 대상 작업(JOB)에 스캔 장치 점프시 각가속도, 각가가속도 역학 제한값 변경
            </summary>
            <param name="angularAcc">excelliSCAN14: 1.1314e5, excelliSCAN20: 5.6e4</param>
            <param name="angularJerk">excelliSCAN14: 4e9, excelliSCAN20: 1e9</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius.IRtcSyncAxis.ListMarkCalculationDynamics(System.Single,System.Single)">
            <summary>
            현재 대상 작업(JOB)에 스캔 장치 마크시 각가속도, 각가가속도 역학 제한값
            </summary>
            <param name="angularAcc">excelliSCAN14: 1.1314e5, excelliSCAN20: 5.6e4</param>
            <param name="angularJerk">excelliSCAN14: 4e9, excelliSCAN20: 1e9</param>
            <returns></returns>
        </member>
        <member name="F:SpiralLab.Sirius.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius.MeasurementForm.components">
            <summary>
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius.MeasurementForm.Dispose(System.Boolean)">
            <summary>
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:SpiralLab.Sirius.MeasurementForm.InitializeComponent">
            <summary>
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="M:CTIXmlHelper.EC_SetLaserTimingResolution(System.Double,System.Single)">
            <summary>
            For Polygon only, Polygon will run with 10ns clk tick.
            Notes: The SMC supports raster imaging pixel rates with a 20ns laser tick resolution for the version v3.1.22.
            </summary>
            <param name="resolutionInUsec"></param> resolution in us
            <param name="laserTimingResolutionInUsecPerTick"></param>  laser timing resolution in clk tick
        </member>
        <member name="T:RTC4Import.RTC4Wrap">
            <summary>
            Static RTC4 Wrapper class.
            Notice that the construction of the RTC4Wrap object or an initial
            call of any RTC4Wrap method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.getmemory">
            <summary>
             short getmemory(ushort adr);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_waveform">
            <summary>
             n_get_waveform(ushort n, ushort channel, ushort istop, short[] memptr);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_waveform">
            <summary>
             get_waveform(ushort channel, ushort istop, short[] memptr);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_measurement_status">
            <summary>
             n_measurement_status(ushort n, out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.measurement_status">
            <summary>
             measurement_status(out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_varpolydelay">
            <summary>
             short n_load_varpolydelay(ushort n, string stbfilename, ushort tableno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_varpolydelay">
            <summary>
             short load_varpolydelay(string stbfilename, ushort tableno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_program_file">
            <summary>
             short n_load_program_file(ushort n, string name);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_program_file">
            <summary>
             short load_program_file(string name);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_correction_file">
            <summary>
             short n_load_correction_file(ushort n, string filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_correction_file">
            <summary>
             short load_correction_file(string filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_load_z_table">
            <summary>
             short n_load_z_table(ushort n, double a, double b, double c);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_z_table">
            <summary>
             short load_z_table(double a, double b, double c);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_nop">
            <summary>
             n_list_nop(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_nop">
            <summary>
             list_nop();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_end_of_list">
            <summary>
             n_set_end_of_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_end_of_list">
            <summary>
             set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_abs_3d">
            <summary>
             n_jump_abs_3d(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_abs_3d">
            <summary>
             jump_abs_3d(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_abs">
            <summary>
             n_jump_abs(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_abs">
            <summary>
             jump_abs(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_abs_3d">
            <summary>
             n_mark_abs_3d(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_abs_3d">
            <summary>
             mark_abs_3d(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_abs">
            <summary>
             n_mark_abs(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_abs">
            <summary>
             mark_abs(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_rel_3d">
            <summary>
             n_jump_rel_3d(ushort n, short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_rel_3d">
            <summary>
             jump_rel_3d(short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_jump_rel">
            <summary>
             n_jump_rel(ushort n, short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.jump_rel">
            <summary>
             jump_rel(short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_rel_3d">
            <summary>
             n_mark_rel_3d(ushort n, short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_rel_3d">
            <summary>
             mark_rel_3d(short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_mark_rel">
            <summary>
             n_mark_rel(ushort n, short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.mark_rel">
            <summary>
             mark_rel(short dx, short dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_8bit_port_list">
            <summary>
             n_write_8bit_port_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_8bit_port_list">
            <summary>
             write_8bit_port_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_1_list">
            <summary>
             n_write_da_1_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_1_list">
            <summary>
             write_da_1_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_2_list">
            <summary>
             n_write_da_2_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_2_list">
            <summary>
             write_da_2_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_matrix_list">
            <summary>
             n_set_matrix_list(ushort n, ushort i, ushort j, double mij);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_matrix_list">
            <summary>
             set_matrix_list(ushort i, ushort j, double mij);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_defocus_list">
            <summary>
             n_set_defocus_list(ushort n, short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_defocus_list">
            <summary>
             set_defocus_list(short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_control_mode_list">
            <summary>
             n_set_control_mode_list(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_control_mode_list">
            <summary>
             set_control_mode_list(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_offset_list">
            <summary>
             n_set_offset_list(ushort n, short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_offset_list">
            <summary>
             set_offset_list(short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_long_delay">
            <summary>
             n_long_delay(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.long_delay">
            <summary>
             long_delay(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_on_list">
            <summary>
             n_laser_on_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_on_list">
            <summary>
             laser_on_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_jump_speed">
            <summary>
             n_set_jump_speed(ushort n, double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_jump_speed">
            <summary>
             set_jump_speed(double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_mark_speed">
            <summary>
             n_set_mark_speed(ushort n, double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_mark_speed">
            <summary>
             set_mark_speed(double speed);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_laser_delays">
            <summary>
             n_set_laser_delays(ushort n, short ondelay, short offdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_laser_delays">
            <summary>
             set_laser_delays(short ondelay, short offdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_scanner_delays">
            <summary>
             n_set_scanner_delays(ushort n, ushort jumpdelay, ushort markdelay, ushort polydelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_scanner_delays">
            <summary>
             set_scanner_delays(ushort jumpdelay, ushort markdelay, ushort polydelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_list_jump">
            <summary>
             n_set_list_jump(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_list_jump">
            <summary>
             set_list_jump(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_input_pointer">
            <summary>
             n_set_input_pointer(ushort n, ushort pointer);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_input_pointer">
            <summary>
             set_input_pointer(ushort pointer);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_call">
            <summary>
             n_list_call(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_call">
            <summary>
             list_call(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_return">
            <summary>
             n_list_return(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_return">
            <summary>
             list_return();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_z_out_list">
            <summary>
             n_z_out_list(ushort n, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.z_out_list">
            <summary>
             z_out_list(short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_standby_list">
            <summary>
             n_set_standby_list(ushort n, ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_standby_list">
            <summary>
             set_standby_list(ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_jump_abs">
            <summary>
             n_timed_jump_abs(ushort n, short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_jump_abs">
            <summary>
             timed_jump_abs(short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_mark_abs">
            <summary>
             n_timed_mark_abs(ushort n, short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_mark_abs">
            <summary>
             timed_mark_abs(short x, short y, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_jump_rel">
            <summary>
             n_timed_jump_rel(ushort n, short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_jump_rel">
            <summary>
             timed_jump_rel(short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_timed_mark_rel">
            <summary>
             n_timed_mark_rel(ushort n, short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.timed_mark_rel">
            <summary>
             timed_mark_rel(short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_laser_timing">
            <summary>
             n_set_laser_timing(ushort n, ushort halfperiod, ushort pulse1, ushort pulse2, ushort timebase);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_laser_timing">
            <summary>
             set_laser_timing(ushort halfperiod, ushort pulse1, ushort pulse2, ushort timebase);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_wobbel_xy">
            <summary>
             n_set_wobbel_xy(ushort n, ushort long_wob, ushort trans_wob, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_wobbel_xy">
            <summary>
             set_wobbel_xy(ushort long_wob, ushort trans_wob, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_wobbel">
            <summary>
             n_set_wobbel(ushort n, ushort amplitude, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_wobbel">
            <summary>
             set_wobbel(ushort amplitude, double frequency);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_fly_x">
            <summary>
             n_set_fly_x(ushort n, double kx);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_fly_x">
            <summary>
             set_fly_x(double kx);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_fly_y">
            <summary>
             n_set_fly_y(ushort n, double ky);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_fly_y">
            <summary>
             set_fly_y(double ky);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_fly_rot">
            <summary>
             n_set_fly_rot(ushort n, double resolution);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_fly_rot">
            <summary>
             set_fly_rot(double resolution);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_fly_return">
            <summary>
             n_fly_return(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.fly_return">
            <summary>
             fly_return(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_calculate_fly">
            <summary>
             n_calculate_fly(ushort n, ushort direction, double distance);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.calculate_fly">
            <summary>
             calculate_fly(ushort direction, double distance);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_io_port_list">
            <summary>
             n_write_io_port_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_io_port_list">
            <summary>
             write_io_port_list(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_cor_table_list">
            <summary>
             n_select_cor_table_list(ushort n, ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_cor_table_list">
            <summary>
             select_cor_table_list(ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_wait">
            <summary>
             n_set_wait(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_wait">
            <summary>
             set_wait(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_simulate_ext_start">
            <summary>
             n_simulate_ext_start(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.simulate_ext_start">
            <summary>
             simulate_ext_start(short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_x_list">
            <summary>
             n_write_da_x_list(ushort n, ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_x_list">
            <summary>
             write_da_x_list(ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_pixel_line">
            <summary>
             n_set_pixel_line(ushort n, ushort pixelmode, ushort pixelperiod, double dx, double dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_pixel_line">
            <summary>
             set_pixel_line(ushort pixelmode, ushort pixelperiod, double dx, double dy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_pixel">
            <summary>
             n_set_pixel(ushort n, ushort pulswidth, ushort davalue, ushort adchannel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_pixel">
            <summary>
             set_pixel(ushort pulswidth, ushort davalue, ushort adchannel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_extstartpos_list">
            <summary>
             n_set_extstartpos_list(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_extstartpos_list">
            <summary>
             set_extstartpos_list(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_on_list">
            <summary>
             n_laser_signal_on_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_on_list">
            <summary>
             laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_off_list">
            <summary>
             n_laser_signal_off_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_off_list">
            <summary>
             laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_firstpulse_killer_list">
            <summary>
             n_set_firstpulse_killer_list(ushort n, ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_firstpulse_killer_list">
            <summary>
             set_firstpulse_killer_list(ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_io_cond_list">
            <summary>
             n_set_io_cond_list(ushort n, ushort mask_1, ushort mask_0, ushort mask_set);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_io_cond_list">
            <summary>
             set_io_cond_list(ushort mask_1, ushort mask_0, ushort mask_set);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_clear_io_cond_list">
            <summary>
             n_clear_io_cond_list(ushort n, ushort mask_1, ushort mask_0, ushort mask_clear);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.clear_io_cond_list">
            <summary>
             clear_io_cond_list(ushort mask_1, ushort mask_0, ushort mask_clear);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_jump_cond">
            <summary>
             n_list_jump_cond(ushort n, ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_jump_cond">
            <summary>
             list_jump_cond(ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_list_call_cond">
            <summary>
             n_list_call_cond(ushort n, ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.list_call_cond">
            <summary>
             list_call_cond(ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_save_and_restart_timer">
            <summary>
             n_save_and_restart_timer(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.save_and_restart_timer">
            <summary>
             save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_ext_start_delay_list">
            <summary>
             n_set_ext_start_delay_list(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_ext_start_delay_list">
            <summary>
             set_ext_start_delay_list(short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_trigger">
            <summary>
             n_set_trigger(ushort n, ushort sampleperiod, ushort channel1, ushort channel2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_trigger">
            <summary>
             set_trigger(ushort sampleperiod, ushort signal1, ushort signal2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_arc_rel">
            <summary>
             n_arc_rel(ushort n, short dx, short dy, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.arc_rel">
            <summary>
             arc_rel(short dx, short dy, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_arc_abs">
            <summary>
             n_arc_abs(ushort n, short x, short y, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.arc_abs">
            <summary>
             arc_abs(short x, short y, double angle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.drilling">
            <summary>
             drilling(short pulsewidth, short relencoderdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.regulation">
            <summary>
             regulation();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.flyline">
            <summary>
             flyline(short encoderdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_input_pointer">
            <summary>
             ushort n_get_input_pointer(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_input_pointer">
            <summary>
             ushort get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_rtc">
            <summary>
             select_rtc(ushort cardno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.rtc4_count_cards">
            <summary>
             ushort rtc4_count_cards();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_status">
            <summary>
             n_get_status(ushort n, out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_status">
            <summary>
             get_status(out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_status">
            <summary>
             ushort n_read_status(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_status">
            <summary>
             ushort read_status();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_startstop_info">
            <summary>
             ushort n_get_startstop_info(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_startstop_info">
            <summary>
             ushort get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_marking_info">
            <summary>
             ushort n_get_marking_info(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_marking_info">
            <summary>
             ushort get_marking_info();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_dll_version">
            <summary>
             ushort get_dll_version();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_start_list_1">
            <summary>
             n_set_start_list_1(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_start_list_1">
            <summary>
             set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_start_list_2">
            <summary>
             n_set_start_list_2(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_start_list_2">
            <summary>
             set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_start_list">
            <summary>
             n_set_start_list(ushort n, ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_start_list">
            <summary>
             set_start_list(ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_list_1">
            <summary>
             n_execute_list_1(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_list_1">
            <summary>
             execute_list_1();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_list_2">
            <summary>
             n_execute_list_2(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_list_2">
            <summary>
             execute_list_2();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_list">
            <summary>
             n_execute_list(ushort n, ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_list">
            <summary>
             execute_list(ushort listno);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_8bit_port">
            <summary>
             n_write_8bit_port(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_8bit_port">
            <summary>
             write_8bit_port(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_io_port">
            <summary>
             n_write_io_port(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_io_port">
            <summary>
             write_io_port(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_auto_change">
            <summary>
             n_auto_change(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.auto_change">
            <summary>
             auto_change();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_auto_change_pos">
            <summary>
             n_auto_change_pos(ushort n, ushort start);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.auto_change_pos">
            <summary>
             auto_change_pos(ushort start);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.aut_change">
            <summary>
             aut_change();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_start_loop">
            <summary>
             n_start_loop(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.start_loop">
            <summary>
             start_loop();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_quit_loop">
            <summary>
             n_quit_loop(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.quit_loop">
            <summary>
             quit_loop();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_list_mode">
            <summary>
             n_set_list_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_list_mode">
            <summary>
             set_list_mode(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_stop_execution">
            <summary>
             n_stop_execution(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.stop_execution">
            <summary>
             stop_execution();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_io_port">
            <summary>
             ushort n_read_io_port(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_io_port">
            <summary>
             ushort read_io_port();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_1">
            <summary>
             n_write_da_1(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_1">
            <summary>
             write_da_1(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_2">
            <summary>
             n_write_da_2(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_2">
            <summary>
             write_da_2(ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_max_counts">
            <summary>
             n_set_max_counts(ushort n, int counts);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_max_counts">
            <summary>
             set_max_counts(int counts);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_counts">
            <summary>
             int n_get_counts(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_counts">
            <summary>
             int get_counts();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_matrix">
            <summary>
             n_set_matrix(ushort n, double m11, double m12, double m21, double m22);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_matrix">
            <summary>
             set_matrix(double m11, double m12, double m21, double m22);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_offset">
            <summary>
             n_set_offset(ushort n, short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_offset">
            <summary>
             set_offset(short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_goto_xyz">
            <summary>
             n_goto_xyz(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.goto_xyz">
            <summary>
             goto_xyz(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_goto_xy">
            <summary>
             n_goto_xy(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.goto_xy">
            <summary>
             goto_xy(short x, short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_hex_version">
            <summary>
             ushort n_get_hex_version(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_hex_version">
            <summary>
             ushort get_hex_version();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_disable_laser">
            <summary>
             n_disable_laser(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.disable_laser">
            <summary>
             disable_laser();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_enable_laser">
            <summary>
             n_enable_laser(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.enable_laser">
            <summary>
             enable_laser();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_stop_list">
            <summary>
             n_stop_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.stop_list">
            <summary>
             stop_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_restart_list">
            <summary>
             n_restart_list(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.restart_list">
            <summary>
             restart_list();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_xyz_pos">
            <summary>
             n_get_xyz_pos(ushort n, out short x, out short y, out short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_xyz_pos">
            <summary>
             get_xyz_pos(out short x, out short y, out short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_xy_pos">
            <summary>
             n_get_xy_pos(ushort n, out short x, out short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_xy_pos">
            <summary>
             get_xy_pos(out short x, out short y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_list">
            <summary>
             n_select_list(ushort n, ushort list_2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_list">
            <summary>
             select_list(ushort list_2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_z_out">
            <summary>
             n_z_out(ushort n, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.z_out">
            <summary>
             z_out(short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_firstpulse_killer">
            <summary>
             n_set_firstpulse_killer(ushort n, ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_firstpulse_killer">
            <summary>
             set_firstpulse_killer(ushort fpk);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_standby">
            <summary>
             n_set_standby(ushort n, ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_standby">
            <summary>
             set_standby(ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_on">
            <summary>
             n_laser_signal_on(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_on">
            <summary>
             laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_laser_signal_off">
            <summary>
             n_laser_signal_off(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.laser_signal_off">
            <summary>
             laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_delay_mode">
            <summary>
             n_set_delay_mode(ushort n, ushort varpoly, ushort directmove3d, ushort edgelevel, ushort minjumpdelay, ushort jumplengthlimit);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_delay_mode">
            <summary>
             set_delay_mode(ushort varpoly, ushort directmove3d, ushort edgelevel, ushort minjumpdelay, ushort jumplengthlimit);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_piso_control">
            <summary>
             n_set_piso_control(ushort n, ushort l1, ushort l2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_piso_control">
            <summary>
             set_piso_control(ushort l1, ushort l2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_status">
            <summary>
             n_select_status(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_status">
            <summary>
             select_status(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_encoder">
            <summary>
             n_get_encoder(ushort n, out short zx, out short zy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_encoder">
            <summary>
             get_encoder(out short zx, out short zy);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_select_cor_table">
            <summary>
             n_select_cor_table(ushort n, ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.select_cor_table">
            <summary>
             select_cor_table(ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_execute_at_pointer">
            <summary>
             n_execute_at_pointer(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.execute_at_pointer">
            <summary>
             execute_at_pointer(ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_head_status">
            <summary>
             ushort n_get_head_status(ushort n, ushort head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_head_status">
            <summary>
             ushort get_head_status(ushort head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_simulate_encoder">
            <summary>
             n_simulate_encoder(ushort n, ushort channel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.simulate_encoder">
            <summary>
             simulate_encoder(ushort channel);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_hi">
            <summary>
             n_set_hi(ushort n, double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_hi">
            <summary>
             set_hi(double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_release_wait">
            <summary>
             n_release_wait(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.release_wait">
            <summary>
             release_wait();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_wait_status">
            <summary>
             ushort n_get_wait_status(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_wait_status">
            <summary>
             ushort get_wait_status();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_control_mode">
            <summary>
             n_set_control_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_control_mode">
            <summary>
             set_control_mode(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_laser_mode">
            <summary>
             n_set_laser_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_laser_mode">
            <summary>
             set_laser_mode(ushort mode);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_ext_start_delay">
            <summary>
             n_set_ext_start_delay(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_ext_start_delay">
            <summary>
             set_ext_start_delay(short delay, short encoder);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_home_position">
            <summary>
             n_home_position(ushort n, short xhome, short yhome);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.home_position">
            <summary>
             home_position(short xhome, short yhome);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_rot_center">
            <summary>
             n_set_rot_center(ushort n, int center_x, int center_y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_rot_center">
            <summary>
             set_rot_center(int center_x, int center_y);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_dsp_start">
            <summary>
             n_dsp_start(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.dsp_start">
            <summary>
             dsp_start();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_write_da_x">
            <summary>
             n_write_da_x(ushort n, ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.write_da_x">
            <summary>
             write_da_x(ushort x, ushort value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_ad_x">
            <summary>
             ushort n_read_ad_x(ushort n, ushort x);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_ad_x">
            <summary>
             ushort read_ad_x(ushort x);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_read_pixel_ad">
            <summary>
             ushort n_read_pixel_ad(ushort n, ushort pos);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.read_pixel_ad">
            <summary>
             ushort read_pixel_ad(ushort pos);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_z_distance">
            <summary>
             short n_get_z_distance(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_z_distance">
            <summary>
             short get_z_distance(short x, short y, short z);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_io_status">
            <summary>
             ushort n_get_io_status(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_io_status">
            <summary>
             ushort get_io_status();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_time">
            <summary>
             double n_get_time(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_defocus">
            <summary>
             n_set_defocus(ushort n, short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_defocus">
            <summary>
             set_defocus(short value);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_softstart_mode">
            <summary>
             n_set_softstart_mode(ushort n, ushort mode, ushort number, ushort restartdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_softstart_mode">
            <summary>
             set_softstart_mode(ushort mode, ushort number, ushort resetdelay);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_softstart_level">
            <summary>
             n_set_softstart_level(ushort n, ushort index, ushort level);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_softstart_level">
            <summary>
             set_softstart_level(ushort index, ushort level);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_control_command">
            <summary>
             n_control_command(ushort n, ushort head, ushort axis, ushort data);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.control_command">
            <summary>
             control_command(ushort head, ushort axis, ushort data);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_cor">
            <summary>
             short load_cor(string filename);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.load_pro">
            <summary>
             short load_pro(string filename);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_serial_number">
            <summary>
             ushort n_get_serial_number(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_serial_number">
            <summary>
             ushort get_serial_number();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_serial_number_32">
            <summary>
             int n_get_serial_number_32(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_serial_number_32">
            <summary>
             int get_serial_number_32();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_rtc_version">
            <summary>
             ushort n_get_rtc_version(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_rtc_version">
            <summary>
             ushort get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_hi_data">
            <summary>
             get_hi_data(out ushort x1, out ushort x2, out ushort y1, out ushort y2);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_auto_cal">
            <summary>
             short n_auto_cal(ushort n, ushort head, ushort command);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.auto_cal">
            <summary>
             short auto_cal(ushort head, ushort command);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_list_space">
            <summary>
             ushort n_get_list_space(ushort n);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_list_space">
            <summary>
             ushort get_list_space();
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.teachin">
            <summary>
             short teachin(string filename, short xin, short yin, short zin, double ll0, out short xout, out short yout, out short zout);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_get_value">
            <summary>
             short n_get_value(ushort n, ushort signal);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.get_value">
            <summary>
             short get_value(ushort signal);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_set_io_bit">
            <summary>
             n_set_io_bit(ushort n, ushort mask1);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_io_bit">
            <summary>
             set_io_bit(ushort mask1);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_clear_io_bit">
            <summary>
             n_clear_io_bit(ushort n, ushort mask0);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.clear_io_bit">
            <summary>
             clear_io_bit(ushort mask0);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.set_duty_cycle_table">
            <summary>
             set_duty_cycle_table(ushort index, ushort dutycycle);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.n_move_to">
            <summary>
             n_move_to(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:RTC4Import.RTC4Wrap.move_to">
            <summary>
             move_to(ushort position);
            </summary>
        </member>
        <member name="T:RTC5Import.RTC5Wrap">
            <summary>
            Notice that the construction of the RTC5Import object or an initial
            call of any RTC5Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.init_rtc5_dll">
            <summary>
             uint init_rtc5_dll();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.free_rtc5_dll">
            <summary>
             void free_rtc5_dll();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rtc5_count_cards">
            <summary>
             uint rtc5_count_cards();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_x">
            <summary>
             void n_set_mcbsp_global_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_y">
            <summary>
             void n_set_mcbsp_global_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_rot">
            <summary>
             void n_set_mcbsp_global_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_matrix">
            <summary>
             void n_set_mcbsp_global_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_fly_overflow_ctrl">
            <summary>
             void n_clear_fly_overflow_ctrl(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_x">
            <summary>
             void set_mcbsp_global_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_y">
            <summary>
             void set_mcbsp_global_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_rot">
            <summary>
             void set_mcbsp_global_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_matrix">
            <summary>
             void set_mcbsp_global_matrix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_fly_overflow_ctrl">
            <summary>
             void clear_fly_overflow_ctrl(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_wobbel_power">
            <summary>
             uint n_load_wobbel_power(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_wobbel_power">
            <summary>
             uint load_wobbel_power(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_x_list">
            <summary>
             void n_set_mcbsp_global_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_y_list">
            <summary>
             void n_set_mcbsp_global_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_rot_list">
            <summary>
             void n_set_mcbsp_global_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_global_matrix_list">
            <summary>
             void n_set_mcbsp_global_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_x_list">
            <summary>
             void set_mcbsp_global_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_y_list">
            <summary>
             void set_mcbsp_global_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_rot_list">
            <summary>
             void set_mcbsp_global_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_global_matrix_list">
            <summary>
             void set_mcbsp_global_matrix_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_load_wobbel_power_list">
            <summary>
             void n_load_wobbel_power_list(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_wobbel_power_angle">
            <summary>
             void n_set_wobbel_power_angle(uint CardNo, uint Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stretch_pixel_line">
            <summary>
             void n_stretch_pixel_line(uint CardNo, uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mcbsp_out_ptr_list">
            <summary>
             void n_set_mcbsp_out_ptr_list(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.load_wobbel_power_list">
            <summary>
             void load_wobbel_power_list(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_wobbel_power_angle">
            <summary>
             void set_wobbel_power_angle(uint Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stretch_pixel_line">
            <summary>
             void stretch_pixel_line(uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_pixel">
            <summary>
             void set_pixel(uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mcbsp_out_ptr_list">
            <summary>
             void set_mcbsp_out_ptr_list(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC5Import.RTC5Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
        <member name="T:RTC6Import.RTC6Wrap">
            <summary>
            Notice that the construction of the RTC6Import object or an initial
            call of any RTC6Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.init_rtc6_dll">
            <summary>
             uint init_rtc6_dll();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.free_rtc6_dll">
            <summary>
             void free_rtc6_dll();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rtc6_mode">
            <summary>
             void set_rtc6_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_count_cards">
            <summary>
             uint eth_count_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_found_cards">
            <summary>
             uint eth_found_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_max_card">
            <summary>
             uint eth_max_card();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_remove_card">
            <summary>
             int eth_remove_card(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_card_info">
            <summary>
             void eth_get_card_info(uint CardNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_card_info_search">
            <summary>
             void eth_get_card_info_search(uint SearchNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_search_cards_timeout">
            <summary>
             void eth_set_search_cards_timeout(uint TimeOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_search_cards">
            <summary>
             uint eth_search_cards(uint Ip, uint NetMask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_search_cards_range">
            <summary>
             uint eth_search_cards_range(uint StartIp, uint EndIp);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_assign_card_ip">
            <summary>
             int eth_assign_card_ip(uint Ip, uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_assign_card">
            <summary>
             int eth_assign_card(uint SearchNo, uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_convert_string_to_ip">
            <summary>
             uint eth_convert_string_to_ip(string IpString);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_convert_ip_to_string">
            <summary>
             void eth_convert_ip_to_string(uint Ip, uint[] IpString);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_ip">
            <summary>
             uint eth_get_ip(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_ip_search">
            <summary>
             uint eth_get_ip_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_serial_search">
            <summary>
             uint eth_get_serial_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_last_error">
            <summary>
             uint n_eth_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_error">
            <summary>
             uint n_eth_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_error_dump">
            <summary>
             uint n_eth_error_dump(uint CardNo, uint[] Dump);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_static_ip">
            <summary>
             uint n_eth_set_static_ip(uint CardNo, uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_static_ip">
            <summary>
             uint n_eth_get_static_ip(uint CardNo, out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_port_numbers">
            <summary>
             uint n_eth_set_port_numbers(uint CardNo, uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_port_numbers">
            <summary>
             uint n_eth_get_port_numbers(uint CardNo, out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_com_timeouts">
            <summary>
             void n_eth_set_com_timeouts(uint CardNo, uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_com_timeouts">
            <summary>
             void n_eth_get_com_timeouts(uint CardNo, out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_com_timeouts_auto">
            <summary>
             void n_eth_set_com_timeouts_auto(uint CardNo, double InitialTimeout, double MaxTimeout, double Multiplier, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_com_timeouts_auto">
            <summary>
             void n_eth_get_com_timeouts_auto(uint CardNo, out double InitialTimeout, out double MaxTimeout, out double Multiplier, out uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_set_high_performance_mode">
            <summary>
             uint n_eth_set_high_performance_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_check_connection">
            <summary>
             uint n_eth_check_connection(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_eth_boot_control">
            <summary>
             void n_set_eth_boot_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_boot_timeout">
            <summary>
             void n_eth_boot_timeout(uint CardNo, uint Timeout);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_boot_dcmd">
            <summary>
             void n_eth_boot_dcmd(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_program">
            <summary>
             uint n_store_program(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_image_eth">
            <summary>
             uint n_read_image_eth(uint CardNo, string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_image_eth">
            <summary>
             uint n_write_image_eth(uint CardNo, string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_configure_link_loss">
            <summary>
             void n_eth_configure_link_loss(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_get_standalone_status">
            <summary>
             void n_eth_get_standalone_status(uint CardNo, out uint Status, out uint Error, out uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_eth_config_waveform_streaming_ctrl">
            <summary>
             void n_eth_config_waveform_streaming_ctrl(uint CardNo, uint Size, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_last_error">
            <summary>
             uint eth_get_last_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_error">
            <summary>
             uint eth_get_error();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_error_dump">
            <summary>
             uint eth_error_dump(uint[] Dump);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_static_ip">
            <summary>
             uint eth_set_static_ip(uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_static_ip">
            <summary>
             uint eth_get_static_ip(out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_port_numbers">
            <summary>
             uint eth_set_port_numbers(uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_port_numbers">
            <summary>
             uint eth_get_port_numbers(out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_com_timeouts">
            <summary>
             void eth_set_com_timeouts(uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_com_timeouts">
            <summary>
             void eth_get_com_timeouts(out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_com_timeouts_auto">
            <summary>
             void eth_set_com_timeouts_auto(double InitialTimeout, double MaxTimeout, double Multiplier, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_com_timeouts_auto">
            <summary>
             void eth_get_com_timeouts_auto(out double InitialTimeout, out double MaxTimeout, out double Multiplier, out uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_set_high_performance_mode">
            <summary>
             uint eth_set_high_performance_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_check_connection">
            <summary>
             uint eth_check_connection();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_eth_boot_control">
            <summary>
             void set_eth_boot_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_boot_timeout">
            <summary>
             void eth_boot_timeout(uint Timeout);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_boot_dcmd">
            <summary>
             void eth_boot_dcmd();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_program">
            <summary>
             uint store_program(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_image_eth">
            <summary>
             uint read_image_eth(string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_image_eth">
            <summary>
             uint write_image_eth(string Name);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_configure_link_loss">
            <summary>
             void eth_configure_link_loss(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_get_standalone_status">
            <summary>
             void eth_get_standalone_status(out uint Status, out uint Error, out uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.eth_config_waveform_streaming_ctrl">
            <summary>
             void eth_config_waveform_streaming_ctrl(uint Size, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_abc_from_file_20b">
            <summary>
             uint read_abc_from_file_20b(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_abc_to_file_20b">
            <summary>
             uint write_abc_to_file_20b(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_create_dat_file">
            <summary>
             uint n_create_dat_file(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.create_dat_file">
            <summary>
             uint create_dat_file(int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rtc6_count_cards">
            <summary>
             uint rtc6_count_cards();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_card_type">
            <summary>
             uint n_get_card_type(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_bios_version">
            <summary>
             uint n_get_bios_version(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_card_type">
            <summary>
             uint get_card_type();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_bios_version">
            <summary>
             uint get_bios_version();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_master_slave_config">
            <summary>
             void n_master_slave_config(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_oct_table_no">
            <summary>
             uint n_load_oct_table_no(uint CardNo, double A, double B, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table_no">
            <summary>
             uint n_load_z_table_no(uint CardNo, double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table_no_20b">
            <summary>
             uint n_load_z_table_no_20b(uint CardNo, double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_z_table_20b">
            <summary>
             uint n_load_z_table_20b(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.master_slave_config">
            <summary>
             void master_slave_config(uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_oct_table_no">
            <summary>
             uint load_oct_table_no(double A, double B, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table_no">
            <summary>
             uint load_z_table_no(double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table_no_20b">
            <summary>
             uint load_z_table_no_20b(double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_z_table_20b">
            <summary>
             uint load_z_table_20b(double A, double B, double C);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel_ctrl">
            <summary>
             uint n_list_jump_rel_ctrl(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel_ctrl">
            <summary>
             uint list_jump_rel_ctrl(int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_timestamp_counter">
            <summary>
             void n_store_timestamp_counter(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_timestamp_long">
            <summary>
             void n_get_timestamp_long(uint CardNo, out uint TimeStampL, out uint TimeStampH);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_timestamp_counter">
            <summary>
             void store_timestamp_counter();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_timestamp_long">
            <summary>
             void get_timestamp_long(out uint TimeStampL, out uint TimeStampH);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_control_eth">
            <summary>
             void n_time_control_eth(uint CardNo, double PPM);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_control_eth">
            <summary>
             void time_control_eth(double PPM);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_spot_distance_ctrl">
            <summary>
             void n_spot_distance_ctrl(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulse_form">
            <summary>
             void n_set_laser_pulse_form(uint CardNo, uint Mode, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulse_sync">
            <summary>
             void n_set_laser_pulse_sync(uint CardNo, uint Mode, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_controlpreview_compensation_ctrl">
            <summary>
             void n_set_controlpreview_compensation_ctrl(uint CardNo, uint ControlPreview, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.spot_distance_ctrl">
            <summary>
             void spot_distance_ctrl(double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulse_form">
            <summary>
             void set_laser_pulse_form(uint Mode, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulse_sync">
            <summary>
             void set_laser_pulse_sync(uint Mode, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_controlpreview_compensation_ctrl">
            <summary>
             void set_controlpreview_compensation_ctrl(uint ControlPreview, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_x">
            <summary>
             void n_set_mcbsp_global_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_y">
            <summary>
             void n_set_mcbsp_global_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_rot">
            <summary>
             void n_set_mcbsp_global_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_matrix">
            <summary>
             void n_set_mcbsp_global_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_fly_overflow_ctrl">
            <summary>
             void n_clear_fly_overflow_ctrl(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_x">
            <summary>
             void set_mcbsp_global_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_y">
            <summary>
             void set_mcbsp_global_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_rot">
            <summary>
             void set_mcbsp_global_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_matrix">
            <summary>
             void set_mcbsp_global_matrix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_fly_overflow_ctrl">
            <summary>
             void clear_fly_overflow_ctrl(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_waveform_offset">
            <summary>
             void n_get_waveform_offset(uint CardNo, uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position_4">
            <summary>
             void n_home_position_4(uint CardNo, int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_home_position_4">
            <summary>
             void n_get_home_position_4(uint CardNo, out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_home_4_return_time">
            <summary>
             void n_set_home_4_return_time(uint CardNo, uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_home_4_return_time">
            <summary>
             uint n_get_home_4_return_time(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_uart_config">
            <summary>
             uint n_uart_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_transform_offset">
            <summary>
             void n_get_transform_offset(uint CardNo, uint Channel1, uint Channel2, uint Offset, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out_oie_ctrl">
            <summary>
             void n_set_mcbsp_out_oie_ctrl(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_multi_axis_config">
            <summary>
             void n_multi_axis_config(uint CardNo, uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_init">
            <summary>
             void n_quad_axis_init(uint CardNo, uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_get_status">
            <summary>
             uint n_quad_axis_get_status(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_quad_axis_get_values">
            <summary>
             void n_quad_axis_get_values(uint CardNo, out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_temperature">
            <summary>
             double n_get_temperature(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_waveform_offset">
            <summary>
             void get_waveform_offset(uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position_4">
            <summary>
             void home_position_4(int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_home_position_4">
            <summary>
             void get_home_position_4(out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_home_4_return_time">
            <summary>
             void set_home_4_return_time(uint Time);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_home_4_return_time">
            <summary>
             uint get_home_4_return_time();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.uart_config">
            <summary>
             uint uart_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_transform_offset">
            <summary>
             void get_transform_offset(uint Channel1, uint Channel2, uint Offset, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out_oie_ctrl">
            <summary>
             void set_mcbsp_out_oie_ctrl(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.multi_axis_config">
            <summary>
             void multi_axis_config(uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_init">
            <summary>
             void quad_axis_init(uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_get_status">
            <summary>
             uint quad_axis_get_status();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.quad_axis_get_values">
            <summary>
             void quad_axis_get_values(out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_temperature">
            <summary>
             double get_temperature();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_timelag_compensation">
            <summary>
             void n_set_timelag_compensation(uint CardNo, uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_timelag_compensation">
            <summary>
             void set_timelag_compensation(uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_scanahead_params">
            <summary>
             uint n_get_scanahead_params(uint CardNo, uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_scanahead_autodelays">
            <summary>
             int n_activate_scanahead_autodelays(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_laser_shifts">
            <summary>
             void n_set_scanahead_laser_shifts(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params">
            <summary>
             void n_set_scanahead_line_params(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_ex">
            <summary>
             void n_set_scanahead_line_params_ex(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_params">
            <summary>
             uint n_set_scanahead_params(uint CardNo, uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_speed_control">
            <summary>
             void n_set_scanahead_speed_control(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_scanahead_params">
            <summary>
             uint get_scanahead_params(uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_scanahead_autodelays">
            <summary>
             int activate_scanahead_autodelays(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_laser_shifts">
            <summary>
             void set_scanahead_laser_shifts(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params">
            <summary>
             void set_scanahead_line_params(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_ex">
            <summary>
             void set_scanahead_line_params_ex(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_params">
            <summary>
             uint set_scanahead_params(uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_speed_control">
            <summary>
             void set_scanahead_speed_control(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_timestamp_counter_list">
            <summary>
             void n_store_timestamp_counter_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_timestamp_counter">
            <summary>
             void n_wait_for_timestamp_counter(uint CardNo, uint TimeStampCounter);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_timestamp_counter_mode">
            <summary>
             void n_wait_for_timestamp_counter_mode(uint CardNo, uint TimeStampCounter, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_timestamp_counter_long">
            <summary>
             void n_wait_for_timestamp_counter_long(uint CardNo, uint WaitCounterL, uint WaitCounterH, uint MaxWaitTime, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_timestamp_counter_list">
            <summary>
             void store_timestamp_counter_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_timestamp_counter">
            <summary>
             void wait_for_timestamp_counter(uint TimeStampCounter);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_timestamp_counter_mode">
            <summary>
             void wait_for_timestamp_counter_mode(uint TimeStampCounter, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_timestamp_counter_long">
            <summary>
             void wait_for_timestamp_counter_long(uint WaitCounterL, uint WaitCounterH, uint MaxWaitTime, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_write_port_list">
            <summary>
             void n_write_port_list(uint CardNo, uint Port, uint Value, uint NoDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.write_port_list">
            <summary>
             void write_port_list(uint Port, uint Value, uint NoDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_power">
            <summary>
             void n_set_laser_power(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_spot_distance">
            <summary>
             void n_spot_distance(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_power">
            <summary>
             void set_laser_power(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.spot_distance">
            <summary>
             void spot_distance(double Dist);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_x_list">
            <summary>
             void n_set_mcbsp_global_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_y_list">
            <summary>
             void n_set_mcbsp_global_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_rot_list">
            <summary>
             void n_set_mcbsp_global_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_global_matrix_list">
            <summary>
             void n_set_mcbsp_global_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_in_range_mode">
            <summary>
             void n_wait_for_encoder_in_range_mode(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_prediction">
            <summary>
             void n_fly_prediction(uint CardNo, uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_1_axis">
            <summary>
             void n_set_fly_1_axis(uint CardNo, uint Axis, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return_1_axis">
            <summary>
             void n_fly_return_1_axis(uint CardNo, uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_1_axis">
            <summary>
             void n_wait_for_1_axis(uint CardNo, int Value, uint EncoderMode, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_1_axis">
            <summary>
             void n_activate_fly_1_axis(uint CardNo, uint Axis, uint Mode, double Scale, int Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_position_1_axis">
            <summary>
             void n_park_position_1_axis(uint CardNo, uint Mode, uint Axis, int ParkPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_return_1_axis">
            <summary>
             void n_park_return_1_axis(uint CardNo, uint Mode, uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_2_axes">
            <summary>
             void n_set_fly_2_axes(uint CardNo, uint Axis1, uint Mode1, double Scale1, uint Axis2, uint Mode2, double Scale2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return_2_axes">
            <summary>
             void n_fly_return_2_axes(uint CardNo, uint Axis1, int RetPos1, uint Axis2, int RetPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_2_axes">
            <summary>
             void n_wait_for_2_axes(uint CardNo, uint EncoderModeX, int MinValueX, int MaxValueX, uint EncoderModeY, int MinValueY, int MaxValueY, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_fly_2_axes">
            <summary>
             void n_activate_fly_2_axes(uint CardNo, uint ModeX, double ScaleX, int OffsetX, uint ModeY, double ScaleY, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_position_2_axes">
            <summary>
             void n_park_position_2_axes(uint CardNo, uint Mode, int ParkPosX, int ParkPosY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_park_return_2_axes">
            <summary>
             void n_park_return_2_axes(uint CardNo, uint Mode, int RetPosX, int RetkPosY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_fly_3_axes">
            <summary>
             void n_set_fly_3_axes(uint CardNo, uint ModeX, double ScaleX, uint ModeY, double ScaleY, uint ModeZ, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_fly_return_3_axes">
            <summary>
             void n_fly_return_3_axes(uint CardNo, int RetPosX, int RetPosY, int RetPosZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_x_list">
            <summary>
             void set_mcbsp_global_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_y_list">
            <summary>
             void set_mcbsp_global_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_rot_list">
            <summary>
             void set_mcbsp_global_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_global_matrix_list">
            <summary>
             void set_mcbsp_global_matrix_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_in_range_mode">
            <summary>
             void wait_for_encoder_in_range_mode(int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_prediction">
            <summary>
             void fly_prediction(uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_1_axis">
            <summary>
             void set_fly_1_axis(uint Axis, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return_1_axis">
            <summary>
             void fly_return_1_axis(uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_1_axis">
            <summary>
             void wait_for_1_axis(int Value, uint EncoderMode, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_1_axis">
            <summary>
             void activate_fly_1_axis(uint Axis, uint Mode, double Scale, int Offset);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_position_1_axis">
            <summary>
             void park_position_1_axis(uint Mode, uint Axis, int ParkPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_return_1_axis">
            <summary>
             void park_return_1_axis(uint Mode, uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_2_axes">
            <summary>
             void set_fly_2_axes(uint Axis1, uint Mode1, double Scale1, uint Axis2, uint Mode2, double Scale2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return_2_axes">
            <summary>
             void fly_return_2_axes(uint Axis1, int RetPos1, uint Axis2, int RetPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_2_axes">
            <summary>
             void wait_for_2_axes(uint EncoderModeX, int MinValueX, int MaxValueX, uint EncoderModeY, int MinValueY, int MaxValueY, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_fly_2_axes">
            <summary>
             void activate_fly_2_axes(uint ModeX, double ScaleX, int OffsetX, uint ModeY, double ScaleY, int OffsetY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_position_2_axes">
            <summary>
             void park_position_2_axes(uint Mode, int ParkPosX, int ParkPosY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.park_return_2_axes">
            <summary>
             void park_return_2_axes(uint Mode, int RetPosX, int RetPosY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_fly_3_axes">
            <summary>
             void set_fly_3_axes(uint ModeX, double ScaleX, uint ModeY, double ScaleY, uint ModeZ, double ScaleZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.fly_return_3_axes">
            <summary>
             void fly_return_3_axes(int RetPosX, int RetPosY, int RetPosZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_vector_2">
            <summary>
             void n_set_wobbel_vector_2(uint CardNo, double dTrans, double dLong, uint Period, double dPower, double dPower2, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_trigger8">
            <summary>
             void n_set_trigger8(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4, uint Signal5, uint Signal6, uint Signal7, uint Signal8);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out_oie_list">
            <summary>
             void n_set_mcbsp_out_oie_list(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mcbsp_out_ptr_list">
            <summary>
             void n_set_mcbsp_out_ptr_list(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis_v_2">
            <summary>
             void n_micro_vector_quad_axis_v_2(uint CardNo, int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis_v">
            <summary>
             void n_micro_vector_quad_axis_v(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_quad_axis">
            <summary>
             void n_micro_vector_quad_axis(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_micro_vector_set_position">
            <summary>
             void n_micro_vector_set_position(uint CardNo, int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_multi_axis_flags">
            <summary>
             void n_multi_axis_flags(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_vector_2">
            <summary>
             void set_wobbel_vector_2(double dTrans, double dLong, uint Period, double dPower, double dPower2, uint Ctrl);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_trigger8">
            <summary>
             void set_trigger8(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4, uint Signal5, uint Signal6, uint Signal7, uint Signal8);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_pixel">
            <summary>
             void set_pixel(uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out_oie_list">
            <summary>
             void set_mcbsp_out_oie_list(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mcbsp_out_ptr_list">
            <summary>
             void set_mcbsp_out_ptr_list(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis_v_2">
            <summary>
             void micro_vector_quad_axis_v_2(int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis_v">
            <summary>
             void micro_vector_quad_axis_v(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_quad_axis">
            <summary>
             void micro_vector_quad_axis(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.micro_vector_set_position">
            <summary>
             void micro_vector_set_position(int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.multi_axis_flags">
            <summary>
             void multi_axis_flags(uint Flags);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_activate_scanahead_autodelays_list">
            <summary>
             void n_activate_scanahead_autodelays_list(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_laser_shifts_list">
            <summary>
             void n_set_scanahead_laser_shifts_list(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_list">
            <summary>
             void n_set_scanahead_line_params_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_scanahead_line_params_ex_list">
            <summary>
             void n_set_scanahead_line_params_ex_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.activate_scanahead_autodelays_list">
            <summary>
             void activate_scanahead_autodelays_list(int Mode);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_laser_shifts_list">
            <summary>
             void set_scanahead_laser_shifts_list(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_list">
            <summary>
             void set_scanahead_line_params_list(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_scanahead_line_params_ex_list">
            <summary>
             void set_scanahead_line_params_ex_list(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_laser_timing_table">
            <summary>
             void n_set_laser_timing_table(uint CardNo, uint Index, uint F);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_set_duty_cycle_table">
            <summary>
             void n_set_duty_cycle_table(uint CardNo, uint Index, uint DutyCycle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.n_regulation3">
            <summary>
             void n_regulation3(uint CardNo, uint Fmax, uint Fmin);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_laser_timing_table">
            <summary>
             void set_laser_timing_table(uint Index, uint F);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.set_duty_cycle_table">
            <summary>
             void set_duty_cycle_table(uint Index, uint DutyCycle);
            </summary>
        </member>
        <member name="F:RTC6Import.RTC6Wrap.regulation3">
            <summary>
             void regulation3(uint Fmax, uint Fmin);
            </summary>
        </member>
    </members>
</doc>
